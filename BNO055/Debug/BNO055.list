
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009894  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1c4  0800a1c4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1cc  0800a1cc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d0  0800a1d0  0001a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001ec  0800a3c0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800a3c0  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126d0  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a17  00000000  00000000  000328ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00035308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd8  00000000  00000000  00036218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f365  00000000  00000000  00036ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a69  00000000  00000000  00056355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bc51a  00000000  00000000  00069dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001262d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  00126328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009a5c 	.word	0x08009a5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	08009a5c 	.word	0x08009a5c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4619      	mov	r1, r3
 8001056:	2007      	movs	r0, #7
 8001058:	f000 fb6a 	bl	8001730 <bno055_writeData>
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4619      	mov	r1, r3
 8001072:	203d      	movs	r0, #61	; 0x3d
 8001074:	f000 fb5c 	bl	8001730 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800107e:	2013      	movs	r0, #19
 8001080:	f000 fb4a 	bl	8001718 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001084:	e002      	b.n	800108c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001086:	2007      	movs	r0, #7
 8001088:	f000 fb46 	bl	8001718 <bno055_delay>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ffe3 	bl	8001064 <bno055_setOperationMode>
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80010a6:	200c      	movs	r0, #12
 80010a8:	f7ff ffdc 	bl	8001064 <bno055_setOperationMode>
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80010b4:	2120      	movs	r1, #32
 80010b6:	203f      	movs	r0, #63	; 0x3f
 80010b8:	f000 fb3a 	bl	8001730 <bno055_writeData>
  bno055_delay(700);
 80010bc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010c0:	f000 fb2a 	bl	8001718 <bno055_delay>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
  bno055_reset();
 80010ce:	f7ff ffef 	bl	80010b0 <bno055_reset>

  uint8_t id = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2201      	movs	r2, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	2000      	movs	r0, #0
 80010de:	f000 fc13 	bl	8001908 <bno055_readData>
  if (id != BNO055_ID) {
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	2ba0      	cmp	r3, #160	; 0xa0
 80010e6:	d004      	beq.n	80010f2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4809      	ldr	r0, [pc, #36]	; (8001114 <bno055_setup+0x4c>)
 80010ee:	f004 fe43 	bl	8005d78 <iprintf>
  }
  bno055_setPage(0);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ffa8 	bl	8001048 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80010f8:	2100      	movs	r1, #0
 80010fa:	203f      	movs	r0, #63	; 0x3f
 80010fc:	f000 fb18 	bl	8001730 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001100:	f7ff ffc8 	bl	8001094 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001104:	200a      	movs	r0, #10
 8001106:	f000 fb07 	bl	8001718 <bno055_delay>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	08009a78 	.word	0x08009a78

08001118 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8001118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800111c:	b09e      	sub	sp, #120	; 0x78
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ff8e 	bl	8001048 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 800112c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001130:	2b20      	cmp	r3, #32
 8001132:	d108      	bne.n	8001146 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001134:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800113c:	2208      	movs	r2, #8
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fbe2 	bl	8001908 <bno055_readData>
 8001144:	e007      	b.n	8001156 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001146:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800114a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114e:	2206      	movs	r2, #6
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fbd9 	bl	8001908 <bno055_readData>

  double scale = 1;
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <bno055_getVector+0x270>)
 800115c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001164:	2b0e      	cmp	r3, #14
 8001166:	d109      	bne.n	800117c <bno055_getVector+0x64>
    scale = magScale;
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <bno055_getVector+0x274>)
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f1 	bl	8000554 <__aeabi_ui2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800117a:	e03e      	b.n	80011fa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800117c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001180:	2b08      	cmp	r3, #8
 8001182:	d007      	beq.n	8001194 <bno055_getVector+0x7c>
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001188:	2b28      	cmp	r3, #40	; 0x28
 800118a:	d003      	beq.n	8001194 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800118c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001190:	2b2e      	cmp	r3, #46	; 0x2e
 8001192:	d109      	bne.n	80011a8 <bno055_getVector+0x90>
    scale = accelScale;
 8001194:	4b7e      	ldr	r3, [pc, #504]	; (8001390 <bno055_getVector+0x278>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9db 	bl	8000554 <__aeabi_ui2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011a6:	e028      	b.n	80011fa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80011a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ac:	2b14      	cmp	r3, #20
 80011ae:	d109      	bne.n	80011c4 <bno055_getVector+0xac>
    scale = angularRateScale;
 80011b0:	4b78      	ldr	r3, [pc, #480]	; (8001394 <bno055_getVector+0x27c>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9cd 	bl	8000554 <__aeabi_ui2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011c2:	e01a      	b.n	80011fa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c8:	2b1a      	cmp	r3, #26
 80011ca:	d109      	bne.n	80011e0 <bno055_getVector+0xc8>
    scale = eulerScale;
 80011cc:	4b72      	ldr	r3, [pc, #456]	; (8001398 <bno055_getVector+0x280>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9bf 	bl	8000554 <__aeabi_ui2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011de:	e00c      	b.n	80011fa <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80011e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	d108      	bne.n	80011fa <bno055_getVector+0xe2>
    scale = quaScale;
 80011e8:	4b6c      	ldr	r3, [pc, #432]	; (800139c <bno055_getVector+0x284>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b1 	bl	8000554 <__aeabi_ui2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80011fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fe:	2220      	movs	r2, #32
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f003 ff36 	bl	8005074 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8001208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800120c:	2b20      	cmp	r3, #32
 800120e:	d150      	bne.n	80012b2 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001210:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21b      	sxth	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9a6 	bl	8000574 <__aeabi_i2d>
 8001228:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800122c:	f7ff fb36 	bl	800089c <__aeabi_ddiv>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8001238:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001244:	b21b      	sxth	r3, r3
 8001246:	4313      	orrs	r3, r2
 8001248:	b21b      	sxth	r3, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff f992 	bl	8000574 <__aeabi_i2d>
 8001250:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001254:	f7ff fb22 	bl	800089c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001260:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f97e 	bl	8000574 <__aeabi_i2d>
 8001278:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800127c:	f7ff fb0e 	bl	800089c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001288:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b21a      	sxth	r2, r3
 8001290:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff f96a 	bl	8000574 <__aeabi_i2d>
 80012a0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012a4:	f7ff fafa 	bl	800089c <__aeabi_ddiv>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012b0:	e03b      	b.n	800132a <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80012b2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80012be:	b21b      	sxth	r3, r3
 80012c0:	4313      	orrs	r3, r2
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f955 	bl	8000574 <__aeabi_i2d>
 80012ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012ce:	f7ff fae5 	bl	800089c <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012da:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b21b      	sxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f941 	bl	8000574 <__aeabi_i2d>
 80012f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012f6:	f7ff fad1 	bl	800089c <__aeabi_ddiv>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001302:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21b      	sxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f92d 	bl	8000574 <__aeabi_i2d>
 800131a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800131e:	f7ff fabd 	bl	800089c <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 800132a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800132e:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001336:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800133a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800133e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001342:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001346:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800134a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800134e:	ec49 8b14 	vmov	d4, r8, r9
 8001352:	ec45 4b15 	vmov	d5, r4, r5
 8001356:	ec41 0b16 	vmov	d6, r0, r1
 800135a:	ec43 2b17 	vmov	d7, r2, r3
}
 800135e:	eeb0 0a44 	vmov.f32	s0, s8
 8001362:	eef0 0a64 	vmov.f32	s1, s9
 8001366:	eeb0 1a45 	vmov.f32	s2, s10
 800136a:	eef0 1a65 	vmov.f32	s3, s11
 800136e:	eeb0 2a46 	vmov.f32	s4, s12
 8001372:	eef0 2a66 	vmov.f32	s5, s13
 8001376:	eeb0 3a47 	vmov.f32	s6, s14
 800137a:	eef0 3a67 	vmov.f32	s7, s15
 800137e:	3778      	adds	r7, #120	; 0x78
 8001380:	46bd      	mov	sp, r7
 8001382:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001386:	bf00      	nop
 8001388:	3ff00000 	.word	0x3ff00000
 800138c:	20000006 	.word	0x20000006
 8001390:	20000000 	.word	0x20000000
 8001394:	20000002 	.word	0x20000002
 8001398:	20000004 	.word	0x20000004
 800139c:	20000008 	.word	0x20000008

080013a0 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 80013a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013a4:	b090      	sub	sp, #64	; 0x40
 80013a6:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 80013a8:	201a      	movs	r0, #26
 80013aa:	f7ff feb5 	bl	8001118 <bno055_getVector>
 80013ae:	eeb0 4a40 	vmov.f32	s8, s0
 80013b2:	eef0 4a60 	vmov.f32	s9, s1
 80013b6:	eeb0 5a41 	vmov.f32	s10, s2
 80013ba:	eef0 5a61 	vmov.f32	s11, s3
 80013be:	eeb0 6a42 	vmov.f32	s12, s4
 80013c2:	eef0 6a62 	vmov.f32	s13, s5
 80013c6:	eeb0 7a43 	vmov.f32	s14, s6
 80013ca:	eef0 7a63 	vmov.f32	s15, s7
 80013ce:	ed87 4b08 	vstr	d4, [r7, #32]
 80013d2:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80013d6:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80013da:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80013de:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80013e2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80013e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013ee:	ec49 8b14 	vmov	d4, r8, r9
 80013f2:	ec45 4b15 	vmov	d5, r4, r5
 80013f6:	ec41 0b16 	vmov	d6, r0, r1
 80013fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80013fe:	eeb0 0a44 	vmov.f32	s0, s8
 8001402:	eef0 0a64 	vmov.f32	s1, s9
 8001406:	eeb0 1a45 	vmov.f32	s2, s10
 800140a:	eef0 1a65 	vmov.f32	s3, s11
 800140e:	eeb0 2a46 	vmov.f32	s4, s12
 8001412:	eef0 2a66 	vmov.f32	s5, s13
 8001416:	eeb0 3a47 	vmov.f32	s6, s14
 800141a:	eef0 3a67 	vmov.f32	s7, s15
 800141e:	3740      	adds	r7, #64	; 0x40
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001428 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <MX_DMA_Init+0x60>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_DMA_Init+0x60>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6493      	str	r3, [r2, #72]	; 0x48
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_DMA_Init+0x60>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_DMA_Init+0x60>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <MX_DMA_Init+0x60>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6493      	str	r3, [r2, #72]	; 0x48
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <MX_DMA_Init+0x60>)
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	200b      	movs	r0, #11
 8001464:	f000 fe87 	bl	8002176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001468:	200b      	movs	r0, #11
 800146a:	f000 fe9e 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	200c      	movs	r0, #12
 8001474:	f000 fe7f 	bl	8002176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001478:	200c      	movs	r0, #12
 800147a:	f000 fe96 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000

0800148c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_GPIO_Init+0x44>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <MX_GPIO_Init+0x44>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_GPIO_Init+0x44>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_GPIO_Init+0x44>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <MX_GPIO_Init+0x44>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_GPIO_Init+0x44>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000

080014d4 <MX_I2C3_Init>:
DMA_HandleTypeDef hdma_i2c3_rx;
DMA_HandleTypeDef hdma_i2c3_tx;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014d8:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <MX_I2C3_Init+0x74>)
 80014da:	4a1c      	ldr	r2, [pc, #112]	; (800154c <MX_I2C3_Init+0x78>)
 80014dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <MX_I2C3_Init+0x74>)
 80014e0:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <MX_I2C3_Init+0x7c>)
 80014e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <MX_I2C3_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <MX_I2C3_Init+0x74>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <MX_I2C3_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_I2C3_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <MX_I2C3_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_I2C3_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_I2C3_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <MX_I2C3_Init+0x74>)
 8001510:	f001 f9a2 	bl	8002858 <HAL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800151a:	f000 fab1 	bl	8001a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800151e:	2100      	movs	r1, #0
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <MX_I2C3_Init+0x74>)
 8001522:	f001 fea5 	bl	8003270 <HAL_I2CEx_ConfigAnalogFilter>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800152c:	f000 faa8 	bl	8001a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_I2C3_Init+0x74>)
 8001534:	f001 fee7 	bl	8003306 <HAL_I2CEx_ConfigDigitalFilter>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800153e:	f000 fa9f 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000208 	.word	0x20000208
 800154c:	40007800 	.word	0x40007800
 8001550:	00303d5b 	.word	0x00303d5b

08001554 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09c      	sub	sp, #112	; 0x70
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800156c:	f107 0318 	add.w	r3, r7, #24
 8001570:	2244      	movs	r2, #68	; 0x44
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f003 fd7d 	bl	8005074 <memset>
  if(i2cHandle->Instance==I2C3)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a57      	ldr	r2, [pc, #348]	; (80016dc <HAL_I2C_MspInit+0x188>)
 8001580:	4293      	cmp	r3, r2
 8001582:	f040 80a7 	bne.w	80016d4 <HAL_I2C_MspInit+0x180>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4618      	mov	r0, r3
 8001596:	f002 fcdb 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80015a0:	f000 fa6e 	bl	8001a80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a8:	4a4d      	ldr	r2, [pc, #308]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b0:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c0:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015c2:	f043 0302 	orr.w	r3, r3, #2
 80015c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB5     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 80015e6:	2302      	movs	r3, #2
 80015e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f000 ffae 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015f8:	2320      	movs	r3, #32
 80015fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001608:	2308      	movs	r3, #8
 800160a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001610:	4619      	mov	r1, r3
 8001612:	4834      	ldr	r0, [pc, #208]	; (80016e4 <HAL_I2C_MspInit+0x190>)
 8001614:	f000 ff9e 	bl	8002554 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001618:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a30      	ldr	r2, [pc, #192]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 800161e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
 8001624:	4b2e      	ldr	r3, [pc, #184]	; (80016e0 <HAL_I2C_MspInit+0x18c>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel1;
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001632:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <HAL_I2C_MspInit+0x198>)
 8001634:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001638:	2214      	movs	r2, #20
 800163a:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800164e:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001650:	2200      	movs	r2, #0
 8001652:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8001666:	4820      	ldr	r0, [pc, #128]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 8001668:	f000 fdba 	bl	80021e0 <HAL_DMA_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 8001672:	f000 fa05 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_I2C_MspInit+0x194>)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Channel2;
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_I2C_MspInit+0x1a0>)
 8001686:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Request = DMA_REQUEST_I2C3_TX;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 800168a:	2215      	movs	r2, #21
 800168c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 8001690:	2210      	movs	r2, #16
 8001692:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80016ac:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016ba:	f000 fd91 	bl	80021e0 <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_I2C_MspInit+0x174>
    {
      Error_Handler();
 80016c4:	f000 f9dc 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c3_tx);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_I2C_MspInit+0x19c>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80016d4:	bf00      	nop
 80016d6:	3770      	adds	r7, #112	; 0x70
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40007800 	.word	0x40007800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	20000254 	.word	0x20000254
 80016ec:	40020008 	.word	0x40020008
 80016f0:	200002b4 	.word	0x200002b4
 80016f4:	4002001c 	.word	0x4002001c

080016f8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <bno055_assignI2C+0x1c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000314 	.word	0x20000314

08001718 <bno055_delay>:

void bno055_delay(int time) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4618      	mov	r0, r3
 8001724:	f000 fc2a 	bl	8001f7c <HAL_Delay>
#endif
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af02      	add	r7, sp, #8
 8001736:	4603      	mov	r3, r0
 8001738:	460a      	mov	r2, r1
 800173a:	71fb      	strb	r3, [r7, #7]
 800173c:	4613      	mov	r3, r2
 800173e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	733b      	strb	r3, [r7, #12]
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001748:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <bno055_writeData+0x184>)
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	f107 020c 	add.w	r2, r7, #12
 8001750:	230a      	movs	r3, #10
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2302      	movs	r3, #2
 8001756:	2150      	movs	r1, #80	; 0x50
 8001758:	f001 f90e 	bl	8002978 <HAL_I2C_Master_Transmit>
 800175c:	4603      	mov	r3, r0
 800175e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001760:	7dfb      	ldrb	r3, [r7, #23]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 80a0 	beq.w	80018a8 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d103      	bne.n	8001776 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 800176e:	4852      	ldr	r0, [pc, #328]	; (80018b8 <bno055_writeData+0x188>)
 8001770:	f004 fb88 	bl	8005e84 <puts>
 8001774:	e012      	b.n	800179c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d103      	bne.n	8001784 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 800177c:	484f      	ldr	r0, [pc, #316]	; (80018bc <bno055_writeData+0x18c>)
 800177e:	f004 fb81 	bl	8005e84 <puts>
 8001782:	e00b      	b.n	800179c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001784:	7dfb      	ldrb	r3, [r7, #23]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d103      	bne.n	8001792 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800178a:	484d      	ldr	r0, [pc, #308]	; (80018c0 <bno055_writeData+0x190>)
 800178c:	f004 fb7a 	bl	8005e84 <puts>
 8001790:	e004      	b.n	800179c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	4619      	mov	r1, r3
 8001796:	484b      	ldr	r0, [pc, #300]	; (80018c4 <bno055_writeData+0x194>)
 8001798:	f004 faee 	bl	8005d78 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800179c:	4b45      	ldr	r3, [pc, #276]	; (80018b4 <bno055_writeData+0x184>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f001 fae1 	bl	8002d68 <HAL_I2C_GetError>
 80017a6:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d07e      	beq.n	80018ac <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d103      	bne.n	80017bc <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80017b4:	4844      	ldr	r0, [pc, #272]	; (80018c8 <bno055_writeData+0x198>)
 80017b6:	f004 fb65 	bl	8005e84 <puts>
 80017ba:	e021      	b.n	8001800 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d103      	bne.n	80017ca <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80017c2:	4842      	ldr	r0, [pc, #264]	; (80018cc <bno055_writeData+0x19c>)
 80017c4:	f004 fb5e 	bl	8005e84 <puts>
 80017c8:	e01a      	b.n	8001800 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d103      	bne.n	80017d8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80017d0:	483f      	ldr	r0, [pc, #252]	; (80018d0 <bno055_writeData+0x1a0>)
 80017d2:	f004 fb57 	bl	8005e84 <puts>
 80017d6:	e013      	b.n	8001800 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d103      	bne.n	80017e6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80017de:	483d      	ldr	r0, [pc, #244]	; (80018d4 <bno055_writeData+0x1a4>)
 80017e0:	f004 fb50 	bl	8005e84 <puts>
 80017e4:	e00c      	b.n	8001800 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d103      	bne.n	80017f4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80017ec:	483a      	ldr	r0, [pc, #232]	; (80018d8 <bno055_writeData+0x1a8>)
 80017ee:	f004 fb49 	bl	8005e84 <puts>
 80017f2:	e005      	b.n	8001800 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b20      	cmp	r3, #32
 80017f8:	d102      	bne.n	8001800 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80017fa:	4838      	ldr	r0, [pc, #224]	; (80018dc <bno055_writeData+0x1ac>)
 80017fc:	f004 fb42 	bl	8005e84 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001800:	4b2c      	ldr	r3, [pc, #176]	; (80018b4 <bno055_writeData+0x184>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f001 faa1 	bl	8002d4c <HAL_I2C_GetState>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d103      	bne.n	800181c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001814:	4832      	ldr	r0, [pc, #200]	; (80018e0 <bno055_writeData+0x1b0>)
 8001816:	f004 fb35 	bl	8005e84 <puts>
 800181a:	e048      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b20      	cmp	r3, #32
 8001820:	d103      	bne.n	800182a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001822:	482f      	ldr	r0, [pc, #188]	; (80018e0 <bno055_writeData+0x1b0>)
 8001824:	f004 fb2e 	bl	8005e84 <puts>
 8001828:	e041      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b24      	cmp	r3, #36	; 0x24
 800182e:	d103      	bne.n	8001838 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001830:	482c      	ldr	r0, [pc, #176]	; (80018e4 <bno055_writeData+0x1b4>)
 8001832:	f004 fb27 	bl	8005e84 <puts>
 8001836:	e03a      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	2b21      	cmp	r3, #33	; 0x21
 800183c:	d103      	bne.n	8001846 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 800183e:	482a      	ldr	r0, [pc, #168]	; (80018e8 <bno055_writeData+0x1b8>)
 8001840:	f004 fb20 	bl	8005e84 <puts>
 8001844:	e033      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	2b22      	cmp	r3, #34	; 0x22
 800184a:	d103      	bne.n	8001854 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 800184c:	4827      	ldr	r0, [pc, #156]	; (80018ec <bno055_writeData+0x1bc>)
 800184e:	f004 fb19 	bl	8005e84 <puts>
 8001852:	e02c      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	2b28      	cmp	r3, #40	; 0x28
 8001858:	d103      	bne.n	8001862 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800185a:	4825      	ldr	r0, [pc, #148]	; (80018f0 <bno055_writeData+0x1c0>)
 800185c:	f004 fb12 	bl	8005e84 <puts>
 8001860:	e025      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	2b29      	cmp	r3, #41	; 0x29
 8001866:	d103      	bne.n	8001870 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001868:	4822      	ldr	r0, [pc, #136]	; (80018f4 <bno055_writeData+0x1c4>)
 800186a:	f004 fb0b 	bl	8005e84 <puts>
 800186e:	e01e      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b2a      	cmp	r3, #42	; 0x2a
 8001874:	d103      	bne.n	800187e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <bno055_writeData+0x1c8>)
 8001878:	f004 fb04 	bl	8005e84 <puts>
 800187c:	e017      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b60      	cmp	r3, #96	; 0x60
 8001882:	d103      	bne.n	800188c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001884:	481d      	ldr	r0, [pc, #116]	; (80018fc <bno055_writeData+0x1cc>)
 8001886:	f004 fafd 	bl	8005e84 <puts>
 800188a:	e010      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	2ba0      	cmp	r3, #160	; 0xa0
 8001890:	d103      	bne.n	800189a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001892:	481b      	ldr	r0, [pc, #108]	; (8001900 <bno055_writeData+0x1d0>)
 8001894:	f004 faf6 	bl	8005e84 <puts>
 8001898:	e009      	b.n	80018ae <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	2be0      	cmp	r3, #224	; 0xe0
 800189e:	d106      	bne.n	80018ae <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80018a0:	4818      	ldr	r0, [pc, #96]	; (8001904 <bno055_writeData+0x1d4>)
 80018a2:	f004 faef 	bl	8005e84 <puts>
 80018a6:	e002      	b.n	80018ae <bno055_writeData+0x17e>
    return;
 80018a8:	bf00      	nop
 80018aa:	e000      	b.n	80018ae <bno055_writeData+0x17e>
    return;
 80018ac:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000314 	.word	0x20000314
 80018b8:	08009ab4 	.word	0x08009ab4
 80018bc:	08009ad8 	.word	0x08009ad8
 80018c0:	08009b00 	.word	0x08009b00
 80018c4:	08009b24 	.word	0x08009b24
 80018c8:	08009b3c 	.word	0x08009b3c
 80018cc:	08009b50 	.word	0x08009b50
 80018d0:	08009b64 	.word	0x08009b64
 80018d4:	08009b78 	.word	0x08009b78
 80018d8:	08009b8c 	.word	0x08009b8c
 80018dc:	08009ba0 	.word	0x08009ba0
 80018e0:	08009bb8 	.word	0x08009bb8
 80018e4:	08009bd0 	.word	0x08009bd0
 80018e8:	08009be4 	.word	0x08009be4
 80018ec:	08009bfc 	.word	0x08009bfc
 80018f0:	08009c14 	.word	0x08009c14
 80018f4:	08009c2c 	.word	0x08009c2c
 80018f8:	08009c4c 	.word	0x08009c4c
 80018fc:	08009c6c 	.word	0x08009c6c
 8001900:	08009c84 	.word	0x08009c84
 8001904:	08009c9c 	.word	0x08009c9c

08001908 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af02      	add	r7, sp, #8
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <bno055_readData+0x40>)
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	1dfa      	adds	r2, r7, #7
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	2150      	movs	r1, #80	; 0x50
 8001926:	f001 f827 	bl	8002978 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <bno055_readData+0x40>)
 800192c:	6818      	ldr	r0, [r3, #0]
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	b29b      	uxth	r3, r3
 8001932:	2264      	movs	r2, #100	; 0x64
 8001934:	9200      	str	r2, [sp, #0]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	2150      	movs	r1, #80	; 0x50
 800193a:	f001 f911 	bl	8002b60 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000314 	.word	0x20000314

0800194c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE

{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001954:	1d39      	adds	r1, r7, #4
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	2201      	movs	r2, #1
 800195c:	4803      	ldr	r0, [pc, #12]	; (800196c <__io_putchar+0x20>)
 800195e:	f002 fd37 	bl	80043d0 <HAL_UART_Transmit>

return ch;
 8001962:	687b      	ldr	r3, [r7, #4]

}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000031c 	.word	0x2000031c

08001970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001976:	f000 fa90 	bl	8001e9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800197a:	f000 f841 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197e:	f7ff fd85 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 8001982:	f7ff fd51 	bl	8001428 <MX_DMA_Init>
  MX_I2C3_Init();
 8001986:	f7ff fda5 	bl	80014d4 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 800198a:	f000 f9b9 	bl	8001d00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  printf("Hello\r\n");
  bno055_assignI2C(&hi2c3);
 800198e:	481a      	ldr	r0, [pc, #104]	; (80019f8 <main+0x88>)
 8001990:	f7ff feb2 	bl	80016f8 <bno055_assignI2C>
  bno055_setup();
 8001994:	f7ff fb98 	bl	80010c8 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001998:	f7ff fb83 	bl	80010a2 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	bno055_vector_t v = bno055_getVectorEuler();
 800199c:	f7ff fd00 	bl	80013a0 <bno055_getVectorEuler>
 80019a0:	eeb0 4a40 	vmov.f32	s8, s0
 80019a4:	eef0 4a60 	vmov.f32	s9, s1
 80019a8:	eeb0 5a41 	vmov.f32	s10, s2
 80019ac:	eef0 5a61 	vmov.f32	s11, s3
 80019b0:	eeb0 6a42 	vmov.f32	s12, s4
 80019b4:	eef0 6a62 	vmov.f32	s13, s5
 80019b8:	eeb0 7a43 	vmov.f32	s14, s6
 80019bc:	eef0 7a63 	vmov.f32	s15, s7
 80019c0:	ed87 4b00 	vstr	d4, [r7]
 80019c4:	ed87 5b02 	vstr	d5, [r7, #8]
 80019c8:	ed87 6b04 	vstr	d6, [r7, #16]
 80019cc:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Orientation: %.2f %.2f %.2f\r\n", v.x, v.y, v.z);
 80019d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019e0:	e9cd 2300 	strd	r2, r3, [sp]
 80019e4:	4622      	mov	r2, r4
 80019e6:	462b      	mov	r3, r5
 80019e8:	4804      	ldr	r0, [pc, #16]	; (80019fc <main+0x8c>)
 80019ea:	f004 f9c5 	bl	8005d78 <iprintf>
//	printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
//	v = bno055_getVectorQuaternion();
//	printf("W: %.2f X: %.2f Y: %.2f Z: %.2f\r\n", v.w, v.x, v.y, v.z);
	HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	; 0x64
 80019f0:	f000 fac4 	bl	8001f7c <HAL_Delay>
  {
 80019f4:	e7d2      	b.n	800199c <main+0x2c>
 80019f6:	bf00      	nop
 80019f8:	20000208 	.word	0x20000208
 80019fc:	08009cb4 	.word	0x08009cb4

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0318 	add.w	r3, r7, #24
 8001a0a:	2238      	movs	r2, #56	; 0x38
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fb30 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a22:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a26:	f001 fcbb 	bl	80033a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a34:	2340      	movs	r3, #64	; 0x40
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a3c:	f107 0318 	add.w	r3, r7, #24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fd51 	bl	80034e8 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a4c:	f000 f818 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a54:	2301      	movs	r3, #1
 8001a56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 f855 	bl	8003b18 <HAL_RCC_ClockConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001a74:	f000 f804 	bl	8001a80 <Error_Handler>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3750      	adds	r7, #80	; 0x50
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <Error_Handler+0x8>
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <NMI_Handler+0x4>

08001ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <HardFault_Handler+0x4>

08001ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <MemManage_Handler+0x4>

08001ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aea:	e7fe      	b.n	8001aea <BusFault_Handler+0x4>

08001aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af0:	e7fe      	b.n	8001af0 <UsageFault_Handler+0x4>

08001af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b20:	f000 fa0e 	bl	8001f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA1_Channel1_IRQHandler+0x10>)
 8001b2e:	f000 fbff 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000254 	.word	0x20000254

08001b3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA1_Channel2_IRQHandler+0x10>)
 8001b42:	f000 fbf5 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002b4 	.word	0x200002b4

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6a:	f003 fa4b 	bl	8005004 <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
  return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:

void _exit (int status)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b92:	e7fe      	b.n	8001b92 <_exit+0x12>

08001b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
  }

  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e009      	b.n	8001bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff feaf 	bl	800194c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf1      	blt.n	8001be0 <_write+0x12>
  }
  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:

int _close(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:

int _isatty(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f003 f9b0 	bl	8005004 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20008000 	.word	0x20008000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20000318 	.word	0x20000318
 8001cd8:	200003c0 	.word	0x200003c0

08001cdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d06:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <MX_USART2_UART_Init+0x94>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d48:	4811      	ldr	r0, [pc, #68]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d4a:	f002 faf1 	bl	8004330 <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d54:	f7ff fe94 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	480d      	ldr	r0, [pc, #52]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d5c:	f003 f888 	bl	8004e70 <HAL_UARTEx_SetTxFifoThreshold>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d66:	f7ff fe8b 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4808      	ldr	r0, [pc, #32]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d6e:	f003 f8bd 	bl	8004eec <HAL_UARTEx_SetRxFifoThreshold>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d78:	f7ff fe82 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_USART2_UART_Init+0x90>)
 8001d7e:	f003 f83e 	bl	8004dfe <HAL_UARTEx_DisableFifoMode>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d88:	f7ff fe7a 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000031c 	.word	0x2000031c
 8001d94:	40004400 	.word	0x40004400

08001d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b09a      	sub	sp, #104	; 0x68
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	2244      	movs	r2, #68	; 0x44
 8001db6:	2100      	movs	r1, #0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 f95b 	bl	8005074 <memset>
  if(uartHandle->Instance==USART2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_UART_MspInit+0xa8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d136      	bne.n	8001e36 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 f8bb 	bl	8003f50 <HAL_RCCEx_PeriphCLKConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001de0:	f7ff fe4e 	bl	8001a80 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dee:	6593      	str	r3, [r2, #88]	; 0x58
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e00:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_UART_MspInit+0xac>)
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e14:	230c      	movs	r3, #12
 8001e16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e24:	2307      	movs	r3, #7
 8001e26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e32:	f000 fb8f 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	3768      	adds	r7, #104	; 0x68
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40004400 	.word	0x40004400
 8001e44:	40021000 	.word	0x40021000

08001e48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e4a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480d      	ldr	r0, [pc, #52]	; (8001e84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490e      	ldr	r1, [pc, #56]	; (8001e88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0e      	ldr	r2, [pc, #56]	; (8001e8c <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0b      	ldr	r4, [pc, #44]	; (8001e94 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e72:	f7ff ff33 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e76:	f003 f8cb 	bl	8005010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e7a:	f7ff fd79 	bl	8001970 <main>

08001e7e <LoopForever>:

LoopForever:
    b LoopForever
 8001e7e:	e7fe      	b.n	8001e7e <LoopForever>
  ldr   r0, =_estack
 8001e80:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e88:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e8c:	0800a1d4 	.word	0x0800a1d4
  ldr r2, =_sbss
 8001e90:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001e94:	200003c0 	.word	0x200003c0

08001e98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e98:	e7fe      	b.n	8001e98 <ADC1_2_IRQHandler>

08001e9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea4:	2003      	movs	r0, #3
 8001ea6:	f000 f95b 	bl	8002160 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eaa:	200f      	movs	r0, #15
 8001eac:	f000 f80e 	bl	8001ecc <HAL_InitTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d002      	beq.n	8001ebc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	71fb      	strb	r3, [r7, #7]
 8001eba:	e001      	b.n	8001ec0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ebc:	f7ff fde6 	bl	8001a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]

}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_InitTick+0x68>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d022      	beq.n	8001f26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_InitTick+0x6c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_InitTick+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f966 	bl	80021c6 <HAL_SYSTICK_Config>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b0f      	cmp	r3, #15
 8001f04:	d809      	bhi.n	8001f1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f06:	2200      	movs	r2, #0
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f0e:	f000 f932 	bl	8002176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_InitTick+0x70>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	e007      	b.n	8001f2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e004      	b.n	8001f2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	e001      	b.n	8001f2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000014 	.word	0x20000014
 8001f38:	2000000c 	.word	0x2000000c
 8001f3c:	20000010 	.word	0x20000010

08001f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f44:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x20>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <HAL_IncTick+0x1c>)
 8001f50:	6013      	str	r3, [r2, #0]
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	200003ac 	.word	0x200003ac
 8001f60:	20000014 	.word	0x20000014

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200003ac 	.word	0x200003ac

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f94:	d004      	beq.n	8001fa0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_Delay+0x40>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa0:	bf00      	nop
 8001fa2:	f7ff ffdf 	bl	8001f64 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d8f7      	bhi.n	8001fa2 <HAL_Delay+0x26>
  {
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000014 	.word	0x20000014

08001fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fdc:	4013      	ands	r3, r2
 8001fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	60d3      	str	r3, [r2, #12]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <__NVIC_GetPriorityGrouping+0x18>)
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	f003 0307 	and.w	r3, r3, #7
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002032:	2b00      	cmp	r3, #0
 8002034:	db0b      	blt.n	800204e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	f003 021f 	and.w	r2, r3, #31
 800203c:	4907      	ldr	r1, [pc, #28]	; (800205c <__NVIC_EnableIRQ+0x38>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	2001      	movs	r0, #1
 8002046:	fa00 f202 	lsl.w	r2, r0, r2
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	e000e100 	.word	0xe000e100

08002060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	6039      	str	r1, [r7, #0]
 800206a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002070:	2b00      	cmp	r3, #0
 8002072:	db0a      	blt.n	800208a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	490c      	ldr	r1, [pc, #48]	; (80020ac <__NVIC_SetPriority+0x4c>)
 800207a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207e:	0112      	lsls	r2, r2, #4
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	440b      	add	r3, r1
 8002084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002088:	e00a      	b.n	80020a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	4908      	ldr	r1, [pc, #32]	; (80020b0 <__NVIC_SetPriority+0x50>)
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	3b04      	subs	r3, #4
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	b2d2      	uxtb	r2, r2
 800209c:	440b      	add	r3, r1
 800209e:	761a      	strb	r2, [r3, #24]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b089      	sub	sp, #36	; 0x24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	bf28      	it	cs
 80020d2:	2304      	movcs	r3, #4
 80020d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3304      	adds	r3, #4
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d902      	bls.n	80020e4 <NVIC_EncodePriority+0x30>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3b03      	subs	r3, #3
 80020e2:	e000      	b.n	80020e6 <NVIC_EncodePriority+0x32>
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	401a      	ands	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa01 f303 	lsl.w	r3, r1, r3
 8002106:	43d9      	mvns	r1, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	4313      	orrs	r3, r2
         );
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
	...

0800211c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3b01      	subs	r3, #1
 8002128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212c:	d301      	bcc.n	8002132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212e:	2301      	movs	r3, #1
 8002130:	e00f      	b.n	8002152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <SysTick_Config+0x40>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	3b01      	subs	r3, #1
 8002138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800213a:	210f      	movs	r1, #15
 800213c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002140:	f7ff ff8e 	bl	8002060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <SysTick_Config+0x40>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800214a:	4b04      	ldr	r3, [pc, #16]	; (800215c <SysTick_Config+0x40>)
 800214c:	2207      	movs	r2, #7
 800214e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	e000e010 	.word	0xe000e010

08002160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ff29 	bl	8001fc0 <__NVIC_SetPriorityGrouping>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b086      	sub	sp, #24
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	60b9      	str	r1, [r7, #8]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff40 	bl	8002008 <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff90 	bl	80020b4 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5f 	bl	8002060 <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff33 	bl	8002024 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa4 	bl	800211c <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e08d      	b.n	800230e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_DMA_Init+0x138>)
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d80f      	bhi.n	800221e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	4b45      	ldr	r3, [pc, #276]	; (800231c <HAL_DMA_Init+0x13c>)
 8002206:	4413      	add	r3, r2
 8002208:	4a45      	ldr	r2, [pc, #276]	; (8002320 <HAL_DMA_Init+0x140>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a42      	ldr	r2, [pc, #264]	; (8002324 <HAL_DMA_Init+0x144>)
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
 800221c:	e00e      	b.n	800223c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	4b40      	ldr	r3, [pc, #256]	; (8002328 <HAL_DMA_Init+0x148>)
 8002226:	4413      	add	r3, r2
 8002228:	4a3d      	ldr	r2, [pc, #244]	; (8002320 <HAL_DMA_Init+0x140>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a3c      	ldr	r2, [pc, #240]	; (800232c <HAL_DMA_Init+0x14c>)
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002256:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f8fe 	bl	8002490 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800229c:	d102      	bne.n	80022a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022b8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_DMA_Init+0x104>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d80c      	bhi.n	80022e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f91e 	bl	800250c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	e008      	b.n	80022f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40020407 	.word	0x40020407
 800231c:	bffdfff8 	.word	0xbffdfff8
 8002320:	cccccccd 	.word	0xcccccccd
 8002324:	40020000 	.word	0x40020000
 8002328:	bffdfbf8 	.word	0xbffdfbf8
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2204      	movs	r2, #4
 8002352:	409a      	lsls	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d026      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d021      	beq.n	80023aa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2104      	movs	r1, #4
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d071      	beq.n	8002484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023a8:	e06c      	b.n	8002484 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	2202      	movs	r2, #2
 80023b4:	409a      	lsls	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d02e      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d029      	beq.n	800241c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 020a 	bic.w	r2, r2, #10
 80023e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	2102      	movs	r1, #2
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d038      	beq.n	8002484 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800241a:	e033      	b.n	8002484 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2208      	movs	r2, #8
 8002426:	409a      	lsls	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4013      	ands	r3, r2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d02a      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d025      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 020e 	bic.w	r2, r2, #14
 8002448:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 021f 	and.w	r2, r3, #31
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002484:	bf00      	nop
 8002486:	bf00      	nop
}
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d802      	bhi.n	80024aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80024a4:	4b15      	ldr	r3, [pc, #84]	; (80024fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	e001      	b.n	80024ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80024ac:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	3b08      	subs	r3, #8
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	009a      	lsls	r2, r3, #2
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2201      	movs	r2, #1
 80024e4:	409a      	lsls	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40020407 	.word	0x40020407
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020820 	.word	0x40020820
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	40020880 	.word	0x40020880

0800250c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	b2db      	uxtb	r3, r3
 800251a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	461a      	mov	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800252e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	3b01      	subs	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2201      	movs	r2, #1
 800253a:	409a      	lsls	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	1000823f 	.word	0x1000823f
 8002550:	40020940 	.word	0x40020940

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002562:	e15a      	b.n	800281a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	4013      	ands	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 814c 	beq.w	8002814 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d005      	beq.n	8002594 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002590:	2b02      	cmp	r3, #2
 8002592:	d130      	bne.n	80025f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	2203      	movs	r2, #3
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ca:	2201      	movs	r2, #1
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0201 	and.w	r2, r3, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d017      	beq.n	8002632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d123      	bne.n	8002686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	08da      	lsrs	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3208      	adds	r2, #8
 8002646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	08da      	lsrs	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3208      	adds	r2, #8
 8002680:	6939      	ldr	r1, [r7, #16]
 8002682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 0203 	and.w	r2, r3, #3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 80a6 	beq.w	8002814 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c8:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_GPIO_Init+0x2e4>)
 80026ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026cc:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_GPIO_Init+0x2e4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6613      	str	r3, [r2, #96]	; 0x60
 80026d4:	4b58      	ldr	r3, [pc, #352]	; (8002838 <HAL_GPIO_Init+0x2e4>)
 80026d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	60bb      	str	r3, [r7, #8]
 80026de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026e0:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_GPIO_Init+0x2e8>)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	089b      	lsrs	r3, r3, #2
 80026e6:	3302      	adds	r3, #2
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	220f      	movs	r2, #15
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800270a:	d01f      	beq.n	800274c <HAL_GPIO_Init+0x1f8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_GPIO_Init+0x2ec>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d019      	beq.n	8002748 <HAL_GPIO_Init+0x1f4>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_GPIO_Init+0x2f0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d013      	beq.n	8002744 <HAL_GPIO_Init+0x1f0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a4a      	ldr	r2, [pc, #296]	; (8002848 <HAL_GPIO_Init+0x2f4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00d      	beq.n	8002740 <HAL_GPIO_Init+0x1ec>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a49      	ldr	r2, [pc, #292]	; (800284c <HAL_GPIO_Init+0x2f8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d007      	beq.n	800273c <HAL_GPIO_Init+0x1e8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a48      	ldr	r2, [pc, #288]	; (8002850 <HAL_GPIO_Init+0x2fc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d101      	bne.n	8002738 <HAL_GPIO_Init+0x1e4>
 8002734:	2305      	movs	r3, #5
 8002736:	e00a      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 8002738:	2306      	movs	r3, #6
 800273a:	e008      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 800273c:	2304      	movs	r3, #4
 800273e:	e006      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 8002740:	2303      	movs	r3, #3
 8002742:	e004      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 8002744:	2302      	movs	r3, #2
 8002746:	e002      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 8002748:	2301      	movs	r3, #1
 800274a:	e000      	b.n	800274e <HAL_GPIO_Init+0x1fa>
 800274c:	2300      	movs	r3, #0
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	f002 0203 	and.w	r2, r2, #3
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	4093      	lsls	r3, r2
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800275e:	4937      	ldr	r1, [pc, #220]	; (800283c <HAL_GPIO_Init+0x2e8>)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	3302      	adds	r3, #2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800276c:	4b39      	ldr	r3, [pc, #228]	; (8002854 <HAL_GPIO_Init+0x300>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_GPIO_Init+0x300>)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_GPIO_Init+0x300>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ba:	4a26      	ldr	r2, [pc, #152]	; (8002854 <HAL_GPIO_Init+0x300>)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_GPIO_Init+0x300>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_GPIO_Init+0x300>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027ea:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <HAL_GPIO_Init+0x300>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800280e:	4a11      	ldr	r2, [pc, #68]	; (8002854 <HAL_GPIO_Init+0x300>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	fa22 f303 	lsr.w	r3, r2, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	f47f ae9d 	bne.w	8002564 <HAL_GPIO_Init+0x10>
  }
}
 800282a:	bf00      	nop
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	48000400 	.word	0x48000400
 8002844:	48000800 	.word	0x48000800
 8002848:	48000c00 	.word	0x48000c00
 800284c:	48001000 	.word	0x48001000
 8002850:	48001400 	.word	0x48001400
 8002854:	40010400 	.word	0x40010400

08002858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e081      	b.n	800296e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fe68 	bl	8001554 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e006      	b.n	80028e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d104      	bne.n	80028f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002904:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002914:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	430a      	orrs	r2, r1
 800292e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69d9      	ldr	r1, [r3, #28]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1a      	ldr	r2, [r3, #32]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	607a      	str	r2, [r7, #4]
 8002982:	461a      	mov	r2, r3
 8002984:	460b      	mov	r3, r1
 8002986:	817b      	strh	r3, [r7, #10]
 8002988:	4613      	mov	r3, r2
 800298a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	f040 80da 	bne.w	8002b4e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_I2C_Master_Transmit+0x30>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0d3      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029b0:	f7ff fad8 	bl	8001f64 <HAL_GetTick>
 80029b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	2319      	movs	r3, #25
 80029bc:	2201      	movs	r2, #1
 80029be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa00 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0be      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2221      	movs	r2, #33	; 0x21
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2210      	movs	r2, #16
 80029de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	2bff      	cmp	r3, #255	; 0xff
 8002a02:	d90e      	bls.n	8002a22 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 fbf6 	bl	800320c <I2C_TransferConfig>
 8002a20:	e06c      	b.n	8002afc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	8979      	ldrh	r1, [r7, #10]
 8002a34:	4b48      	ldr	r3, [pc, #288]	; (8002b58 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fbe5 	bl	800320c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a42:	e05b      	b.n	8002afc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	6a39      	ldr	r1, [r7, #32]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f9fd 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e07b      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d034      	beq.n	8002afc <HAL_I2C_Master_Transmit+0x184>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d130      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 f98f 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e04d      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2bff      	cmp	r3, #255	; 0xff
 8002abc:	d90e      	bls.n	8002adc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	2300      	movs	r3, #0
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fb99 	bl	800320c <I2C_TransferConfig>
 8002ada:	e00f      	b.n	8002afc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	8979      	ldrh	r1, [r7, #10]
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fb88 	bl	800320c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d19e      	bne.n	8002a44 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f9dc 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01a      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_I2C_Master_Transmit+0x1e4>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2220      	movs	r2, #32
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
  }
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80002000 	.word	0x80002000
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
 8002b70:	4613      	mov	r3, r2
 8002b72:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f040 80db 	bne.w	8002d38 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_I2C_Master_Receive+0x30>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0d4      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b98:	f7ff f9e4 	bl	8001f64 <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	2319      	movs	r3, #25
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f90c 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e0bf      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2222      	movs	r2, #34	; 0x22
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	893a      	ldrh	r2, [r7, #8]
 8002bda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	2bff      	cmp	r3, #255	; 0xff
 8002bea:	d90e      	bls.n	8002c0a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	22ff      	movs	r2, #255	; 0xff
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	8979      	ldrh	r1, [r7, #10]
 8002bfa:	4b52      	ldr	r3, [pc, #328]	; (8002d44 <HAL_I2C_Master_Receive+0x1e4>)
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fb02 	bl	800320c <I2C_TransferConfig>
 8002c08:	e06d      	b.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	4b49      	ldr	r3, [pc, #292]	; (8002d44 <HAL_I2C_Master_Receive+0x1e4>)
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 faf1 	bl	800320c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c2a:	e05c      	b.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	6a39      	ldr	r1, [r7, #32]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f985 	bl	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07c      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d034      	beq.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d130      	bne.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f89a 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e04d      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2bff      	cmp	r3, #255	; 0xff
 8002ca6:	d90e      	bls.n	8002cc6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 faa4 	bl	800320c <I2C_TransferConfig>
 8002cc4:	e00f      	b.n	8002ce6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	8979      	ldrh	r1, [r7, #10]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 fa93 	bl	800320c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d19d      	bne.n	8002c2c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	6a39      	ldr	r1, [r7, #32]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f8e7 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e01a      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <HAL_I2C_Master_Receive+0x1e8>)
 8002d18:	400b      	ands	r3, r1
 8002d1a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	80002400 	.word	0x80002400
 8002d48:	fe00e800 	.word	0xfe00e800

08002d4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5a:	b2db      	uxtb	r3, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d007      	beq.n	8002dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	619a      	str	r2, [r3, #24]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	e022      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de0:	d01e      	beq.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7ff f8bf 	bl	8001f64 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e00f      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d0cd      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e54:	e02c      	b.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f8ea 	bl	8003034 <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e02a      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e70:	d01e      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff f877 	bl	8001f64 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d113      	bne.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e007      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d1cb      	bne.n	8002e56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	e028      	b.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f8aa 	bl	8003034 <I2C_IsErrorOccurred>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e026      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f83b 	bl	8001f64 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d1cf      	bne.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f4c:	e064      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f86e 	bl	8003034 <I2C_IsErrorOccurred>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e062      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d138      	bne.n	8002fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d105      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e04e      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b10      	cmp	r3, #16
 8002f96:	d107      	bne.n	8002fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa6:	e002      	b.n	8002fae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6859      	ldr	r1, [r3, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e022      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7fe ffbf 	bl	8001f64 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10f      	bne.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	f043 0220 	orr.w	r2, r3, #32
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b04      	cmp	r3, #4
 8003024:	d193      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	fe00e800 	.word	0xfe00e800

08003034 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d075      	beq.n	800314c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2210      	movs	r2, #16
 8003066:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003068:	e056      	b.n	8003118 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003070:	d052      	beq.n	8003118 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fe ff77 	bl	8001f64 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_IsErrorOccurred+0x54>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d147      	bne.n	8003118 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800309a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030aa:	d12e      	bne.n	800310a <I2C_IsErrorOccurred+0xd6>
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b2:	d02a      	beq.n	800310a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b20      	cmp	r3, #32
 80030b8:	d027      	beq.n	800310a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030ca:	f7fe ff4b 	bl	8001f64 <HAL_GetTick>
 80030ce:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d0:	e01b      	b.n	800310a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030d2:	f7fe ff47 	bl	8001f64 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b19      	cmp	r3, #25
 80030de:	d914      	bls.n	800310a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b20      	cmp	r3, #32
 8003116:	d1dc      	bne.n	80030d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d003      	beq.n	800312e <I2C_IsErrorOccurred+0xfa>
 8003126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800312a:	2b00      	cmp	r3, #0
 800312c:	d09d      	beq.n	800306a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800312e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2220      	movs	r2, #32
 800313c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	f043 0304 	orr.w	r3, r3, #4
 8003144:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800316e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003190:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01c      	beq.n	80031fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fddc 	bl	8002d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <I2C_IsErrorOccurred+0x1d4>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003200:	4618      	mov	r0, r3
 8003202:	3728      	adds	r7, #40	; 0x28
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	fe00e800 	.word	0xfe00e800

0800320c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	817b      	strh	r3, [r7, #10]
 800321a:	4613      	mov	r3, r2
 800321c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800321e:	897b      	ldrh	r3, [r7, #10]
 8003220:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003224:	7a7b      	ldrb	r3, [r7, #9]
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800322c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	4313      	orrs	r3, r2
 8003236:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800323a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <I2C_TransferConfig+0x60>)
 800324c:	430b      	orrs	r3, r1
 800324e:	43db      	mvns	r3, r3
 8003250:	ea02 0103 	and.w	r1, r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	03ff63ff 	.word	0x03ff63ff

08003270 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	d138      	bne.n	80032f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003290:	2302      	movs	r3, #2
 8003292:	e032      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2224      	movs	r2, #36	; 0x24
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	e000      	b.n	80032fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032f8:	2302      	movs	r3, #2
  }
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003306:	b480      	push	{r7}
 8003308:	b085      	sub	sp, #20
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b20      	cmp	r3, #32
 800331a:	d139      	bne.n	8003390 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003326:	2302      	movs	r3, #2
 8003328:	e033      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2224      	movs	r2, #36	; 0x24
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003358:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d141      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ba:	d131      	bne.n	8003420 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033c2:	4a46      	ldr	r2, [pc, #280]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033cc:	4b43      	ldr	r3, [pc, #268]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033d4:	4a41      	ldr	r2, [pc, #260]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033dc:	4b40      	ldr	r3, [pc, #256]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2232      	movs	r2, #50	; 0x32
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033e8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ec:	0c9b      	lsrs	r3, r3, #18
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033f2:	e002      	b.n	80033fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033fa:	4b38      	ldr	r3, [pc, #224]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003406:	d102      	bne.n	800340e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f2      	bne.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800341a:	d158      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e057      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003420:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003426:	4a2d      	ldr	r2, [pc, #180]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800342c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003430:	e04d      	b.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d141      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003446:	d131      	bne.n	80034ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344e:	4a23      	ldr	r2, [pc, #140]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003458:	4b20      	ldr	r3, [pc, #128]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003466:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2232      	movs	r2, #50	; 0x32
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a1c      	ldr	r2, [pc, #112]	; (80034e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	0c9b      	lsrs	r3, r3, #18
 800347a:	3301      	adds	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347e:	e002      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3b01      	subs	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003486:	4b15      	ldr	r3, [pc, #84]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003492:	d102      	bne.n	800349a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f2      	bne.n	8003480 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a6:	d112      	bne.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e011      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b2:	4a0a      	ldr	r2, [pc, #40]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034bc:	e007      	b.n	80034ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c6:	4a05      	ldr	r2, [pc, #20]	; (80034dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40007000 	.word	0x40007000
 80034e0:	2000000c 	.word	0x2000000c
 80034e4:	431bde83 	.word	0x431bde83

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e306      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b97      	ldr	r3, [pc, #604]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003510:	4b94      	ldr	r3, [pc, #592]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x3e>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d002      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e2e1      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a84      	ldr	r2, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7b      	ldr	r2, [pc, #492]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b78      	ldr	r3, [pc, #480]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a77      	ldr	r2, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a74      	ldr	r2, [pc, #464]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fce0 	bl	8001f64 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fcdc 	bl	8001f64 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e2a6      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fccc 	bl	8001f64 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fcc8 	bl	8001f64 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e292      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	4b60      	ldr	r3, [pc, #384]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003608:	4b56      	ldr	r3, [pc, #344]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d102      	bne.n	800361e <HAL_RCC_OscConfig+0x136>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d002      	beq.n	8003624 <HAL_RCC_OscConfig+0x13c>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11f      	bne.n	8003664 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x154>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e265      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4946      	ldr	r1, [pc, #280]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe fc39 	bl	8001ecc <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d043      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e251      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fc74 	bl	8001f64 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe fc70 	bl	8001f64 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e23a      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	492d      	ldr	r1, [pc, #180]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 80036b2:	e01a      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fc50 	bl	8001f64 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe fc4c 	bl	8001f64 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e216      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e0>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d041      	beq.n	800377a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01c      	beq.n	8003738 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe fc29 	bl	8001f64 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe fc25 	bl	8001f64 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1ef      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ef      	beq.n	8003716 <HAL_RCC_OscConfig+0x22e>
 8003736:	e020      	b.n	800377a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe fc0c 	bl	8001f64 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374e:	e00d      	b.n	800376c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe fc08 	bl	8001f64 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d906      	bls.n	800376c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1d2      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376c:	4b8c      	ldr	r3, [pc, #560]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ea      	bne.n	8003750 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a6 	beq.w	80038d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x2b4>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x2b6>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a7e      	ldr	r2, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fe fbc5 	bl	8001f64 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fe fbc1 	bl	8001f64 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e18b      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_RCC_OscConfig+0x32e>
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003814:	e024      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d110      	bne.n	8003840 <HAL_RCC_OscConfig+0x358>
 800381e:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003840:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe fb7c 	bl	8001f64 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fe fb78 	bl	8001f64 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e140      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003886:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ed      	beq.n	8003870 <HAL_RCC_OscConfig+0x388>
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fe fb65 	bl	8001f64 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe fb61 	bl	8001f64 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e129      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b4:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ed      	bne.n	800389e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03c      	beq.n	800395a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fb34 	bl	8001f64 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003900:	f7fe fb30 	bl	8001f64 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0fa      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ef      	beq.n	8003900 <HAL_RCC_OscConfig+0x418>
 8003920:	e01b      	b.n	800395a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe fb17 	bl	8001f64 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393a:	f7fe fb13 	bl	8001f64 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0dd      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800394e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ef      	bne.n	800393a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80d1 	beq.w	8003b06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f000 808b 	beq.w	8003a88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d15e      	bne.n	8003a38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe faed 	bl	8001f64 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e00c      	b.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe fae9 	bl	8001f64 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d905      	bls.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0b3      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ec      	bne.n	800398e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_RCC_OscConfig+0x62c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a11      	ldr	r1, [r2, #32]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ce:	0212      	lsls	r2, r2, #8
 80039d0:	4311      	orrs	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0552      	lsls	r2, r2, #21
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e2:	0852      	lsrs	r2, r2, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	0652      	lsls	r2, r2, #25
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ee:	06d2      	lsls	r2, r2, #27
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4947      	ldr	r1, [pc, #284]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe faa8 	bl	8001f64 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe faa4 	bl	8001f64 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e06e      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x530>
 8003a36:	e066      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fe fa80 	bl	8001f64 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fe fa7c 	bl	8001f64 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e046      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x580>
 8003a86:	e03e      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e039      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d12c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d123      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11b      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d113      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	019f800c 	.word	0x019f800c

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e11e      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b91      	ldr	r3, [pc, #580]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 020f 	bic.w	r2, r3, #15
 8003b46:	498c      	ldr	r1, [pc, #560]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e106      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d073      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d129      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0f4      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b84:	f000 f99e 	bl	8003ec4 <RCC_GetSysClockFreqFromPLLSource>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d93f      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d033      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12f      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e024      	b.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0c6      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0be      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bf0:	f000 f8ce 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d909      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4957      	ldr	r1, [pc, #348]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fe f99e 	bl	8001f64 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fe f99a 	bl	8001f64 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e095      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c8c:	4a3b      	ldr	r2, [pc, #236]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d21d      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 020f 	bic.w	r2, r3, #15
 8003cd0:	4929      	ldr	r1, [pc, #164]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe f944 	bl	8001f64 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fe f940 	bl	8001f64 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e03b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1ed      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490f      	ldr	r1, [pc, #60]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d42:	f000 f825 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490c      	ldr	r1, [pc, #48]	; (8003d84 <HAL_RCC_ClockConfig+0x26c>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x270>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe f8b0 	bl	8001ecc <HAL_InitTick>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	04c4b400 	.word	0x04c4b400
 8003d84:	08009cd4 	.word	0x08009cd4
 8003d88:	2000000c 	.word	0x2000000c
 8003d8c:	20000010 	.word	0x20000010

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e047      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d102      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e03e      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d136      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de4:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dee:	68d2      	ldr	r2, [r2, #12]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	617b      	str	r3, [r7, #20]
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	0a12      	lsrs	r2, r2, #8
 8003e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e001      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e38:	693b      	ldr	r3, [r7, #16]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	007a1200 	.word	0x007a1200

08003e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000000c 	.word	0x2000000c

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4904      	ldr	r1, [pc, #16]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08009ce4 	.word	0x08009ce4

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e9c:	f7ff ffda 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08009ce4 	.word	0x08009ce4

08003ec4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eca:	4b1e      	ldr	r3, [pc, #120]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ed4:	4b1b      	ldr	r3, [pc, #108]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d10c      	bne.n	8003f02 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee8:	4a17      	ldr	r2, [pc, #92]	; (8003f48 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ef2:	68d2      	ldr	r2, [r2, #12]
 8003ef4:	0a12      	lsrs	r2, r2, #8
 8003ef6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
    break;
 8003f00:	e00c      	b.n	8003f1c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f0c:	68d2      	ldr	r2, [r2, #12]
 8003f0e:	0a12      	lsrs	r2, r2, #8
 8003f10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f14:	fb02 f303 	mul.w	r3, r2, r3
 8003f18:	617b      	str	r3, [r7, #20]
    break;
 8003f1a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	0e5b      	lsrs	r3, r3, #25
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	3301      	adds	r3, #1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f36:	687b      	ldr	r3, [r7, #4]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40021000 	.word	0x40021000
 8003f48:	007a1200 	.word	0x007a1200
 8003f4c:	00f42400 	.word	0x00f42400

08003f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8098 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b43      	ldr	r3, [pc, #268]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b40      	ldr	r3, [pc, #256]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	4a3f      	ldr	r2, [pc, #252]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6593      	str	r3, [r2, #88]	; 0x58
 8003f8a:	4b3d      	ldr	r3, [pc, #244]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f9a:	4b3a      	ldr	r3, [pc, #232]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a39      	ldr	r2, [pc, #228]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa6:	f7fd ffdd 	bl	8001f64 <HAL_GetTick>
 8003faa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fac:	e009      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fae:	f7fd ffd9 	bl	8001f64 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d902      	bls.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	74fb      	strb	r3, [r7, #19]
        break;
 8003fc0:	e005      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	4b30      	ldr	r3, [pc, #192]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ef      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003fce:	7cfb      	ldrb	r3, [r7, #19]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d159      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fd4:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fde:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d01e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d019      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ffa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffc:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a1f      	ldr	r2, [pc, #124]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400c:	4b1c      	ldr	r3, [pc, #112]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401c:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd ff99 	bl	8001f64 <HAL_GetTick>
 8004032:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004034:	e00b      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004036:	f7fd ff95 	bl	8001f64 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	f241 3288 	movw	r2, #5000	; 0x1388
 8004044:	4293      	cmp	r3, r2
 8004046:	d902      	bls.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	74fb      	strb	r3, [r7, #19]
            break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d0ec      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800405c:	7cfb      	ldrb	r3, [r7, #19]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	74bb      	strb	r3, [r7, #18]
 800407e:	e005      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004080:	40021000 	.word	0x40021000
 8004084:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408c:	7c7b      	ldrb	r3, [r7, #17]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4ba6      	ldr	r3, [pc, #664]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	4aa5      	ldr	r2, [pc, #660]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040aa:	4ba0      	ldr	r3, [pc, #640]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f023 0203 	bic.w	r2, r3, #3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	499c      	ldr	r1, [pc, #624]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040cc:	4b97      	ldr	r3, [pc, #604]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f023 020c 	bic.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	4994      	ldr	r1, [pc, #592]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ee:	4b8f      	ldr	r3, [pc, #572]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	498b      	ldr	r1, [pc, #556]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004110:	4b86      	ldr	r3, [pc, #536]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	4983      	ldr	r1, [pc, #524]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004132:	4b7e      	ldr	r3, [pc, #504]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	497a      	ldr	r1, [pc, #488]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004154:	4b75      	ldr	r3, [pc, #468]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4972      	ldr	r1, [pc, #456]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004176:	4b6d      	ldr	r3, [pc, #436]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4969      	ldr	r1, [pc, #420]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004198:	4b64      	ldr	r3, [pc, #400]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	4961      	ldr	r1, [pc, #388]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ba:	4b5c      	ldr	r3, [pc, #368]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	4958      	ldr	r1, [pc, #352]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d015      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041dc:	4b53      	ldr	r3, [pc, #332]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	4950      	ldr	r1, [pc, #320]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fc:	4b4b      	ldr	r3, [pc, #300]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a4a      	ldr	r2, [pc, #296]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004206:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004210:	2b00      	cmp	r3, #0
 8004212:	d015      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004214:	4b45      	ldr	r3, [pc, #276]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4942      	ldr	r1, [pc, #264]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004234:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a3c      	ldr	r2, [pc, #240]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d015      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800424c:	4b37      	ldr	r3, [pc, #220]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4934      	ldr	r1, [pc, #208]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800426a:	d105      	bne.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800426c:	4b2f      	ldr	r3, [pc, #188]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a2e      	ldr	r2, [pc, #184]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004276:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004284:	4b29      	ldr	r3, [pc, #164]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	4926      	ldr	r1, [pc, #152]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b21      	ldr	r3, [pc, #132]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a20      	ldr	r2, [pc, #128]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042bc:	4b1b      	ldr	r3, [pc, #108]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ca:	4918      	ldr	r1, [pc, #96]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a12      	ldr	r2, [pc, #72]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042f4:	4b0d      	ldr	r3, [pc, #52]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	490a      	ldr	r1, [pc, #40]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004312:	d105      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004320:	7cbb      	ldrb	r3, [r7, #18]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000

08004330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e042      	b.n	80043c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fd fd1f 	bl	8001d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2224      	movs	r2, #36	; 0x24
 800435e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0201 	bic.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f8c2 	bl	80044fc <UART_SetConfig>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e022      	b.n	80043c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fb82 	bl	8004a94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fc09 	bl	8004bd8 <UART_CheckIdleState>
 80043c6:	4603      	mov	r3, r0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	f040 8083 	bne.w	80044f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_UART_Transmit+0x28>
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e07b      	b.n	80044f4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_UART_Transmit+0x3a>
 8004406:	2302      	movs	r3, #2
 8004408:	e074      	b.n	80044f4 <HAL_UART_Transmit+0x124>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	; 0x21
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004422:	f7fd fd9f 	bl	8001f64 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004440:	d108      	bne.n	8004454 <HAL_UART_Transmit+0x84>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d104      	bne.n	8004454 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e003      	b.n	800445c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004464:	e02c      	b.n	80044c0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	; 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fbfc 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e039      	b.n	80044f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	881b      	ldrh	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	3302      	adds	r3, #2
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	e007      	b.n	80044ae <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1cc      	bne.n	8004466 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fbc9 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e006      	b.n	80044f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	e000      	b.n	80044f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80044f2:	2302      	movs	r3, #2
  }
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004500:	b08c      	sub	sp, #48	; 0x30
 8004502:	af00      	add	r7, sp, #0
 8004504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	431a      	orrs	r2, r3
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	431a      	orrs	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	4313      	orrs	r3, r2
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	4bab      	ldr	r3, [pc, #684]	; (80047d8 <UART_SetConfig+0x2dc>)
 800452c:	4013      	ands	r3, r2
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004534:	430b      	orrs	r3, r1
 8004536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4aa0      	ldr	r2, [pc, #640]	; (80047dc <UART_SetConfig+0x2e0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004564:	4313      	orrs	r3, r2
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004572:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800457c:	430b      	orrs	r3, r1
 800457e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004586:	f023 010f 	bic.w	r1, r3, #15
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a91      	ldr	r2, [pc, #580]	; (80047e0 <UART_SetConfig+0x2e4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d125      	bne.n	80045ec <UART_SetConfig+0xf0>
 80045a0:	4b90      	ldr	r3, [pc, #576]	; (80047e4 <UART_SetConfig+0x2e8>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d81a      	bhi.n	80045e4 <UART_SetConfig+0xe8>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <UART_SetConfig+0xb8>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045d5 	.word	0x080045d5
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045dd 	.word	0x080045dd
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ca:	e0d6      	b.n	800477a <UART_SetConfig+0x27e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d2:	e0d2      	b.n	800477a <UART_SetConfig+0x27e>
 80045d4:	2304      	movs	r3, #4
 80045d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045da:	e0ce      	b.n	800477a <UART_SetConfig+0x27e>
 80045dc:	2308      	movs	r3, #8
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e2:	e0ca      	b.n	800477a <UART_SetConfig+0x27e>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ea:	e0c6      	b.n	800477a <UART_SetConfig+0x27e>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7d      	ldr	r2, [pc, #500]	; (80047e8 <UART_SetConfig+0x2ec>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d138      	bne.n	8004668 <UART_SetConfig+0x16c>
 80045f6:	4b7b      	ldr	r3, [pc, #492]	; (80047e4 <UART_SetConfig+0x2e8>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d82d      	bhi.n	8004660 <UART_SetConfig+0x164>
 8004604:	a201      	add	r2, pc, #4	; (adr r2, 800460c <UART_SetConfig+0x110>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	08004641 	.word	0x08004641
 8004610:	08004661 	.word	0x08004661
 8004614:	08004661 	.word	0x08004661
 8004618:	08004661 	.word	0x08004661
 800461c:	08004651 	.word	0x08004651
 8004620:	08004661 	.word	0x08004661
 8004624:	08004661 	.word	0x08004661
 8004628:	08004661 	.word	0x08004661
 800462c:	08004649 	.word	0x08004649
 8004630:	08004661 	.word	0x08004661
 8004634:	08004661 	.word	0x08004661
 8004638:	08004661 	.word	0x08004661
 800463c:	08004659 	.word	0x08004659
 8004640:	2300      	movs	r3, #0
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e098      	b.n	800477a <UART_SetConfig+0x27e>
 8004648:	2302      	movs	r3, #2
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464e:	e094      	b.n	800477a <UART_SetConfig+0x27e>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004656:	e090      	b.n	800477a <UART_SetConfig+0x27e>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465e:	e08c      	b.n	800477a <UART_SetConfig+0x27e>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004666:	e088      	b.n	800477a <UART_SetConfig+0x27e>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a5f      	ldr	r2, [pc, #380]	; (80047ec <UART_SetConfig+0x2f0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d125      	bne.n	80046be <UART_SetConfig+0x1c2>
 8004672:	4b5c      	ldr	r3, [pc, #368]	; (80047e4 <UART_SetConfig+0x2e8>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800467c:	2b30      	cmp	r3, #48	; 0x30
 800467e:	d016      	beq.n	80046ae <UART_SetConfig+0x1b2>
 8004680:	2b30      	cmp	r3, #48	; 0x30
 8004682:	d818      	bhi.n	80046b6 <UART_SetConfig+0x1ba>
 8004684:	2b20      	cmp	r3, #32
 8004686:	d00a      	beq.n	800469e <UART_SetConfig+0x1a2>
 8004688:	2b20      	cmp	r3, #32
 800468a:	d814      	bhi.n	80046b6 <UART_SetConfig+0x1ba>
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <UART_SetConfig+0x19a>
 8004690:	2b10      	cmp	r3, #16
 8004692:	d008      	beq.n	80046a6 <UART_SetConfig+0x1aa>
 8004694:	e00f      	b.n	80046b6 <UART_SetConfig+0x1ba>
 8004696:	2300      	movs	r3, #0
 8004698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469c:	e06d      	b.n	800477a <UART_SetConfig+0x27e>
 800469e:	2302      	movs	r3, #2
 80046a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a4:	e069      	b.n	800477a <UART_SetConfig+0x27e>
 80046a6:	2304      	movs	r3, #4
 80046a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ac:	e065      	b.n	800477a <UART_SetConfig+0x27e>
 80046ae:	2308      	movs	r3, #8
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b4:	e061      	b.n	800477a <UART_SetConfig+0x27e>
 80046b6:	2310      	movs	r3, #16
 80046b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046bc:	e05d      	b.n	800477a <UART_SetConfig+0x27e>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4b      	ldr	r2, [pc, #300]	; (80047f0 <UART_SetConfig+0x2f4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d125      	bne.n	8004714 <UART_SetConfig+0x218>
 80046c8:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <UART_SetConfig+0x2e8>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046d2:	2bc0      	cmp	r3, #192	; 0xc0
 80046d4:	d016      	beq.n	8004704 <UART_SetConfig+0x208>
 80046d6:	2bc0      	cmp	r3, #192	; 0xc0
 80046d8:	d818      	bhi.n	800470c <UART_SetConfig+0x210>
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d00a      	beq.n	80046f4 <UART_SetConfig+0x1f8>
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d814      	bhi.n	800470c <UART_SetConfig+0x210>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0x1f0>
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d008      	beq.n	80046fc <UART_SetConfig+0x200>
 80046ea:	e00f      	b.n	800470c <UART_SetConfig+0x210>
 80046ec:	2300      	movs	r3, #0
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f2:	e042      	b.n	800477a <UART_SetConfig+0x27e>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fa:	e03e      	b.n	800477a <UART_SetConfig+0x27e>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004702:	e03a      	b.n	800477a <UART_SetConfig+0x27e>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470a:	e036      	b.n	800477a <UART_SetConfig+0x27e>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004712:	e032      	b.n	800477a <UART_SetConfig+0x27e>
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a30      	ldr	r2, [pc, #192]	; (80047dc <UART_SetConfig+0x2e0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d12a      	bne.n	8004774 <UART_SetConfig+0x278>
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <UART_SetConfig+0x2e8>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472c:	d01a      	beq.n	8004764 <UART_SetConfig+0x268>
 800472e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004732:	d81b      	bhi.n	800476c <UART_SetConfig+0x270>
 8004734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004738:	d00c      	beq.n	8004754 <UART_SetConfig+0x258>
 800473a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473e:	d815      	bhi.n	800476c <UART_SetConfig+0x270>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <UART_SetConfig+0x250>
 8004744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004748:	d008      	beq.n	800475c <UART_SetConfig+0x260>
 800474a:	e00f      	b.n	800476c <UART_SetConfig+0x270>
 800474c:	2300      	movs	r3, #0
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e012      	b.n	800477a <UART_SetConfig+0x27e>
 8004754:	2302      	movs	r3, #2
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e00e      	b.n	800477a <UART_SetConfig+0x27e>
 800475c:	2304      	movs	r3, #4
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x27e>
 8004764:	2308      	movs	r3, #8
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476a:	e006      	b.n	800477a <UART_SetConfig+0x27e>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004772:	e002      	b.n	800477a <UART_SetConfig+0x27e>
 8004774:	2310      	movs	r3, #16
 8004776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a17      	ldr	r2, [pc, #92]	; (80047dc <UART_SetConfig+0x2e0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	f040 80a8 	bne.w	80048d6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004786:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800478a:	2b08      	cmp	r3, #8
 800478c:	d834      	bhi.n	80047f8 <UART_SetConfig+0x2fc>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <UART_SetConfig+0x298>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047c7 	.word	0x080047c7
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047f9 	.word	0x080047f9
 80047b4:	080047cf 	.word	0x080047cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b8:	f7ff fb58 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047be:	e021      	b.n	8004804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b0c      	ldr	r3, [pc, #48]	; (80047f4 <UART_SetConfig+0x2f8>)
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047c4:	e01e      	b.n	8004804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c6:	f7ff fae3 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80047ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047cc:	e01a      	b.n	8004804 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047d4:	e016      	b.n	8004804 <UART_SetConfig+0x308>
 80047d6:	bf00      	nop
 80047d8:	cfff69f3 	.word	0xcfff69f3
 80047dc:	40008000 	.word	0x40008000
 80047e0:	40013800 	.word	0x40013800
 80047e4:	40021000 	.word	0x40021000
 80047e8:	40004400 	.word	0x40004400
 80047ec:	40004800 	.word	0x40004800
 80047f0:	40004c00 	.word	0x40004c00
 80047f4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004802:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 812a 	beq.w	8004a60 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	4a9e      	ldr	r2, [pc, #632]	; (8004a8c <UART_SetConfig+0x590>)
 8004812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004816:	461a      	mov	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	fbb3 f3f2 	udiv	r3, r3, r2
 800481e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	4413      	add	r3, r2
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	d305      	bcc.n	800483c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004842:	e10d      	b.n	8004a60 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	2200      	movs	r2, #0
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	60fa      	str	r2, [r7, #12]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	4a8e      	ldr	r2, [pc, #568]	; (8004a8c <UART_SetConfig+0x590>)
 8004852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004856:	b29b      	uxth	r3, r3
 8004858:	2200      	movs	r2, #0
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004866:	f7fc fa37 	bl	8000cd8 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4610      	mov	r0, r2
 8004870:	4619      	mov	r1, r3
 8004872:	f04f 0200 	mov.w	r2, #0
 8004876:	f04f 0300 	mov.w	r3, #0
 800487a:	020b      	lsls	r3, r1, #8
 800487c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004880:	0202      	lsls	r2, r0, #8
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	6849      	ldr	r1, [r1, #4]
 8004886:	0849      	lsrs	r1, r1, #1
 8004888:	2000      	movs	r0, #0
 800488a:	460c      	mov	r4, r1
 800488c:	4605      	mov	r5, r0
 800488e:	eb12 0804 	adds.w	r8, r2, r4
 8004892:	eb43 0905 	adc.w	r9, r3, r5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	469a      	mov	sl, r3
 800489e:	4693      	mov	fp, r2
 80048a0:	4652      	mov	r2, sl
 80048a2:	465b      	mov	r3, fp
 80048a4:	4640      	mov	r0, r8
 80048a6:	4649      	mov	r1, r9
 80048a8:	f7fc fa16 	bl	8000cd8 <__aeabi_uldivmod>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4613      	mov	r3, r2
 80048b2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d308      	bcc.n	80048ce <UART_SetConfig+0x3d2>
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c2:	d204      	bcs.n	80048ce <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	60da      	str	r2, [r3, #12]
 80048cc:	e0c8      	b.n	8004a60 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048d4:	e0c4      	b.n	8004a60 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048de:	d167      	bne.n	80049b0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80048e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d828      	bhi.n	800493a <UART_SetConfig+0x43e>
 80048e8:	a201      	add	r2, pc, #4	; (adr r2, 80048f0 <UART_SetConfig+0x3f4>)
 80048ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ee:	bf00      	nop
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	08004925 	.word	0x08004925
 80048fc:	0800493b 	.word	0x0800493b
 8004900:	0800492b 	.word	0x0800492b
 8004904:	0800493b 	.word	0x0800493b
 8004908:	0800493b 	.word	0x0800493b
 800490c:	0800493b 	.word	0x0800493b
 8004910:	08004933 	.word	0x08004933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004914:	f7ff faaa 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8004918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800491a:	e014      	b.n	8004946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7ff fabc 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004922:	e010      	b.n	8004946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004924:	4b5a      	ldr	r3, [pc, #360]	; (8004a90 <UART_SetConfig+0x594>)
 8004926:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004928:	e00d      	b.n	8004946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800492a:	f7ff fa31 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 800492e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004930:	e009      	b.n	8004946 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004938:	e005      	b.n	8004946 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 8089 	beq.w	8004a60 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	4a4e      	ldr	r2, [pc, #312]	; (8004a8c <UART_SetConfig+0x590>)
 8004954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004958:	461a      	mov	r2, r3
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004960:	005a      	lsls	r2, r3, #1
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	085b      	lsrs	r3, r3, #1
 8004968:	441a      	add	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d916      	bls.n	80049a8 <UART_SetConfig+0x4ac>
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d212      	bcs.n	80049a8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	b29b      	uxth	r3, r3
 8004986:	f023 030f 	bic.w	r3, r3, #15
 800498a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	b29a      	uxth	r2, r3
 8004998:	8bfb      	ldrh	r3, [r7, #30]
 800499a:	4313      	orrs	r3, r2
 800499c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	8bfa      	ldrh	r2, [r7, #30]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	e05b      	b.n	8004a60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049ae:	e057      	b.n	8004a60 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d828      	bhi.n	8004a0a <UART_SetConfig+0x50e>
 80049b8:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <UART_SetConfig+0x4c4>)
 80049ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049be:	bf00      	nop
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049f5 	.word	0x080049f5
 80049cc:	08004a0b 	.word	0x08004a0b
 80049d0:	080049fb 	.word	0x080049fb
 80049d4:	08004a0b 	.word	0x08004a0b
 80049d8:	08004a0b 	.word	0x08004a0b
 80049dc:	08004a0b 	.word	0x08004a0b
 80049e0:	08004a03 	.word	0x08004a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049e4:	f7ff fa42 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ea:	e014      	b.n	8004a16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ec:	f7ff fa54 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f2:	e010      	b.n	8004a16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f4:	4b26      	ldr	r3, [pc, #152]	; (8004a90 <UART_SetConfig+0x594>)
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049f8:	e00d      	b.n	8004a16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fa:	f7ff f9c9 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80049fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a00:	e009      	b.n	8004a16 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a08:	e005      	b.n	8004a16 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a14:	bf00      	nop
    }

    if (pclk != 0U)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d021      	beq.n	8004a60 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <UART_SetConfig+0x590>)
 8004a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	085b      	lsrs	r3, r3, #1
 8004a34:	441a      	add	r2, r3
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b0f      	cmp	r3, #15
 8004a44:	d909      	bls.n	8004a5a <UART_SetConfig+0x55e>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d205      	bcs.n	8004a5a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e002      	b.n	8004a60 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	2200      	movs	r2, #0
 8004a74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3730      	adds	r7, #48	; 0x30
 8004a84:	46bd      	mov	sp, r7
 8004a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08009cec 	.word	0x08009cec
 8004a90:	00f42400 	.word	0x00f42400

08004a94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b06:	f003 0308 	and.w	r3, r3, #8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01a      	beq.n	8004baa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b92:	d10a      	bne.n	8004baa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
  }
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af02      	add	r7, sp, #8
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be8:	f7fd f9bc 	bl	8001f64 <HAL_GetTick>
 8004bec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d10e      	bne.n	8004c1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f82f 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e025      	b.n	8004c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d10e      	bne.n	8004c46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f819 	bl	8004c6e <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e00f      	b.n	8004c66 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2220      	movs	r2, #32
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b09c      	sub	sp, #112	; 0x70
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7e:	e0a9      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c86:	f000 80a5 	beq.w	8004dd4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fd f96b 	bl	8001f64 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d140      	bne.n	8004d22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e6      	bne.n	8004ca0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	f023 0301 	bic.w	r3, r3, #1
 8004ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e069      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d051      	beq.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3e:	d149      	bne.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d68:	637b      	str	r3, [r7, #52]	; 0x34
 8004d6a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e6      	bne.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3308      	adds	r3, #8
 8004d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d9c:	623a      	str	r2, [r7, #32]
 8004d9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	e841 2300 	strex	r3, r2, [r1]
 8004da8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e5      	bne.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e010      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69da      	ldr	r2, [r3, #28]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	f43f af46 	beq.w	8004c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3770      	adds	r7, #112	; 0x70
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_UARTEx_DisableFifoMode+0x16>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e027      	b.n	8004e64 <HAL_UARTEx_DisableFifoMode+0x66>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2224      	movs	r2, #36	; 0x24
 8004e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0201 	bic.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e02d      	b.n	8004ee4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	; 0x24
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f84f 	bl	8004f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e02d      	b.n	8004f60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2224      	movs	r2, #36	; 0x24
 8004f10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f811 	bl	8004f68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d108      	bne.n	8004f8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f88:	e031      	b.n	8004fee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f8e:	2308      	movs	r3, #8
 8004f90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	0e5b      	lsrs	r3, r3, #25
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	0f5b      	lsrs	r3, r3, #29
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	7b3a      	ldrb	r2, [r7, #12]
 8004fb6:	4911      	ldr	r1, [pc, #68]	; (8004ffc <UARTEx_SetNbDataToProcess+0x94>)
 8004fb8:	5c8a      	ldrb	r2, [r1, r2]
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004fbe:	7b3a      	ldrb	r2, [r7, #12]
 8004fc0:	490f      	ldr	r1, [pc, #60]	; (8005000 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	7b7a      	ldrb	r2, [r7, #13]
 8004fd4:	4909      	ldr	r1, [pc, #36]	; (8004ffc <UARTEx_SetNbDataToProcess+0x94>)
 8004fd6:	5c8a      	ldrb	r2, [r1, r2]
 8004fd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fdc:	7b7a      	ldrb	r2, [r7, #13]
 8004fde:	4908      	ldr	r1, [pc, #32]	; (8005000 <UARTEx_SetNbDataToProcess+0x98>)
 8004fe0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	08009d04 	.word	0x08009d04
 8005000:	08009d0c 	.word	0x08009d0c

08005004 <__errno>:
 8005004:	4b01      	ldr	r3, [pc, #4]	; (800500c <__errno+0x8>)
 8005006:	6818      	ldr	r0, [r3, #0]
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	20000018 	.word	0x20000018

08005010 <__libc_init_array>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4d0d      	ldr	r5, [pc, #52]	; (8005048 <__libc_init_array+0x38>)
 8005014:	4c0d      	ldr	r4, [pc, #52]	; (800504c <__libc_init_array+0x3c>)
 8005016:	1b64      	subs	r4, r4, r5
 8005018:	10a4      	asrs	r4, r4, #2
 800501a:	2600      	movs	r6, #0
 800501c:	42a6      	cmp	r6, r4
 800501e:	d109      	bne.n	8005034 <__libc_init_array+0x24>
 8005020:	4d0b      	ldr	r5, [pc, #44]	; (8005050 <__libc_init_array+0x40>)
 8005022:	4c0c      	ldr	r4, [pc, #48]	; (8005054 <__libc_init_array+0x44>)
 8005024:	f004 fd1a 	bl	8009a5c <_init>
 8005028:	1b64      	subs	r4, r4, r5
 800502a:	10a4      	asrs	r4, r4, #2
 800502c:	2600      	movs	r6, #0
 800502e:	42a6      	cmp	r6, r4
 8005030:	d105      	bne.n	800503e <__libc_init_array+0x2e>
 8005032:	bd70      	pop	{r4, r5, r6, pc}
 8005034:	f855 3b04 	ldr.w	r3, [r5], #4
 8005038:	4798      	blx	r3
 800503a:	3601      	adds	r6, #1
 800503c:	e7ee      	b.n	800501c <__libc_init_array+0xc>
 800503e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005042:	4798      	blx	r3
 8005044:	3601      	adds	r6, #1
 8005046:	e7f2      	b.n	800502e <__libc_init_array+0x1e>
 8005048:	0800a1cc 	.word	0x0800a1cc
 800504c:	0800a1cc 	.word	0x0800a1cc
 8005050:	0800a1cc 	.word	0x0800a1cc
 8005054:	0800a1d0 	.word	0x0800a1d0

08005058 <memcpy>:
 8005058:	440a      	add	r2, r1
 800505a:	4291      	cmp	r1, r2
 800505c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005060:	d100      	bne.n	8005064 <memcpy+0xc>
 8005062:	4770      	bx	lr
 8005064:	b510      	push	{r4, lr}
 8005066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800506a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800506e:	4291      	cmp	r1, r2
 8005070:	d1f9      	bne.n	8005066 <memcpy+0xe>
 8005072:	bd10      	pop	{r4, pc}

08005074 <memset>:
 8005074:	4402      	add	r2, r0
 8005076:	4603      	mov	r3, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <__cvt>:
 8005084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	ec55 4b10 	vmov	r4, r5, d0
 800508c:	2d00      	cmp	r5, #0
 800508e:	460e      	mov	r6, r1
 8005090:	4619      	mov	r1, r3
 8005092:	462b      	mov	r3, r5
 8005094:	bfbb      	ittet	lt
 8005096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800509a:	461d      	movlt	r5, r3
 800509c:	2300      	movge	r3, #0
 800509e:	232d      	movlt	r3, #45	; 0x2d
 80050a0:	700b      	strb	r3, [r1, #0]
 80050a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050a8:	4691      	mov	r9, r2
 80050aa:	f023 0820 	bic.w	r8, r3, #32
 80050ae:	bfbc      	itt	lt
 80050b0:	4622      	movlt	r2, r4
 80050b2:	4614      	movlt	r4, r2
 80050b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b8:	d005      	beq.n	80050c6 <__cvt+0x42>
 80050ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050be:	d100      	bne.n	80050c2 <__cvt+0x3e>
 80050c0:	3601      	adds	r6, #1
 80050c2:	2102      	movs	r1, #2
 80050c4:	e000      	b.n	80050c8 <__cvt+0x44>
 80050c6:	2103      	movs	r1, #3
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	ab02      	add	r3, sp, #8
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	ec45 4b10 	vmov	d0, r4, r5
 80050d4:	4653      	mov	r3, sl
 80050d6:	4632      	mov	r2, r6
 80050d8:	f001 fefa 	bl	8006ed0 <_dtoa_r>
 80050dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050e0:	4607      	mov	r7, r0
 80050e2:	d102      	bne.n	80050ea <__cvt+0x66>
 80050e4:	f019 0f01 	tst.w	r9, #1
 80050e8:	d022      	beq.n	8005130 <__cvt+0xac>
 80050ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ee:	eb07 0906 	add.w	r9, r7, r6
 80050f2:	d110      	bne.n	8005116 <__cvt+0x92>
 80050f4:	783b      	ldrb	r3, [r7, #0]
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d10a      	bne.n	8005110 <__cvt+0x8c>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb fd09 	bl	8000b18 <__aeabi_dcmpeq>
 8005106:	b918      	cbnz	r0, 8005110 <__cvt+0x8c>
 8005108:	f1c6 0601 	rsb	r6, r6, #1
 800510c:	f8ca 6000 	str.w	r6, [sl]
 8005110:	f8da 3000 	ldr.w	r3, [sl]
 8005114:	4499      	add	r9, r3
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb fcfb 	bl	8000b18 <__aeabi_dcmpeq>
 8005122:	b108      	cbz	r0, 8005128 <__cvt+0xa4>
 8005124:	f8cd 900c 	str.w	r9, [sp, #12]
 8005128:	2230      	movs	r2, #48	; 0x30
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	454b      	cmp	r3, r9
 800512e:	d307      	bcc.n	8005140 <__cvt+0xbc>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005134:	1bdb      	subs	r3, r3, r7
 8005136:	4638      	mov	r0, r7
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	b004      	add	sp, #16
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e7f0      	b.n	800512a <__cvt+0xa6>

08005148 <__exponent>:
 8005148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514a:	4603      	mov	r3, r0
 800514c:	2900      	cmp	r1, #0
 800514e:	bfb8      	it	lt
 8005150:	4249      	neglt	r1, r1
 8005152:	f803 2b02 	strb.w	r2, [r3], #2
 8005156:	bfb4      	ite	lt
 8005158:	222d      	movlt	r2, #45	; 0x2d
 800515a:	222b      	movge	r2, #43	; 0x2b
 800515c:	2909      	cmp	r1, #9
 800515e:	7042      	strb	r2, [r0, #1]
 8005160:	dd2a      	ble.n	80051b8 <__exponent+0x70>
 8005162:	f10d 0407 	add.w	r4, sp, #7
 8005166:	46a4      	mov	ip, r4
 8005168:	270a      	movs	r7, #10
 800516a:	46a6      	mov	lr, r4
 800516c:	460a      	mov	r2, r1
 800516e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005172:	fb07 1516 	mls	r5, r7, r6, r1
 8005176:	3530      	adds	r5, #48	; 0x30
 8005178:	2a63      	cmp	r2, #99	; 0x63
 800517a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800517e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005182:	4631      	mov	r1, r6
 8005184:	dcf1      	bgt.n	800516a <__exponent+0x22>
 8005186:	3130      	adds	r1, #48	; 0x30
 8005188:	f1ae 0502 	sub.w	r5, lr, #2
 800518c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005190:	1c44      	adds	r4, r0, #1
 8005192:	4629      	mov	r1, r5
 8005194:	4561      	cmp	r1, ip
 8005196:	d30a      	bcc.n	80051ae <__exponent+0x66>
 8005198:	f10d 0209 	add.w	r2, sp, #9
 800519c:	eba2 020e 	sub.w	r2, r2, lr
 80051a0:	4565      	cmp	r5, ip
 80051a2:	bf88      	it	hi
 80051a4:	2200      	movhi	r2, #0
 80051a6:	4413      	add	r3, r2
 80051a8:	1a18      	subs	r0, r3, r0
 80051aa:	b003      	add	sp, #12
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80051b6:	e7ed      	b.n	8005194 <__exponent+0x4c>
 80051b8:	2330      	movs	r3, #48	; 0x30
 80051ba:	3130      	adds	r1, #48	; 0x30
 80051bc:	7083      	strb	r3, [r0, #2]
 80051be:	70c1      	strb	r1, [r0, #3]
 80051c0:	1d03      	adds	r3, r0, #4
 80051c2:	e7f1      	b.n	80051a8 <__exponent+0x60>

080051c4 <_printf_float>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	ed2d 8b02 	vpush	{d8}
 80051cc:	b08d      	sub	sp, #52	; 0x34
 80051ce:	460c      	mov	r4, r1
 80051d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051d4:	4616      	mov	r6, r2
 80051d6:	461f      	mov	r7, r3
 80051d8:	4605      	mov	r5, r0
 80051da:	f003 f98d 	bl	80084f8 <_localeconv_r>
 80051de:	f8d0 a000 	ldr.w	sl, [r0]
 80051e2:	4650      	mov	r0, sl
 80051e4:	f7fb f81c 	bl	8000220 <strlen>
 80051e8:	2300      	movs	r3, #0
 80051ea:	930a      	str	r3, [sp, #40]	; 0x28
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	f8d8 3000 	ldr.w	r3, [r8]
 80051f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80051f8:	3307      	adds	r3, #7
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	f103 0208 	add.w	r2, r3, #8
 8005202:	f8c8 2000 	str.w	r2, [r8]
 8005206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800520e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005216:	9307      	str	r3, [sp, #28]
 8005218:	f8cd 8018 	str.w	r8, [sp, #24]
 800521c:	ee08 0a10 	vmov	s16, r0
 8005220:	4b9f      	ldr	r3, [pc, #636]	; (80054a0 <_printf_float+0x2dc>)
 8005222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800522a:	f7fb fca7 	bl	8000b7c <__aeabi_dcmpun>
 800522e:	bb88      	cbnz	r0, 8005294 <_printf_float+0xd0>
 8005230:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005234:	4b9a      	ldr	r3, [pc, #616]	; (80054a0 <_printf_float+0x2dc>)
 8005236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523a:	f7fb fc81 	bl	8000b40 <__aeabi_dcmple>
 800523e:	bb48      	cbnz	r0, 8005294 <_printf_float+0xd0>
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	4640      	mov	r0, r8
 8005246:	4649      	mov	r1, r9
 8005248:	f7fb fc70 	bl	8000b2c <__aeabi_dcmplt>
 800524c:	b110      	cbz	r0, 8005254 <_printf_float+0x90>
 800524e:	232d      	movs	r3, #45	; 0x2d
 8005250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005254:	4b93      	ldr	r3, [pc, #588]	; (80054a4 <_printf_float+0x2e0>)
 8005256:	4894      	ldr	r0, [pc, #592]	; (80054a8 <_printf_float+0x2e4>)
 8005258:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800525c:	bf94      	ite	ls
 800525e:	4698      	movls	r8, r3
 8005260:	4680      	movhi	r8, r0
 8005262:	2303      	movs	r3, #3
 8005264:	6123      	str	r3, [r4, #16]
 8005266:	9b05      	ldr	r3, [sp, #20]
 8005268:	f023 0204 	bic.w	r2, r3, #4
 800526c:	6022      	str	r2, [r4, #0]
 800526e:	f04f 0900 	mov.w	r9, #0
 8005272:	9700      	str	r7, [sp, #0]
 8005274:	4633      	mov	r3, r6
 8005276:	aa0b      	add	r2, sp, #44	; 0x2c
 8005278:	4621      	mov	r1, r4
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f9d8 	bl	8005630 <_printf_common>
 8005280:	3001      	adds	r0, #1
 8005282:	f040 8090 	bne.w	80053a6 <_printf_float+0x1e2>
 8005286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800528a:	b00d      	add	sp, #52	; 0x34
 800528c:	ecbd 8b02 	vpop	{d8}
 8005290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	4640      	mov	r0, r8
 800529a:	4649      	mov	r1, r9
 800529c:	f7fb fc6e 	bl	8000b7c <__aeabi_dcmpun>
 80052a0:	b140      	cbz	r0, 80052b4 <_printf_float+0xf0>
 80052a2:	464b      	mov	r3, r9
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bfbc      	itt	lt
 80052a8:	232d      	movlt	r3, #45	; 0x2d
 80052aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052ae:	487f      	ldr	r0, [pc, #508]	; (80054ac <_printf_float+0x2e8>)
 80052b0:	4b7f      	ldr	r3, [pc, #508]	; (80054b0 <_printf_float+0x2ec>)
 80052b2:	e7d1      	b.n	8005258 <_printf_float+0x94>
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052ba:	9206      	str	r2, [sp, #24]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	d13f      	bne.n	8005340 <_printf_float+0x17c>
 80052c0:	2306      	movs	r3, #6
 80052c2:	6063      	str	r3, [r4, #4]
 80052c4:	9b05      	ldr	r3, [sp, #20]
 80052c6:	6861      	ldr	r1, [r4, #4]
 80052c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052cc:	2300      	movs	r3, #0
 80052ce:	9303      	str	r3, [sp, #12]
 80052d0:	ab0a      	add	r3, sp, #40	; 0x28
 80052d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052d6:	ab09      	add	r3, sp, #36	; 0x24
 80052d8:	ec49 8b10 	vmov	d0, r8, r9
 80052dc:	9300      	str	r3, [sp, #0]
 80052de:	6022      	str	r2, [r4, #0]
 80052e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052e4:	4628      	mov	r0, r5
 80052e6:	f7ff fecd 	bl	8005084 <__cvt>
 80052ea:	9b06      	ldr	r3, [sp, #24]
 80052ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ee:	2b47      	cmp	r3, #71	; 0x47
 80052f0:	4680      	mov	r8, r0
 80052f2:	d108      	bne.n	8005306 <_printf_float+0x142>
 80052f4:	1cc8      	adds	r0, r1, #3
 80052f6:	db02      	blt.n	80052fe <_printf_float+0x13a>
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	4299      	cmp	r1, r3
 80052fc:	dd41      	ble.n	8005382 <_printf_float+0x1be>
 80052fe:	f1ab 0b02 	sub.w	fp, fp, #2
 8005302:	fa5f fb8b 	uxtb.w	fp, fp
 8005306:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800530a:	d820      	bhi.n	800534e <_printf_float+0x18a>
 800530c:	3901      	subs	r1, #1
 800530e:	465a      	mov	r2, fp
 8005310:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005314:	9109      	str	r1, [sp, #36]	; 0x24
 8005316:	f7ff ff17 	bl	8005148 <__exponent>
 800531a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800531c:	1813      	adds	r3, r2, r0
 800531e:	2a01      	cmp	r2, #1
 8005320:	4681      	mov	r9, r0
 8005322:	6123      	str	r3, [r4, #16]
 8005324:	dc02      	bgt.n	800532c <_printf_float+0x168>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	07d2      	lsls	r2, r2, #31
 800532a:	d501      	bpl.n	8005330 <_printf_float+0x16c>
 800532c:	3301      	adds	r3, #1
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005334:	2b00      	cmp	r3, #0
 8005336:	d09c      	beq.n	8005272 <_printf_float+0xae>
 8005338:	232d      	movs	r3, #45	; 0x2d
 800533a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533e:	e798      	b.n	8005272 <_printf_float+0xae>
 8005340:	9a06      	ldr	r2, [sp, #24]
 8005342:	2a47      	cmp	r2, #71	; 0x47
 8005344:	d1be      	bne.n	80052c4 <_printf_float+0x100>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1bc      	bne.n	80052c4 <_printf_float+0x100>
 800534a:	2301      	movs	r3, #1
 800534c:	e7b9      	b.n	80052c2 <_printf_float+0xfe>
 800534e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005352:	d118      	bne.n	8005386 <_printf_float+0x1c2>
 8005354:	2900      	cmp	r1, #0
 8005356:	6863      	ldr	r3, [r4, #4]
 8005358:	dd0b      	ble.n	8005372 <_printf_float+0x1ae>
 800535a:	6121      	str	r1, [r4, #16]
 800535c:	b913      	cbnz	r3, 8005364 <_printf_float+0x1a0>
 800535e:	6822      	ldr	r2, [r4, #0]
 8005360:	07d0      	lsls	r0, r2, #31
 8005362:	d502      	bpl.n	800536a <_printf_float+0x1a6>
 8005364:	3301      	adds	r3, #1
 8005366:	440b      	add	r3, r1
 8005368:	6123      	str	r3, [r4, #16]
 800536a:	65a1      	str	r1, [r4, #88]	; 0x58
 800536c:	f04f 0900 	mov.w	r9, #0
 8005370:	e7de      	b.n	8005330 <_printf_float+0x16c>
 8005372:	b913      	cbnz	r3, 800537a <_printf_float+0x1b6>
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	07d2      	lsls	r2, r2, #31
 8005378:	d501      	bpl.n	800537e <_printf_float+0x1ba>
 800537a:	3302      	adds	r3, #2
 800537c:	e7f4      	b.n	8005368 <_printf_float+0x1a4>
 800537e:	2301      	movs	r3, #1
 8005380:	e7f2      	b.n	8005368 <_printf_float+0x1a4>
 8005382:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005388:	4299      	cmp	r1, r3
 800538a:	db05      	blt.n	8005398 <_printf_float+0x1d4>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	6121      	str	r1, [r4, #16]
 8005390:	07d8      	lsls	r0, r3, #31
 8005392:	d5ea      	bpl.n	800536a <_printf_float+0x1a6>
 8005394:	1c4b      	adds	r3, r1, #1
 8005396:	e7e7      	b.n	8005368 <_printf_float+0x1a4>
 8005398:	2900      	cmp	r1, #0
 800539a:	bfd4      	ite	le
 800539c:	f1c1 0202 	rsble	r2, r1, #2
 80053a0:	2201      	movgt	r2, #1
 80053a2:	4413      	add	r3, r2
 80053a4:	e7e0      	b.n	8005368 <_printf_float+0x1a4>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	055a      	lsls	r2, r3, #21
 80053aa:	d407      	bmi.n	80053bc <_printf_float+0x1f8>
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	4642      	mov	r2, r8
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	d12c      	bne.n	8005414 <_printf_float+0x250>
 80053ba:	e764      	b.n	8005286 <_printf_float+0xc2>
 80053bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053c0:	f240 80e0 	bls.w	8005584 <_printf_float+0x3c0>
 80053c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053c8:	2200      	movs	r2, #0
 80053ca:	2300      	movs	r3, #0
 80053cc:	f7fb fba4 	bl	8000b18 <__aeabi_dcmpeq>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	d034      	beq.n	800543e <_printf_float+0x27a>
 80053d4:	4a37      	ldr	r2, [pc, #220]	; (80054b4 <_printf_float+0x2f0>)
 80053d6:	2301      	movs	r3, #1
 80053d8:	4631      	mov	r1, r6
 80053da:	4628      	mov	r0, r5
 80053dc:	47b8      	blx	r7
 80053de:	3001      	adds	r0, #1
 80053e0:	f43f af51 	beq.w	8005286 <_printf_float+0xc2>
 80053e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e8:	429a      	cmp	r2, r3
 80053ea:	db02      	blt.n	80053f2 <_printf_float+0x22e>
 80053ec:	6823      	ldr	r3, [r4, #0]
 80053ee:	07d8      	lsls	r0, r3, #31
 80053f0:	d510      	bpl.n	8005414 <_printf_float+0x250>
 80053f2:	ee18 3a10 	vmov	r3, s16
 80053f6:	4652      	mov	r2, sl
 80053f8:	4631      	mov	r1, r6
 80053fa:	4628      	mov	r0, r5
 80053fc:	47b8      	blx	r7
 80053fe:	3001      	adds	r0, #1
 8005400:	f43f af41 	beq.w	8005286 <_printf_float+0xc2>
 8005404:	f04f 0800 	mov.w	r8, #0
 8005408:	f104 091a 	add.w	r9, r4, #26
 800540c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540e:	3b01      	subs	r3, #1
 8005410:	4543      	cmp	r3, r8
 8005412:	dc09      	bgt.n	8005428 <_printf_float+0x264>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	079b      	lsls	r3, r3, #30
 8005418:	f100 8105 	bmi.w	8005626 <_printf_float+0x462>
 800541c:	68e0      	ldr	r0, [r4, #12]
 800541e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005420:	4298      	cmp	r0, r3
 8005422:	bfb8      	it	lt
 8005424:	4618      	movlt	r0, r3
 8005426:	e730      	b.n	800528a <_printf_float+0xc6>
 8005428:	2301      	movs	r3, #1
 800542a:	464a      	mov	r2, r9
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	47b8      	blx	r7
 8005432:	3001      	adds	r0, #1
 8005434:	f43f af27 	beq.w	8005286 <_printf_float+0xc2>
 8005438:	f108 0801 	add.w	r8, r8, #1
 800543c:	e7e6      	b.n	800540c <_printf_float+0x248>
 800543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	dc39      	bgt.n	80054b8 <_printf_float+0x2f4>
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <_printf_float+0x2f0>)
 8005446:	2301      	movs	r3, #1
 8005448:	4631      	mov	r1, r6
 800544a:	4628      	mov	r0, r5
 800544c:	47b8      	blx	r7
 800544e:	3001      	adds	r0, #1
 8005450:	f43f af19 	beq.w	8005286 <_printf_float+0xc2>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	4313      	orrs	r3, r2
 800545a:	d102      	bne.n	8005462 <_printf_float+0x29e>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07d9      	lsls	r1, r3, #31
 8005460:	d5d8      	bpl.n	8005414 <_printf_float+0x250>
 8005462:	ee18 3a10 	vmov	r3, s16
 8005466:	4652      	mov	r2, sl
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f af09 	beq.w	8005286 <_printf_float+0xc2>
 8005474:	f04f 0900 	mov.w	r9, #0
 8005478:	f104 0a1a 	add.w	sl, r4, #26
 800547c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547e:	425b      	negs	r3, r3
 8005480:	454b      	cmp	r3, r9
 8005482:	dc01      	bgt.n	8005488 <_printf_float+0x2c4>
 8005484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005486:	e792      	b.n	80053ae <_printf_float+0x1ea>
 8005488:	2301      	movs	r3, #1
 800548a:	4652      	mov	r2, sl
 800548c:	4631      	mov	r1, r6
 800548e:	4628      	mov	r0, r5
 8005490:	47b8      	blx	r7
 8005492:	3001      	adds	r0, #1
 8005494:	f43f aef7 	beq.w	8005286 <_printf_float+0xc2>
 8005498:	f109 0901 	add.w	r9, r9, #1
 800549c:	e7ee      	b.n	800547c <_printf_float+0x2b8>
 800549e:	bf00      	nop
 80054a0:	7fefffff 	.word	0x7fefffff
 80054a4:	08009d18 	.word	0x08009d18
 80054a8:	08009d1c 	.word	0x08009d1c
 80054ac:	08009d24 	.word	0x08009d24
 80054b0:	08009d20 	.word	0x08009d20
 80054b4:	08009d28 	.word	0x08009d28
 80054b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054bc:	429a      	cmp	r2, r3
 80054be:	bfa8      	it	ge
 80054c0:	461a      	movge	r2, r3
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	4691      	mov	r9, r2
 80054c6:	dc37      	bgt.n	8005538 <_printf_float+0x374>
 80054c8:	f04f 0b00 	mov.w	fp, #0
 80054cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054d0:	f104 021a 	add.w	r2, r4, #26
 80054d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054d6:	9305      	str	r3, [sp, #20]
 80054d8:	eba3 0309 	sub.w	r3, r3, r9
 80054dc:	455b      	cmp	r3, fp
 80054de:	dc33      	bgt.n	8005548 <_printf_float+0x384>
 80054e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e4:	429a      	cmp	r2, r3
 80054e6:	db3b      	blt.n	8005560 <_printf_float+0x39c>
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	07da      	lsls	r2, r3, #31
 80054ec:	d438      	bmi.n	8005560 <_printf_float+0x39c>
 80054ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f0:	9a05      	ldr	r2, [sp, #20]
 80054f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054f4:	1a9a      	subs	r2, r3, r2
 80054f6:	eba3 0901 	sub.w	r9, r3, r1
 80054fa:	4591      	cmp	r9, r2
 80054fc:	bfa8      	it	ge
 80054fe:	4691      	movge	r9, r2
 8005500:	f1b9 0f00 	cmp.w	r9, #0
 8005504:	dc35      	bgt.n	8005572 <_printf_float+0x3ae>
 8005506:	f04f 0800 	mov.w	r8, #0
 800550a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800550e:	f104 0a1a 	add.w	sl, r4, #26
 8005512:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	eba3 0309 	sub.w	r3, r3, r9
 800551c:	4543      	cmp	r3, r8
 800551e:	f77f af79 	ble.w	8005414 <_printf_float+0x250>
 8005522:	2301      	movs	r3, #1
 8005524:	4652      	mov	r2, sl
 8005526:	4631      	mov	r1, r6
 8005528:	4628      	mov	r0, r5
 800552a:	47b8      	blx	r7
 800552c:	3001      	adds	r0, #1
 800552e:	f43f aeaa 	beq.w	8005286 <_printf_float+0xc2>
 8005532:	f108 0801 	add.w	r8, r8, #1
 8005536:	e7ec      	b.n	8005512 <_printf_float+0x34e>
 8005538:	4613      	mov	r3, r2
 800553a:	4631      	mov	r1, r6
 800553c:	4642      	mov	r2, r8
 800553e:	4628      	mov	r0, r5
 8005540:	47b8      	blx	r7
 8005542:	3001      	adds	r0, #1
 8005544:	d1c0      	bne.n	80054c8 <_printf_float+0x304>
 8005546:	e69e      	b.n	8005286 <_printf_float+0xc2>
 8005548:	2301      	movs	r3, #1
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	9205      	str	r2, [sp, #20]
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	f43f ae97 	beq.w	8005286 <_printf_float+0xc2>
 8005558:	9a05      	ldr	r2, [sp, #20]
 800555a:	f10b 0b01 	add.w	fp, fp, #1
 800555e:	e7b9      	b.n	80054d4 <_printf_float+0x310>
 8005560:	ee18 3a10 	vmov	r3, s16
 8005564:	4652      	mov	r2, sl
 8005566:	4631      	mov	r1, r6
 8005568:	4628      	mov	r0, r5
 800556a:	47b8      	blx	r7
 800556c:	3001      	adds	r0, #1
 800556e:	d1be      	bne.n	80054ee <_printf_float+0x32a>
 8005570:	e689      	b.n	8005286 <_printf_float+0xc2>
 8005572:	9a05      	ldr	r2, [sp, #20]
 8005574:	464b      	mov	r3, r9
 8005576:	4442      	add	r2, r8
 8005578:	4631      	mov	r1, r6
 800557a:	4628      	mov	r0, r5
 800557c:	47b8      	blx	r7
 800557e:	3001      	adds	r0, #1
 8005580:	d1c1      	bne.n	8005506 <_printf_float+0x342>
 8005582:	e680      	b.n	8005286 <_printf_float+0xc2>
 8005584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005586:	2a01      	cmp	r2, #1
 8005588:	dc01      	bgt.n	800558e <_printf_float+0x3ca>
 800558a:	07db      	lsls	r3, r3, #31
 800558c:	d538      	bpl.n	8005600 <_printf_float+0x43c>
 800558e:	2301      	movs	r3, #1
 8005590:	4642      	mov	r2, r8
 8005592:	4631      	mov	r1, r6
 8005594:	4628      	mov	r0, r5
 8005596:	47b8      	blx	r7
 8005598:	3001      	adds	r0, #1
 800559a:	f43f ae74 	beq.w	8005286 <_printf_float+0xc2>
 800559e:	ee18 3a10 	vmov	r3, s16
 80055a2:	4652      	mov	r2, sl
 80055a4:	4631      	mov	r1, r6
 80055a6:	4628      	mov	r0, r5
 80055a8:	47b8      	blx	r7
 80055aa:	3001      	adds	r0, #1
 80055ac:	f43f ae6b 	beq.w	8005286 <_printf_float+0xc2>
 80055b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055b4:	2200      	movs	r2, #0
 80055b6:	2300      	movs	r3, #0
 80055b8:	f7fb faae 	bl	8000b18 <__aeabi_dcmpeq>
 80055bc:	b9d8      	cbnz	r0, 80055f6 <_printf_float+0x432>
 80055be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055c0:	f108 0201 	add.w	r2, r8, #1
 80055c4:	3b01      	subs	r3, #1
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d10e      	bne.n	80055ee <_printf_float+0x42a>
 80055d0:	e659      	b.n	8005286 <_printf_float+0xc2>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4652      	mov	r2, sl
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae52 	beq.w	8005286 <_printf_float+0xc2>
 80055e2:	f108 0801 	add.w	r8, r8, #1
 80055e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4543      	cmp	r3, r8
 80055ec:	dcf1      	bgt.n	80055d2 <_printf_float+0x40e>
 80055ee:	464b      	mov	r3, r9
 80055f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055f4:	e6dc      	b.n	80053b0 <_printf_float+0x1ec>
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	f104 0a1a 	add.w	sl, r4, #26
 80055fe:	e7f2      	b.n	80055e6 <_printf_float+0x422>
 8005600:	2301      	movs	r3, #1
 8005602:	4642      	mov	r2, r8
 8005604:	e7df      	b.n	80055c6 <_printf_float+0x402>
 8005606:	2301      	movs	r3, #1
 8005608:	464a      	mov	r2, r9
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f ae38 	beq.w	8005286 <_printf_float+0xc2>
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800561e:	1a5b      	subs	r3, r3, r1
 8005620:	4543      	cmp	r3, r8
 8005622:	dcf0      	bgt.n	8005606 <_printf_float+0x442>
 8005624:	e6fa      	b.n	800541c <_printf_float+0x258>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	f104 0919 	add.w	r9, r4, #25
 800562e:	e7f4      	b.n	800561a <_printf_float+0x456>

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	4699      	mov	r9, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005640:	4293      	cmp	r3, r2
 8005642:	bfb8      	it	lt
 8005644:	4613      	movlt	r3, r2
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564c:	4607      	mov	r7, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b10a      	cbz	r2, 8005656 <_printf_common+0x26>
 8005652:	3301      	adds	r3, #1
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	0699      	lsls	r1, r3, #26
 800565a:	bf42      	ittt	mi
 800565c:	6833      	ldrmi	r3, [r6, #0]
 800565e:	3302      	addmi	r3, #2
 8005660:	6033      	strmi	r3, [r6, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d106      	bne.n	8005678 <_printf_common+0x48>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6832      	ldr	r2, [r6, #0]
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc26      	bgt.n	80056c6 <_printf_common+0x96>
 8005678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800567c:	1e13      	subs	r3, r2, #0
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	2301      	movne	r3, #1
 8005684:	0692      	lsls	r2, r2, #26
 8005686:	d42b      	bmi.n	80056e0 <_printf_common+0xb0>
 8005688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568c:	4649      	mov	r1, r9
 800568e:	4638      	mov	r0, r7
 8005690:	47c0      	blx	r8
 8005692:	3001      	adds	r0, #1
 8005694:	d01e      	beq.n	80056d4 <_printf_common+0xa4>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	68e5      	ldr	r5, [r4, #12]
 800569a:	6832      	ldr	r2, [r6, #0]
 800569c:	f003 0306 	and.w	r3, r3, #6
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	bf08      	it	eq
 80056a4:	1aad      	subeq	r5, r5, r2
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	bf0c      	ite	eq
 80056ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b0:	2500      	movne	r5, #0
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bfc4      	itt	gt
 80056b6:	1a9b      	subgt	r3, r3, r2
 80056b8:	18ed      	addgt	r5, r5, r3
 80056ba:	2600      	movs	r6, #0
 80056bc:	341a      	adds	r4, #26
 80056be:	42b5      	cmp	r5, r6
 80056c0:	d11a      	bne.n	80056f8 <_printf_common+0xc8>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e008      	b.n	80056d8 <_printf_common+0xa8>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4649      	mov	r1, r9
 80056cc:	4638      	mov	r0, r7
 80056ce:	47c0      	blx	r8
 80056d0:	3001      	adds	r0, #1
 80056d2:	d103      	bne.n	80056dc <_printf_common+0xac>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056dc:	3501      	adds	r5, #1
 80056de:	e7c6      	b.n	800566e <_printf_common+0x3e>
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	2030      	movs	r0, #48	; 0x30
 80056e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ea:	4422      	add	r2, r4
 80056ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056f4:	3302      	adds	r3, #2
 80056f6:	e7c7      	b.n	8005688 <_printf_common+0x58>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4622      	mov	r2, r4
 80056fc:	4649      	mov	r1, r9
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d0e6      	beq.n	80056d4 <_printf_common+0xa4>
 8005706:	3601      	adds	r6, #1
 8005708:	e7d9      	b.n	80056be <_printf_common+0x8e>
	...

0800570c <_printf_i>:
 800570c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	7e0f      	ldrb	r7, [r1, #24]
 8005712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005714:	2f78      	cmp	r7, #120	; 0x78
 8005716:	4691      	mov	r9, r2
 8005718:	4680      	mov	r8, r0
 800571a:	460c      	mov	r4, r1
 800571c:	469a      	mov	sl, r3
 800571e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005722:	d807      	bhi.n	8005734 <_printf_i+0x28>
 8005724:	2f62      	cmp	r7, #98	; 0x62
 8005726:	d80a      	bhi.n	800573e <_printf_i+0x32>
 8005728:	2f00      	cmp	r7, #0
 800572a:	f000 80d8 	beq.w	80058de <_printf_i+0x1d2>
 800572e:	2f58      	cmp	r7, #88	; 0x58
 8005730:	f000 80a3 	beq.w	800587a <_printf_i+0x16e>
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800573c:	e03a      	b.n	80057b4 <_printf_i+0xa8>
 800573e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005742:	2b15      	cmp	r3, #21
 8005744:	d8f6      	bhi.n	8005734 <_printf_i+0x28>
 8005746:	a101      	add	r1, pc, #4	; (adr r1, 800574c <_printf_i+0x40>)
 8005748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800574c:	080057a5 	.word	0x080057a5
 8005750:	080057b9 	.word	0x080057b9
 8005754:	08005735 	.word	0x08005735
 8005758:	08005735 	.word	0x08005735
 800575c:	08005735 	.word	0x08005735
 8005760:	08005735 	.word	0x08005735
 8005764:	080057b9 	.word	0x080057b9
 8005768:	08005735 	.word	0x08005735
 800576c:	08005735 	.word	0x08005735
 8005770:	08005735 	.word	0x08005735
 8005774:	08005735 	.word	0x08005735
 8005778:	080058c5 	.word	0x080058c5
 800577c:	080057e9 	.word	0x080057e9
 8005780:	080058a7 	.word	0x080058a7
 8005784:	08005735 	.word	0x08005735
 8005788:	08005735 	.word	0x08005735
 800578c:	080058e7 	.word	0x080058e7
 8005790:	08005735 	.word	0x08005735
 8005794:	080057e9 	.word	0x080057e9
 8005798:	08005735 	.word	0x08005735
 800579c:	08005735 	.word	0x08005735
 80057a0:	080058af 	.word	0x080058af
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0a3      	b.n	8005900 <_printf_i+0x1f4>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	6829      	ldr	r1, [r5, #0]
 80057bc:	0606      	lsls	r6, r0, #24
 80057be:	f101 0304 	add.w	r3, r1, #4
 80057c2:	d50a      	bpl.n	80057da <_printf_i+0xce>
 80057c4:	680e      	ldr	r6, [r1, #0]
 80057c6:	602b      	str	r3, [r5, #0]
 80057c8:	2e00      	cmp	r6, #0
 80057ca:	da03      	bge.n	80057d4 <_printf_i+0xc8>
 80057cc:	232d      	movs	r3, #45	; 0x2d
 80057ce:	4276      	negs	r6, r6
 80057d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d4:	485e      	ldr	r0, [pc, #376]	; (8005950 <_printf_i+0x244>)
 80057d6:	230a      	movs	r3, #10
 80057d8:	e019      	b.n	800580e <_printf_i+0x102>
 80057da:	680e      	ldr	r6, [r1, #0]
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057e2:	bf18      	it	ne
 80057e4:	b236      	sxthne	r6, r6
 80057e6:	e7ef      	b.n	80057c8 <_printf_i+0xbc>
 80057e8:	682b      	ldr	r3, [r5, #0]
 80057ea:	6820      	ldr	r0, [r4, #0]
 80057ec:	1d19      	adds	r1, r3, #4
 80057ee:	6029      	str	r1, [r5, #0]
 80057f0:	0601      	lsls	r1, r0, #24
 80057f2:	d501      	bpl.n	80057f8 <_printf_i+0xec>
 80057f4:	681e      	ldr	r6, [r3, #0]
 80057f6:	e002      	b.n	80057fe <_printf_i+0xf2>
 80057f8:	0646      	lsls	r6, r0, #25
 80057fa:	d5fb      	bpl.n	80057f4 <_printf_i+0xe8>
 80057fc:	881e      	ldrh	r6, [r3, #0]
 80057fe:	4854      	ldr	r0, [pc, #336]	; (8005950 <_printf_i+0x244>)
 8005800:	2f6f      	cmp	r7, #111	; 0x6f
 8005802:	bf0c      	ite	eq
 8005804:	2308      	moveq	r3, #8
 8005806:	230a      	movne	r3, #10
 8005808:	2100      	movs	r1, #0
 800580a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800580e:	6865      	ldr	r5, [r4, #4]
 8005810:	60a5      	str	r5, [r4, #8]
 8005812:	2d00      	cmp	r5, #0
 8005814:	bfa2      	ittt	ge
 8005816:	6821      	ldrge	r1, [r4, #0]
 8005818:	f021 0104 	bicge.w	r1, r1, #4
 800581c:	6021      	strge	r1, [r4, #0]
 800581e:	b90e      	cbnz	r6, 8005824 <_printf_i+0x118>
 8005820:	2d00      	cmp	r5, #0
 8005822:	d04d      	beq.n	80058c0 <_printf_i+0x1b4>
 8005824:	4615      	mov	r5, r2
 8005826:	fbb6 f1f3 	udiv	r1, r6, r3
 800582a:	fb03 6711 	mls	r7, r3, r1, r6
 800582e:	5dc7      	ldrb	r7, [r0, r7]
 8005830:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005834:	4637      	mov	r7, r6
 8005836:	42bb      	cmp	r3, r7
 8005838:	460e      	mov	r6, r1
 800583a:	d9f4      	bls.n	8005826 <_printf_i+0x11a>
 800583c:	2b08      	cmp	r3, #8
 800583e:	d10b      	bne.n	8005858 <_printf_i+0x14c>
 8005840:	6823      	ldr	r3, [r4, #0]
 8005842:	07de      	lsls	r6, r3, #31
 8005844:	d508      	bpl.n	8005858 <_printf_i+0x14c>
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	6861      	ldr	r1, [r4, #4]
 800584a:	4299      	cmp	r1, r3
 800584c:	bfde      	ittt	le
 800584e:	2330      	movle	r3, #48	; 0x30
 8005850:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005854:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005858:	1b52      	subs	r2, r2, r5
 800585a:	6122      	str	r2, [r4, #16]
 800585c:	f8cd a000 	str.w	sl, [sp]
 8005860:	464b      	mov	r3, r9
 8005862:	aa03      	add	r2, sp, #12
 8005864:	4621      	mov	r1, r4
 8005866:	4640      	mov	r0, r8
 8005868:	f7ff fee2 	bl	8005630 <_printf_common>
 800586c:	3001      	adds	r0, #1
 800586e:	d14c      	bne.n	800590a <_printf_i+0x1fe>
 8005870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005874:	b004      	add	sp, #16
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	4835      	ldr	r0, [pc, #212]	; (8005950 <_printf_i+0x244>)
 800587c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005880:	6829      	ldr	r1, [r5, #0]
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	f851 6b04 	ldr.w	r6, [r1], #4
 8005888:	6029      	str	r1, [r5, #0]
 800588a:	061d      	lsls	r5, r3, #24
 800588c:	d514      	bpl.n	80058b8 <_printf_i+0x1ac>
 800588e:	07df      	lsls	r7, r3, #31
 8005890:	bf44      	itt	mi
 8005892:	f043 0320 	orrmi.w	r3, r3, #32
 8005896:	6023      	strmi	r3, [r4, #0]
 8005898:	b91e      	cbnz	r6, 80058a2 <_printf_i+0x196>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	f023 0320 	bic.w	r3, r3, #32
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	2310      	movs	r3, #16
 80058a4:	e7b0      	b.n	8005808 <_printf_i+0xfc>
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f043 0320 	orr.w	r3, r3, #32
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	2378      	movs	r3, #120	; 0x78
 80058b0:	4828      	ldr	r0, [pc, #160]	; (8005954 <_printf_i+0x248>)
 80058b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058b6:	e7e3      	b.n	8005880 <_printf_i+0x174>
 80058b8:	0659      	lsls	r1, r3, #25
 80058ba:	bf48      	it	mi
 80058bc:	b2b6      	uxthmi	r6, r6
 80058be:	e7e6      	b.n	800588e <_printf_i+0x182>
 80058c0:	4615      	mov	r5, r2
 80058c2:	e7bb      	b.n	800583c <_printf_i+0x130>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	6826      	ldr	r6, [r4, #0]
 80058c8:	6961      	ldr	r1, [r4, #20]
 80058ca:	1d18      	adds	r0, r3, #4
 80058cc:	6028      	str	r0, [r5, #0]
 80058ce:	0635      	lsls	r5, r6, #24
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0x1cc>
 80058d4:	6019      	str	r1, [r3, #0]
 80058d6:	e002      	b.n	80058de <_printf_i+0x1d2>
 80058d8:	0670      	lsls	r0, r6, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0x1c8>
 80058dc:	8019      	strh	r1, [r3, #0]
 80058de:	2300      	movs	r3, #0
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	4615      	mov	r5, r2
 80058e4:	e7ba      	b.n	800585c <_printf_i+0x150>
 80058e6:	682b      	ldr	r3, [r5, #0]
 80058e8:	1d1a      	adds	r2, r3, #4
 80058ea:	602a      	str	r2, [r5, #0]
 80058ec:	681d      	ldr	r5, [r3, #0]
 80058ee:	6862      	ldr	r2, [r4, #4]
 80058f0:	2100      	movs	r1, #0
 80058f2:	4628      	mov	r0, r5
 80058f4:	f7fa fc9c 	bl	8000230 <memchr>
 80058f8:	b108      	cbz	r0, 80058fe <_printf_i+0x1f2>
 80058fa:	1b40      	subs	r0, r0, r5
 80058fc:	6060      	str	r0, [r4, #4]
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	6123      	str	r3, [r4, #16]
 8005902:	2300      	movs	r3, #0
 8005904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005908:	e7a8      	b.n	800585c <_printf_i+0x150>
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	462a      	mov	r2, r5
 800590e:	4649      	mov	r1, r9
 8005910:	4640      	mov	r0, r8
 8005912:	47d0      	blx	sl
 8005914:	3001      	adds	r0, #1
 8005916:	d0ab      	beq.n	8005870 <_printf_i+0x164>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	079b      	lsls	r3, r3, #30
 800591c:	d413      	bmi.n	8005946 <_printf_i+0x23a>
 800591e:	68e0      	ldr	r0, [r4, #12]
 8005920:	9b03      	ldr	r3, [sp, #12]
 8005922:	4298      	cmp	r0, r3
 8005924:	bfb8      	it	lt
 8005926:	4618      	movlt	r0, r3
 8005928:	e7a4      	b.n	8005874 <_printf_i+0x168>
 800592a:	2301      	movs	r3, #1
 800592c:	4632      	mov	r2, r6
 800592e:	4649      	mov	r1, r9
 8005930:	4640      	mov	r0, r8
 8005932:	47d0      	blx	sl
 8005934:	3001      	adds	r0, #1
 8005936:	d09b      	beq.n	8005870 <_printf_i+0x164>
 8005938:	3501      	adds	r5, #1
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	9903      	ldr	r1, [sp, #12]
 800593e:	1a5b      	subs	r3, r3, r1
 8005940:	42ab      	cmp	r3, r5
 8005942:	dcf2      	bgt.n	800592a <_printf_i+0x21e>
 8005944:	e7eb      	b.n	800591e <_printf_i+0x212>
 8005946:	2500      	movs	r5, #0
 8005948:	f104 0619 	add.w	r6, r4, #25
 800594c:	e7f5      	b.n	800593a <_printf_i+0x22e>
 800594e:	bf00      	nop
 8005950:	08009d2a 	.word	0x08009d2a
 8005954:	08009d3b 	.word	0x08009d3b

08005958 <_scanf_float>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	b087      	sub	sp, #28
 800595e:	4617      	mov	r7, r2
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	688b      	ldr	r3, [r1, #8]
 8005964:	1e5a      	subs	r2, r3, #1
 8005966:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800596a:	bf83      	ittte	hi
 800596c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005970:	195b      	addhi	r3, r3, r5
 8005972:	9302      	strhi	r3, [sp, #8]
 8005974:	2300      	movls	r3, #0
 8005976:	bf86      	itte	hi
 8005978:	f240 135d 	movwhi	r3, #349	; 0x15d
 800597c:	608b      	strhi	r3, [r1, #8]
 800597e:	9302      	strls	r3, [sp, #8]
 8005980:	680b      	ldr	r3, [r1, #0]
 8005982:	468b      	mov	fp, r1
 8005984:	2500      	movs	r5, #0
 8005986:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800598a:	f84b 3b1c 	str.w	r3, [fp], #28
 800598e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005992:	4680      	mov	r8, r0
 8005994:	460c      	mov	r4, r1
 8005996:	465e      	mov	r6, fp
 8005998:	46aa      	mov	sl, r5
 800599a:	46a9      	mov	r9, r5
 800599c:	9501      	str	r5, [sp, #4]
 800599e:	68a2      	ldr	r2, [r4, #8]
 80059a0:	b152      	cbz	r2, 80059b8 <_scanf_float+0x60>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b4e      	cmp	r3, #78	; 0x4e
 80059a8:	d864      	bhi.n	8005a74 <_scanf_float+0x11c>
 80059aa:	2b40      	cmp	r3, #64	; 0x40
 80059ac:	d83c      	bhi.n	8005a28 <_scanf_float+0xd0>
 80059ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80059b2:	b2c8      	uxtb	r0, r1
 80059b4:	280e      	cmp	r0, #14
 80059b6:	d93a      	bls.n	8005a2e <_scanf_float+0xd6>
 80059b8:	f1b9 0f00 	cmp.w	r9, #0
 80059bc:	d003      	beq.n	80059c6 <_scanf_float+0x6e>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80059ca:	f1ba 0f01 	cmp.w	sl, #1
 80059ce:	f200 8113 	bhi.w	8005bf8 <_scanf_float+0x2a0>
 80059d2:	455e      	cmp	r6, fp
 80059d4:	f200 8105 	bhi.w	8005be2 <_scanf_float+0x28a>
 80059d8:	2501      	movs	r5, #1
 80059da:	4628      	mov	r0, r5
 80059dc:	b007      	add	sp, #28
 80059de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80059e6:	2a0d      	cmp	r2, #13
 80059e8:	d8e6      	bhi.n	80059b8 <_scanf_float+0x60>
 80059ea:	a101      	add	r1, pc, #4	; (adr r1, 80059f0 <_scanf_float+0x98>)
 80059ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80059f0:	08005b2f 	.word	0x08005b2f
 80059f4:	080059b9 	.word	0x080059b9
 80059f8:	080059b9 	.word	0x080059b9
 80059fc:	080059b9 	.word	0x080059b9
 8005a00:	08005b8f 	.word	0x08005b8f
 8005a04:	08005b67 	.word	0x08005b67
 8005a08:	080059b9 	.word	0x080059b9
 8005a0c:	080059b9 	.word	0x080059b9
 8005a10:	08005b3d 	.word	0x08005b3d
 8005a14:	080059b9 	.word	0x080059b9
 8005a18:	080059b9 	.word	0x080059b9
 8005a1c:	080059b9 	.word	0x080059b9
 8005a20:	080059b9 	.word	0x080059b9
 8005a24:	08005af5 	.word	0x08005af5
 8005a28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005a2c:	e7db      	b.n	80059e6 <_scanf_float+0x8e>
 8005a2e:	290e      	cmp	r1, #14
 8005a30:	d8c2      	bhi.n	80059b8 <_scanf_float+0x60>
 8005a32:	a001      	add	r0, pc, #4	; (adr r0, 8005a38 <_scanf_float+0xe0>)
 8005a34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005a38:	08005ae7 	.word	0x08005ae7
 8005a3c:	080059b9 	.word	0x080059b9
 8005a40:	08005ae7 	.word	0x08005ae7
 8005a44:	08005b7b 	.word	0x08005b7b
 8005a48:	080059b9 	.word	0x080059b9
 8005a4c:	08005a95 	.word	0x08005a95
 8005a50:	08005ad1 	.word	0x08005ad1
 8005a54:	08005ad1 	.word	0x08005ad1
 8005a58:	08005ad1 	.word	0x08005ad1
 8005a5c:	08005ad1 	.word	0x08005ad1
 8005a60:	08005ad1 	.word	0x08005ad1
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005ad1 	.word	0x08005ad1
 8005a74:	2b6e      	cmp	r3, #110	; 0x6e
 8005a76:	d809      	bhi.n	8005a8c <_scanf_float+0x134>
 8005a78:	2b60      	cmp	r3, #96	; 0x60
 8005a7a:	d8b2      	bhi.n	80059e2 <_scanf_float+0x8a>
 8005a7c:	2b54      	cmp	r3, #84	; 0x54
 8005a7e:	d077      	beq.n	8005b70 <_scanf_float+0x218>
 8005a80:	2b59      	cmp	r3, #89	; 0x59
 8005a82:	d199      	bne.n	80059b8 <_scanf_float+0x60>
 8005a84:	2d07      	cmp	r5, #7
 8005a86:	d197      	bne.n	80059b8 <_scanf_float+0x60>
 8005a88:	2508      	movs	r5, #8
 8005a8a:	e029      	b.n	8005ae0 <_scanf_float+0x188>
 8005a8c:	2b74      	cmp	r3, #116	; 0x74
 8005a8e:	d06f      	beq.n	8005b70 <_scanf_float+0x218>
 8005a90:	2b79      	cmp	r3, #121	; 0x79
 8005a92:	e7f6      	b.n	8005a82 <_scanf_float+0x12a>
 8005a94:	6821      	ldr	r1, [r4, #0]
 8005a96:	05c8      	lsls	r0, r1, #23
 8005a98:	d51a      	bpl.n	8005ad0 <_scanf_float+0x178>
 8005a9a:	9b02      	ldr	r3, [sp, #8]
 8005a9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005aa0:	6021      	str	r1, [r4, #0]
 8005aa2:	f109 0901 	add.w	r9, r9, #1
 8005aa6:	b11b      	cbz	r3, 8005ab0 <_scanf_float+0x158>
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	3201      	adds	r2, #1
 8005aac:	9302      	str	r3, [sp, #8]
 8005aae:	60a2      	str	r2, [r4, #8]
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	60a3      	str	r3, [r4, #8]
 8005ab6:	6923      	ldr	r3, [r4, #16]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	6123      	str	r3, [r4, #16]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	607b      	str	r3, [r7, #4]
 8005ac4:	f340 8084 	ble.w	8005bd0 <_scanf_float+0x278>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	e766      	b.n	800599e <_scanf_float+0x46>
 8005ad0:	eb1a 0f05 	cmn.w	sl, r5
 8005ad4:	f47f af70 	bne.w	80059b8 <_scanf_float+0x60>
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005ade:	6022      	str	r2, [r4, #0]
 8005ae0:	f806 3b01 	strb.w	r3, [r6], #1
 8005ae4:	e7e4      	b.n	8005ab0 <_scanf_float+0x158>
 8005ae6:	6822      	ldr	r2, [r4, #0]
 8005ae8:	0610      	lsls	r0, r2, #24
 8005aea:	f57f af65 	bpl.w	80059b8 <_scanf_float+0x60>
 8005aee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af2:	e7f4      	b.n	8005ade <_scanf_float+0x186>
 8005af4:	f1ba 0f00 	cmp.w	sl, #0
 8005af8:	d10e      	bne.n	8005b18 <_scanf_float+0x1c0>
 8005afa:	f1b9 0f00 	cmp.w	r9, #0
 8005afe:	d10e      	bne.n	8005b1e <_scanf_float+0x1c6>
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b0a:	d108      	bne.n	8005b1e <_scanf_float+0x1c6>
 8005b0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b10:	6022      	str	r2, [r4, #0]
 8005b12:	f04f 0a01 	mov.w	sl, #1
 8005b16:	e7e3      	b.n	8005ae0 <_scanf_float+0x188>
 8005b18:	f1ba 0f02 	cmp.w	sl, #2
 8005b1c:	d055      	beq.n	8005bca <_scanf_float+0x272>
 8005b1e:	2d01      	cmp	r5, #1
 8005b20:	d002      	beq.n	8005b28 <_scanf_float+0x1d0>
 8005b22:	2d04      	cmp	r5, #4
 8005b24:	f47f af48 	bne.w	80059b8 <_scanf_float+0x60>
 8005b28:	3501      	adds	r5, #1
 8005b2a:	b2ed      	uxtb	r5, r5
 8005b2c:	e7d8      	b.n	8005ae0 <_scanf_float+0x188>
 8005b2e:	f1ba 0f01 	cmp.w	sl, #1
 8005b32:	f47f af41 	bne.w	80059b8 <_scanf_float+0x60>
 8005b36:	f04f 0a02 	mov.w	sl, #2
 8005b3a:	e7d1      	b.n	8005ae0 <_scanf_float+0x188>
 8005b3c:	b97d      	cbnz	r5, 8005b5e <_scanf_float+0x206>
 8005b3e:	f1b9 0f00 	cmp.w	r9, #0
 8005b42:	f47f af3c 	bne.w	80059be <_scanf_float+0x66>
 8005b46:	6822      	ldr	r2, [r4, #0]
 8005b48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b50:	f47f af39 	bne.w	80059c6 <_scanf_float+0x6e>
 8005b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005b58:	6022      	str	r2, [r4, #0]
 8005b5a:	2501      	movs	r5, #1
 8005b5c:	e7c0      	b.n	8005ae0 <_scanf_float+0x188>
 8005b5e:	2d03      	cmp	r5, #3
 8005b60:	d0e2      	beq.n	8005b28 <_scanf_float+0x1d0>
 8005b62:	2d05      	cmp	r5, #5
 8005b64:	e7de      	b.n	8005b24 <_scanf_float+0x1cc>
 8005b66:	2d02      	cmp	r5, #2
 8005b68:	f47f af26 	bne.w	80059b8 <_scanf_float+0x60>
 8005b6c:	2503      	movs	r5, #3
 8005b6e:	e7b7      	b.n	8005ae0 <_scanf_float+0x188>
 8005b70:	2d06      	cmp	r5, #6
 8005b72:	f47f af21 	bne.w	80059b8 <_scanf_float+0x60>
 8005b76:	2507      	movs	r5, #7
 8005b78:	e7b2      	b.n	8005ae0 <_scanf_float+0x188>
 8005b7a:	6822      	ldr	r2, [r4, #0]
 8005b7c:	0591      	lsls	r1, r2, #22
 8005b7e:	f57f af1b 	bpl.w	80059b8 <_scanf_float+0x60>
 8005b82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005b86:	6022      	str	r2, [r4, #0]
 8005b88:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b8c:	e7a8      	b.n	8005ae0 <_scanf_float+0x188>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005b94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005b98:	d006      	beq.n	8005ba8 <_scanf_float+0x250>
 8005b9a:	0550      	lsls	r0, r2, #21
 8005b9c:	f57f af0c 	bpl.w	80059b8 <_scanf_float+0x60>
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	f43f af0f 	beq.w	80059c6 <_scanf_float+0x6e>
 8005ba8:	0591      	lsls	r1, r2, #22
 8005baa:	bf58      	it	pl
 8005bac:	9901      	ldrpl	r1, [sp, #4]
 8005bae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bb2:	bf58      	it	pl
 8005bb4:	eba9 0101 	subpl.w	r1, r9, r1
 8005bb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005bbc:	bf58      	it	pl
 8005bbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	f04f 0900 	mov.w	r9, #0
 8005bc8:	e78a      	b.n	8005ae0 <_scanf_float+0x188>
 8005bca:	f04f 0a03 	mov.w	sl, #3
 8005bce:	e787      	b.n	8005ae0 <_scanf_float+0x188>
 8005bd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	4640      	mov	r0, r8
 8005bd8:	4798      	blx	r3
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f43f aedf 	beq.w	800599e <_scanf_float+0x46>
 8005be0:	e6ea      	b.n	80059b8 <_scanf_float+0x60>
 8005be2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005be6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bea:	463a      	mov	r2, r7
 8005bec:	4640      	mov	r0, r8
 8005bee:	4798      	blx	r3
 8005bf0:	6923      	ldr	r3, [r4, #16]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	e6ec      	b.n	80059d2 <_scanf_float+0x7a>
 8005bf8:	1e6b      	subs	r3, r5, #1
 8005bfa:	2b06      	cmp	r3, #6
 8005bfc:	d825      	bhi.n	8005c4a <_scanf_float+0x2f2>
 8005bfe:	2d02      	cmp	r5, #2
 8005c00:	d836      	bhi.n	8005c70 <_scanf_float+0x318>
 8005c02:	455e      	cmp	r6, fp
 8005c04:	f67f aee8 	bls.w	80059d8 <_scanf_float+0x80>
 8005c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c0c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c10:	463a      	mov	r2, r7
 8005c12:	4640      	mov	r0, r8
 8005c14:	4798      	blx	r3
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	e7f1      	b.n	8005c02 <_scanf_float+0x2aa>
 8005c1e:	9802      	ldr	r0, [sp, #8]
 8005c20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c24:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005c28:	9002      	str	r0, [sp, #8]
 8005c2a:	463a      	mov	r2, r7
 8005c2c:	4640      	mov	r0, r8
 8005c2e:	4798      	blx	r3
 8005c30:	6923      	ldr	r3, [r4, #16]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c3a:	fa5f fa8a 	uxtb.w	sl, sl
 8005c3e:	f1ba 0f02 	cmp.w	sl, #2
 8005c42:	d1ec      	bne.n	8005c1e <_scanf_float+0x2c6>
 8005c44:	3d03      	subs	r5, #3
 8005c46:	b2ed      	uxtb	r5, r5
 8005c48:	1b76      	subs	r6, r6, r5
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	05da      	lsls	r2, r3, #23
 8005c4e:	d52f      	bpl.n	8005cb0 <_scanf_float+0x358>
 8005c50:	055b      	lsls	r3, r3, #21
 8005c52:	d510      	bpl.n	8005c76 <_scanf_float+0x31e>
 8005c54:	455e      	cmp	r6, fp
 8005c56:	f67f aebf 	bls.w	80059d8 <_scanf_float+0x80>
 8005c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c62:	463a      	mov	r2, r7
 8005c64:	4640      	mov	r0, r8
 8005c66:	4798      	blx	r3
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	6123      	str	r3, [r4, #16]
 8005c6e:	e7f1      	b.n	8005c54 <_scanf_float+0x2fc>
 8005c70:	46aa      	mov	sl, r5
 8005c72:	9602      	str	r6, [sp, #8]
 8005c74:	e7df      	b.n	8005c36 <_scanf_float+0x2de>
 8005c76:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	2965      	cmp	r1, #101	; 0x65
 8005c7e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005c82:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	d00c      	beq.n	8005ca4 <_scanf_float+0x34c>
 8005c8a:	2945      	cmp	r1, #69	; 0x45
 8005c8c:	d00a      	beq.n	8005ca4 <_scanf_float+0x34c>
 8005c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c92:	463a      	mov	r2, r7
 8005c94:	4640      	mov	r0, r8
 8005c96:	4798      	blx	r3
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	1eb5      	subs	r5, r6, #2
 8005ca2:	6123      	str	r3, [r4, #16]
 8005ca4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ca8:	463a      	mov	r2, r7
 8005caa:	4640      	mov	r0, r8
 8005cac:	4798      	blx	r3
 8005cae:	462e      	mov	r6, r5
 8005cb0:	6825      	ldr	r5, [r4, #0]
 8005cb2:	f015 0510 	ands.w	r5, r5, #16
 8005cb6:	d159      	bne.n	8005d6c <_scanf_float+0x414>
 8005cb8:	7035      	strb	r5, [r6, #0]
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc4:	d11b      	bne.n	8005cfe <_scanf_float+0x3a6>
 8005cc6:	9b01      	ldr	r3, [sp, #4]
 8005cc8:	454b      	cmp	r3, r9
 8005cca:	eba3 0209 	sub.w	r2, r3, r9
 8005cce:	d123      	bne.n	8005d18 <_scanf_float+0x3c0>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	f000 ff25 	bl	8006b24 <_strtod_r>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	9b03      	ldr	r3, [sp, #12]
 8005cde:	f012 0f02 	tst.w	r2, #2
 8005ce2:	ec57 6b10 	vmov	r6, r7, d0
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	d021      	beq.n	8005d2e <_scanf_float+0x3d6>
 8005cea:	9903      	ldr	r1, [sp, #12]
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	600a      	str	r2, [r1, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	e9c3 6700 	strd	r6, r7, [r3]
 8005cf6:	68e3      	ldr	r3, [r4, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60e3      	str	r3, [r4, #12]
 8005cfc:	e66d      	b.n	80059da <_scanf_float+0x82>
 8005cfe:	9b04      	ldr	r3, [sp, #16]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0e5      	beq.n	8005cd0 <_scanf_float+0x378>
 8005d04:	9905      	ldr	r1, [sp, #20]
 8005d06:	230a      	movs	r3, #10
 8005d08:	462a      	mov	r2, r5
 8005d0a:	3101      	adds	r1, #1
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f000 ff91 	bl	8006c34 <_strtol_r>
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	9e05      	ldr	r6, [sp, #20]
 8005d16:	1ac2      	subs	r2, r0, r3
 8005d18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005d1c:	429e      	cmp	r6, r3
 8005d1e:	bf28      	it	cs
 8005d20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005d24:	4912      	ldr	r1, [pc, #72]	; (8005d70 <_scanf_float+0x418>)
 8005d26:	4630      	mov	r0, r6
 8005d28:	f000 f8ba 	bl	8005ea0 <siprintf>
 8005d2c:	e7d0      	b.n	8005cd0 <_scanf_float+0x378>
 8005d2e:	9903      	ldr	r1, [sp, #12]
 8005d30:	f012 0f04 	tst.w	r2, #4
 8005d34:	f103 0204 	add.w	r2, r3, #4
 8005d38:	600a      	str	r2, [r1, #0]
 8005d3a:	d1d9      	bne.n	8005cf0 <_scanf_float+0x398>
 8005d3c:	f8d3 8000 	ldr.w	r8, [r3]
 8005d40:	ee10 2a10 	vmov	r2, s0
 8005d44:	ee10 0a10 	vmov	r0, s0
 8005d48:	463b      	mov	r3, r7
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	f7fa ff16 	bl	8000b7c <__aeabi_dcmpun>
 8005d50:	b128      	cbz	r0, 8005d5e <_scanf_float+0x406>
 8005d52:	4808      	ldr	r0, [pc, #32]	; (8005d74 <_scanf_float+0x41c>)
 8005d54:	f000 f89e 	bl	8005e94 <nanf>
 8005d58:	ed88 0a00 	vstr	s0, [r8]
 8005d5c:	e7cb      	b.n	8005cf6 <_scanf_float+0x39e>
 8005d5e:	4630      	mov	r0, r6
 8005d60:	4639      	mov	r1, r7
 8005d62:	f7fa ff69 	bl	8000c38 <__aeabi_d2f>
 8005d66:	f8c8 0000 	str.w	r0, [r8]
 8005d6a:	e7c4      	b.n	8005cf6 <_scanf_float+0x39e>
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	e634      	b.n	80059da <_scanf_float+0x82>
 8005d70:	08009d4c 	.word	0x08009d4c
 8005d74:	0800a1c0 	.word	0x0800a1c0

08005d78 <iprintf>:
 8005d78:	b40f      	push	{r0, r1, r2, r3}
 8005d7a:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <iprintf+0x2c>)
 8005d7c:	b513      	push	{r0, r1, r4, lr}
 8005d7e:	681c      	ldr	r4, [r3, #0]
 8005d80:	b124      	cbz	r4, 8005d8c <iprintf+0x14>
 8005d82:	69a3      	ldr	r3, [r4, #24]
 8005d84:	b913      	cbnz	r3, 8005d8c <iprintf+0x14>
 8005d86:	4620      	mov	r0, r4
 8005d88:	f001 ffaa 	bl	8007ce0 <__sinit>
 8005d8c:	ab05      	add	r3, sp, #20
 8005d8e:	9a04      	ldr	r2, [sp, #16]
 8005d90:	68a1      	ldr	r1, [r4, #8]
 8005d92:	9301      	str	r3, [sp, #4]
 8005d94:	4620      	mov	r0, r4
 8005d96:	f003 fb73 	bl	8009480 <_vfiprintf_r>
 8005d9a:	b002      	add	sp, #8
 8005d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da0:	b004      	add	sp, #16
 8005da2:	4770      	bx	lr
 8005da4:	20000018 	.word	0x20000018

08005da8 <_puts_r>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	460e      	mov	r6, r1
 8005dac:	4605      	mov	r5, r0
 8005dae:	b118      	cbz	r0, 8005db8 <_puts_r+0x10>
 8005db0:	6983      	ldr	r3, [r0, #24]
 8005db2:	b90b      	cbnz	r3, 8005db8 <_puts_r+0x10>
 8005db4:	f001 ff94 	bl	8007ce0 <__sinit>
 8005db8:	69ab      	ldr	r3, [r5, #24]
 8005dba:	68ac      	ldr	r4, [r5, #8]
 8005dbc:	b913      	cbnz	r3, 8005dc4 <_puts_r+0x1c>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f001 ff8e 	bl	8007ce0 <__sinit>
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <_puts_r+0xd0>)
 8005dc6:	429c      	cmp	r4, r3
 8005dc8:	d120      	bne.n	8005e0c <_puts_r+0x64>
 8005dca:	686c      	ldr	r4, [r5, #4]
 8005dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dce:	07db      	lsls	r3, r3, #31
 8005dd0:	d405      	bmi.n	8005dde <_puts_r+0x36>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	0598      	lsls	r0, r3, #22
 8005dd6:	d402      	bmi.n	8005dde <_puts_r+0x36>
 8005dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dda:	f002 fb92 	bl	8008502 <__retarget_lock_acquire_recursive>
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	0719      	lsls	r1, r3, #28
 8005de2:	d51d      	bpl.n	8005e20 <_puts_r+0x78>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	b1db      	cbz	r3, 8005e20 <_puts_r+0x78>
 8005de8:	3e01      	subs	r6, #1
 8005dea:	68a3      	ldr	r3, [r4, #8]
 8005dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60a3      	str	r3, [r4, #8]
 8005df4:	bb39      	cbnz	r1, 8005e46 <_puts_r+0x9e>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da38      	bge.n	8005e6c <_puts_r+0xc4>
 8005dfa:	4622      	mov	r2, r4
 8005dfc:	210a      	movs	r1, #10
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 ff1a 	bl	8006c38 <__swbuf_r>
 8005e04:	3001      	adds	r0, #1
 8005e06:	d011      	beq.n	8005e2c <_puts_r+0x84>
 8005e08:	250a      	movs	r5, #10
 8005e0a:	e011      	b.n	8005e30 <_puts_r+0x88>
 8005e0c:	4b1b      	ldr	r3, [pc, #108]	; (8005e7c <_puts_r+0xd4>)
 8005e0e:	429c      	cmp	r4, r3
 8005e10:	d101      	bne.n	8005e16 <_puts_r+0x6e>
 8005e12:	68ac      	ldr	r4, [r5, #8]
 8005e14:	e7da      	b.n	8005dcc <_puts_r+0x24>
 8005e16:	4b1a      	ldr	r3, [pc, #104]	; (8005e80 <_puts_r+0xd8>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	bf08      	it	eq
 8005e1c:	68ec      	ldreq	r4, [r5, #12]
 8005e1e:	e7d5      	b.n	8005dcc <_puts_r+0x24>
 8005e20:	4621      	mov	r1, r4
 8005e22:	4628      	mov	r0, r5
 8005e24:	f000 ff5a 	bl	8006cdc <__swsetup_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d0dd      	beq.n	8005de8 <_puts_r+0x40>
 8005e2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e32:	07da      	lsls	r2, r3, #31
 8005e34:	d405      	bmi.n	8005e42 <_puts_r+0x9a>
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	059b      	lsls	r3, r3, #22
 8005e3a:	d402      	bmi.n	8005e42 <_puts_r+0x9a>
 8005e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e3e:	f002 fb61 	bl	8008504 <__retarget_lock_release_recursive>
 8005e42:	4628      	mov	r0, r5
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	da04      	bge.n	8005e54 <_puts_r+0xac>
 8005e4a:	69a2      	ldr	r2, [r4, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	dc06      	bgt.n	8005e5e <_puts_r+0xb6>
 8005e50:	290a      	cmp	r1, #10
 8005e52:	d004      	beq.n	8005e5e <_puts_r+0xb6>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	6022      	str	r2, [r4, #0]
 8005e5a:	7019      	strb	r1, [r3, #0]
 8005e5c:	e7c5      	b.n	8005dea <_puts_r+0x42>
 8005e5e:	4622      	mov	r2, r4
 8005e60:	4628      	mov	r0, r5
 8005e62:	f000 fee9 	bl	8006c38 <__swbuf_r>
 8005e66:	3001      	adds	r0, #1
 8005e68:	d1bf      	bne.n	8005dea <_puts_r+0x42>
 8005e6a:	e7df      	b.n	8005e2c <_puts_r+0x84>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	250a      	movs	r5, #10
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	6022      	str	r2, [r4, #0]
 8005e74:	701d      	strb	r5, [r3, #0]
 8005e76:	e7db      	b.n	8005e30 <_puts_r+0x88>
 8005e78:	08009f5c 	.word	0x08009f5c
 8005e7c:	08009f7c 	.word	0x08009f7c
 8005e80:	08009f3c 	.word	0x08009f3c

08005e84 <puts>:
 8005e84:	4b02      	ldr	r3, [pc, #8]	; (8005e90 <puts+0xc>)
 8005e86:	4601      	mov	r1, r0
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	f7ff bf8d 	b.w	8005da8 <_puts_r>
 8005e8e:	bf00      	nop
 8005e90:	20000018 	.word	0x20000018

08005e94 <nanf>:
 8005e94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005e9c <nanf+0x8>
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	7fc00000 	.word	0x7fc00000

08005ea0 <siprintf>:
 8005ea0:	b40e      	push	{r1, r2, r3}
 8005ea2:	b500      	push	{lr}
 8005ea4:	b09c      	sub	sp, #112	; 0x70
 8005ea6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ea8:	9002      	str	r0, [sp, #8]
 8005eaa:	9006      	str	r0, [sp, #24]
 8005eac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005eb0:	4809      	ldr	r0, [pc, #36]	; (8005ed8 <siprintf+0x38>)
 8005eb2:	9107      	str	r1, [sp, #28]
 8005eb4:	9104      	str	r1, [sp, #16]
 8005eb6:	4909      	ldr	r1, [pc, #36]	; (8005edc <siprintf+0x3c>)
 8005eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ebc:	9105      	str	r1, [sp, #20]
 8005ebe:	6800      	ldr	r0, [r0, #0]
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	a902      	add	r1, sp, #8
 8005ec4:	f003 f9b2 	bl	800922c <_svfiprintf_r>
 8005ec8:	9b02      	ldr	r3, [sp, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	b01c      	add	sp, #112	; 0x70
 8005ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed4:	b003      	add	sp, #12
 8005ed6:	4770      	bx	lr
 8005ed8:	20000018 	.word	0x20000018
 8005edc:	ffff0208 	.word	0xffff0208

08005ee0 <sulp>:
 8005ee0:	b570      	push	{r4, r5, r6, lr}
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	460d      	mov	r5, r1
 8005ee6:	ec45 4b10 	vmov	d0, r4, r5
 8005eea:	4616      	mov	r6, r2
 8005eec:	f002 fefc 	bl	8008ce8 <__ulp>
 8005ef0:	ec51 0b10 	vmov	r0, r1, d0
 8005ef4:	b17e      	cbz	r6, 8005f16 <sulp+0x36>
 8005ef6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005efa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dd09      	ble.n	8005f16 <sulp+0x36>
 8005f02:	051b      	lsls	r3, r3, #20
 8005f04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f08:	2400      	movs	r4, #0
 8005f0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	f7fa fb99 	bl	8000648 <__aeabi_dmul>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}

08005f18 <_strtod_l>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	ed2d 8b02 	vpush	{d8}
 8005f20:	b09d      	sub	sp, #116	; 0x74
 8005f22:	461f      	mov	r7, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	9318      	str	r3, [sp, #96]	; 0x60
 8005f28:	4ba2      	ldr	r3, [pc, #648]	; (80061b4 <_strtod_l+0x29c>)
 8005f2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	4604      	mov	r4, r0
 8005f32:	4618      	mov	r0, r3
 8005f34:	4688      	mov	r8, r1
 8005f36:	f7fa f973 	bl	8000220 <strlen>
 8005f3a:	f04f 0a00 	mov.w	sl, #0
 8005f3e:	4605      	mov	r5, r0
 8005f40:	f04f 0b00 	mov.w	fp, #0
 8005f44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005f48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	2a2b      	cmp	r2, #43	; 0x2b
 8005f4e:	d04e      	beq.n	8005fee <_strtod_l+0xd6>
 8005f50:	d83b      	bhi.n	8005fca <_strtod_l+0xb2>
 8005f52:	2a0d      	cmp	r2, #13
 8005f54:	d834      	bhi.n	8005fc0 <_strtod_l+0xa8>
 8005f56:	2a08      	cmp	r2, #8
 8005f58:	d834      	bhi.n	8005fc4 <_strtod_l+0xac>
 8005f5a:	2a00      	cmp	r2, #0
 8005f5c:	d03e      	beq.n	8005fdc <_strtod_l+0xc4>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	930a      	str	r3, [sp, #40]	; 0x28
 8005f62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005f64:	7833      	ldrb	r3, [r6, #0]
 8005f66:	2b30      	cmp	r3, #48	; 0x30
 8005f68:	f040 80b0 	bne.w	80060cc <_strtod_l+0x1b4>
 8005f6c:	7873      	ldrb	r3, [r6, #1]
 8005f6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f72:	2b58      	cmp	r3, #88	; 0x58
 8005f74:	d168      	bne.n	8006048 <_strtod_l+0x130>
 8005f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	ab18      	add	r3, sp, #96	; 0x60
 8005f7c:	9702      	str	r7, [sp, #8]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4a8d      	ldr	r2, [pc, #564]	; (80061b8 <_strtod_l+0x2a0>)
 8005f82:	ab19      	add	r3, sp, #100	; 0x64
 8005f84:	a917      	add	r1, sp, #92	; 0x5c
 8005f86:	4620      	mov	r0, r4
 8005f88:	f001 ffae 	bl	8007ee8 <__gethex>
 8005f8c:	f010 0707 	ands.w	r7, r0, #7
 8005f90:	4605      	mov	r5, r0
 8005f92:	d005      	beq.n	8005fa0 <_strtod_l+0x88>
 8005f94:	2f06      	cmp	r7, #6
 8005f96:	d12c      	bne.n	8005ff2 <_strtod_l+0xda>
 8005f98:	3601      	adds	r6, #1
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005fa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f040 8590 	bne.w	8006ac8 <_strtod_l+0xbb0>
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	b1eb      	cbz	r3, 8005fe8 <_strtod_l+0xd0>
 8005fac:	4652      	mov	r2, sl
 8005fae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005fb2:	ec43 2b10 	vmov	d0, r2, r3
 8005fb6:	b01d      	add	sp, #116	; 0x74
 8005fb8:	ecbd 8b02 	vpop	{d8}
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	2a20      	cmp	r2, #32
 8005fc2:	d1cc      	bne.n	8005f5e <_strtod_l+0x46>
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8005fc8:	e7be      	b.n	8005f48 <_strtod_l+0x30>
 8005fca:	2a2d      	cmp	r2, #45	; 0x2d
 8005fcc:	d1c7      	bne.n	8005f5e <_strtod_l+0x46>
 8005fce:	2201      	movs	r2, #1
 8005fd0:	920a      	str	r2, [sp, #40]	; 0x28
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005fd6:	785b      	ldrb	r3, [r3, #1]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1c2      	bne.n	8005f62 <_strtod_l+0x4a>
 8005fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005fde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 856e 	bne.w	8006ac4 <_strtod_l+0xbac>
 8005fe8:	4652      	mov	r2, sl
 8005fea:	465b      	mov	r3, fp
 8005fec:	e7e1      	b.n	8005fb2 <_strtod_l+0x9a>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	e7ee      	b.n	8005fd0 <_strtod_l+0xb8>
 8005ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005ff4:	b13a      	cbz	r2, 8006006 <_strtod_l+0xee>
 8005ff6:	2135      	movs	r1, #53	; 0x35
 8005ff8:	a81a      	add	r0, sp, #104	; 0x68
 8005ffa:	f002 ff80 	bl	8008efe <__copybits>
 8005ffe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006000:	4620      	mov	r0, r4
 8006002:	f002 fb3f 	bl	8008684 <_Bfree>
 8006006:	3f01      	subs	r7, #1
 8006008:	2f04      	cmp	r7, #4
 800600a:	d806      	bhi.n	800601a <_strtod_l+0x102>
 800600c:	e8df f007 	tbb	[pc, r7]
 8006010:	1714030a 	.word	0x1714030a
 8006014:	0a          	.byte	0x0a
 8006015:	00          	.byte	0x00
 8006016:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800601a:	0728      	lsls	r0, r5, #28
 800601c:	d5c0      	bpl.n	8005fa0 <_strtod_l+0x88>
 800601e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006022:	e7bd      	b.n	8005fa0 <_strtod_l+0x88>
 8006024:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006028:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800602a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800602e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006032:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006036:	e7f0      	b.n	800601a <_strtod_l+0x102>
 8006038:	f8df b180 	ldr.w	fp, [pc, #384]	; 80061bc <_strtod_l+0x2a4>
 800603c:	e7ed      	b.n	800601a <_strtod_l+0x102>
 800603e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006042:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006046:	e7e8      	b.n	800601a <_strtod_l+0x102>
 8006048:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	9217      	str	r2, [sp, #92]	; 0x5c
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b30      	cmp	r3, #48	; 0x30
 8006052:	d0f9      	beq.n	8006048 <_strtod_l+0x130>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0a3      	beq.n	8005fa0 <_strtod_l+0x88>
 8006058:	2301      	movs	r3, #1
 800605a:	f04f 0900 	mov.w	r9, #0
 800605e:	9304      	str	r3, [sp, #16]
 8006060:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006062:	9308      	str	r3, [sp, #32]
 8006064:	f8cd 901c 	str.w	r9, [sp, #28]
 8006068:	464f      	mov	r7, r9
 800606a:	220a      	movs	r2, #10
 800606c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800606e:	7806      	ldrb	r6, [r0, #0]
 8006070:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006074:	b2d9      	uxtb	r1, r3
 8006076:	2909      	cmp	r1, #9
 8006078:	d92a      	bls.n	80060d0 <_strtod_l+0x1b8>
 800607a:	9905      	ldr	r1, [sp, #20]
 800607c:	462a      	mov	r2, r5
 800607e:	f003 fb8a 	bl	8009796 <strncmp>
 8006082:	b398      	cbz	r0, 80060ec <_strtod_l+0x1d4>
 8006084:	2000      	movs	r0, #0
 8006086:	4632      	mov	r2, r6
 8006088:	463d      	mov	r5, r7
 800608a:	9005      	str	r0, [sp, #20]
 800608c:	4603      	mov	r3, r0
 800608e:	2a65      	cmp	r2, #101	; 0x65
 8006090:	d001      	beq.n	8006096 <_strtod_l+0x17e>
 8006092:	2a45      	cmp	r2, #69	; 0x45
 8006094:	d118      	bne.n	80060c8 <_strtod_l+0x1b0>
 8006096:	b91d      	cbnz	r5, 80060a0 <_strtod_l+0x188>
 8006098:	9a04      	ldr	r2, [sp, #16]
 800609a:	4302      	orrs	r2, r0
 800609c:	d09e      	beq.n	8005fdc <_strtod_l+0xc4>
 800609e:	2500      	movs	r5, #0
 80060a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80060a4:	f108 0201 	add.w	r2, r8, #1
 80060a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80060aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80060ae:	2a2b      	cmp	r2, #43	; 0x2b
 80060b0:	d075      	beq.n	800619e <_strtod_l+0x286>
 80060b2:	2a2d      	cmp	r2, #45	; 0x2d
 80060b4:	d07b      	beq.n	80061ae <_strtod_l+0x296>
 80060b6:	f04f 0c00 	mov.w	ip, #0
 80060ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80060be:	2909      	cmp	r1, #9
 80060c0:	f240 8082 	bls.w	80061c8 <_strtod_l+0x2b0>
 80060c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80060c8:	2600      	movs	r6, #0
 80060ca:	e09d      	b.n	8006208 <_strtod_l+0x2f0>
 80060cc:	2300      	movs	r3, #0
 80060ce:	e7c4      	b.n	800605a <_strtod_l+0x142>
 80060d0:	2f08      	cmp	r7, #8
 80060d2:	bfd8      	it	le
 80060d4:	9907      	ldrle	r1, [sp, #28]
 80060d6:	f100 0001 	add.w	r0, r0, #1
 80060da:	bfda      	itte	le
 80060dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80060e0:	9307      	strle	r3, [sp, #28]
 80060e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80060e6:	3701      	adds	r7, #1
 80060e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80060ea:	e7bf      	b.n	800606c <_strtod_l+0x154>
 80060ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060ee:	195a      	adds	r2, r3, r5
 80060f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80060f2:	5d5a      	ldrb	r2, [r3, r5]
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	d037      	beq.n	8006168 <_strtod_l+0x250>
 80060f8:	9005      	str	r0, [sp, #20]
 80060fa:	463d      	mov	r5, r7
 80060fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006100:	2b09      	cmp	r3, #9
 8006102:	d912      	bls.n	800612a <_strtod_l+0x212>
 8006104:	2301      	movs	r3, #1
 8006106:	e7c2      	b.n	800608e <_strtod_l+0x176>
 8006108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	9217      	str	r2, [sp, #92]	; 0x5c
 800610e:	785a      	ldrb	r2, [r3, #1]
 8006110:	3001      	adds	r0, #1
 8006112:	2a30      	cmp	r2, #48	; 0x30
 8006114:	d0f8      	beq.n	8006108 <_strtod_l+0x1f0>
 8006116:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800611a:	2b08      	cmp	r3, #8
 800611c:	f200 84d9 	bhi.w	8006ad2 <_strtod_l+0xbba>
 8006120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006122:	9005      	str	r0, [sp, #20]
 8006124:	2000      	movs	r0, #0
 8006126:	9308      	str	r3, [sp, #32]
 8006128:	4605      	mov	r5, r0
 800612a:	3a30      	subs	r2, #48	; 0x30
 800612c:	f100 0301 	add.w	r3, r0, #1
 8006130:	d014      	beq.n	800615c <_strtod_l+0x244>
 8006132:	9905      	ldr	r1, [sp, #20]
 8006134:	4419      	add	r1, r3
 8006136:	9105      	str	r1, [sp, #20]
 8006138:	462b      	mov	r3, r5
 800613a:	eb00 0e05 	add.w	lr, r0, r5
 800613e:	210a      	movs	r1, #10
 8006140:	4573      	cmp	r3, lr
 8006142:	d113      	bne.n	800616c <_strtod_l+0x254>
 8006144:	182b      	adds	r3, r5, r0
 8006146:	2b08      	cmp	r3, #8
 8006148:	f105 0501 	add.w	r5, r5, #1
 800614c:	4405      	add	r5, r0
 800614e:	dc1c      	bgt.n	800618a <_strtod_l+0x272>
 8006150:	9907      	ldr	r1, [sp, #28]
 8006152:	230a      	movs	r3, #10
 8006154:	fb03 2301 	mla	r3, r3, r1, r2
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	2300      	movs	r3, #0
 800615c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800615e:	1c51      	adds	r1, r2, #1
 8006160:	9117      	str	r1, [sp, #92]	; 0x5c
 8006162:	7852      	ldrb	r2, [r2, #1]
 8006164:	4618      	mov	r0, r3
 8006166:	e7c9      	b.n	80060fc <_strtod_l+0x1e4>
 8006168:	4638      	mov	r0, r7
 800616a:	e7d2      	b.n	8006112 <_strtod_l+0x1fa>
 800616c:	2b08      	cmp	r3, #8
 800616e:	dc04      	bgt.n	800617a <_strtod_l+0x262>
 8006170:	9e07      	ldr	r6, [sp, #28]
 8006172:	434e      	muls	r6, r1
 8006174:	9607      	str	r6, [sp, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	e7e2      	b.n	8006140 <_strtod_l+0x228>
 800617a:	f103 0c01 	add.w	ip, r3, #1
 800617e:	f1bc 0f10 	cmp.w	ip, #16
 8006182:	bfd8      	it	le
 8006184:	fb01 f909 	mulle.w	r9, r1, r9
 8006188:	e7f5      	b.n	8006176 <_strtod_l+0x25e>
 800618a:	2d10      	cmp	r5, #16
 800618c:	bfdc      	itt	le
 800618e:	230a      	movle	r3, #10
 8006190:	fb03 2909 	mlale	r9, r3, r9, r2
 8006194:	e7e1      	b.n	800615a <_strtod_l+0x242>
 8006196:	2300      	movs	r3, #0
 8006198:	9305      	str	r3, [sp, #20]
 800619a:	2301      	movs	r3, #1
 800619c:	e77c      	b.n	8006098 <_strtod_l+0x180>
 800619e:	f04f 0c00 	mov.w	ip, #0
 80061a2:	f108 0202 	add.w	r2, r8, #2
 80061a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80061a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80061ac:	e785      	b.n	80060ba <_strtod_l+0x1a2>
 80061ae:	f04f 0c01 	mov.w	ip, #1
 80061b2:	e7f6      	b.n	80061a2 <_strtod_l+0x28a>
 80061b4:	0800a004 	.word	0x0800a004
 80061b8:	08009d54 	.word	0x08009d54
 80061bc:	7ff00000 	.word	0x7ff00000
 80061c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061c2:	1c51      	adds	r1, r2, #1
 80061c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80061c6:	7852      	ldrb	r2, [r2, #1]
 80061c8:	2a30      	cmp	r2, #48	; 0x30
 80061ca:	d0f9      	beq.n	80061c0 <_strtod_l+0x2a8>
 80061cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80061d0:	2908      	cmp	r1, #8
 80061d2:	f63f af79 	bhi.w	80060c8 <_strtod_l+0x1b0>
 80061d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80061da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061dc:	9206      	str	r2, [sp, #24]
 80061de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061e0:	1c51      	adds	r1, r2, #1
 80061e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80061e4:	7852      	ldrb	r2, [r2, #1]
 80061e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80061ea:	2e09      	cmp	r6, #9
 80061ec:	d937      	bls.n	800625e <_strtod_l+0x346>
 80061ee:	9e06      	ldr	r6, [sp, #24]
 80061f0:	1b89      	subs	r1, r1, r6
 80061f2:	2908      	cmp	r1, #8
 80061f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80061f8:	dc02      	bgt.n	8006200 <_strtod_l+0x2e8>
 80061fa:	4576      	cmp	r6, lr
 80061fc:	bfa8      	it	ge
 80061fe:	4676      	movge	r6, lr
 8006200:	f1bc 0f00 	cmp.w	ip, #0
 8006204:	d000      	beq.n	8006208 <_strtod_l+0x2f0>
 8006206:	4276      	negs	r6, r6
 8006208:	2d00      	cmp	r5, #0
 800620a:	d14d      	bne.n	80062a8 <_strtod_l+0x390>
 800620c:	9904      	ldr	r1, [sp, #16]
 800620e:	4301      	orrs	r1, r0
 8006210:	f47f aec6 	bne.w	8005fa0 <_strtod_l+0x88>
 8006214:	2b00      	cmp	r3, #0
 8006216:	f47f aee1 	bne.w	8005fdc <_strtod_l+0xc4>
 800621a:	2a69      	cmp	r2, #105	; 0x69
 800621c:	d027      	beq.n	800626e <_strtod_l+0x356>
 800621e:	dc24      	bgt.n	800626a <_strtod_l+0x352>
 8006220:	2a49      	cmp	r2, #73	; 0x49
 8006222:	d024      	beq.n	800626e <_strtod_l+0x356>
 8006224:	2a4e      	cmp	r2, #78	; 0x4e
 8006226:	f47f aed9 	bne.w	8005fdc <_strtod_l+0xc4>
 800622a:	499f      	ldr	r1, [pc, #636]	; (80064a8 <_strtod_l+0x590>)
 800622c:	a817      	add	r0, sp, #92	; 0x5c
 800622e:	f002 f8b3 	bl	8008398 <__match>
 8006232:	2800      	cmp	r0, #0
 8006234:	f43f aed2 	beq.w	8005fdc <_strtod_l+0xc4>
 8006238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b28      	cmp	r3, #40	; 0x28
 800623e:	d12d      	bne.n	800629c <_strtod_l+0x384>
 8006240:	499a      	ldr	r1, [pc, #616]	; (80064ac <_strtod_l+0x594>)
 8006242:	aa1a      	add	r2, sp, #104	; 0x68
 8006244:	a817      	add	r0, sp, #92	; 0x5c
 8006246:	f002 f8bb 	bl	80083c0 <__hexnan>
 800624a:	2805      	cmp	r0, #5
 800624c:	d126      	bne.n	800629c <_strtod_l+0x384>
 800624e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006250:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006254:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006258:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800625c:	e6a0      	b.n	8005fa0 <_strtod_l+0x88>
 800625e:	210a      	movs	r1, #10
 8006260:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006264:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006268:	e7b9      	b.n	80061de <_strtod_l+0x2c6>
 800626a:	2a6e      	cmp	r2, #110	; 0x6e
 800626c:	e7db      	b.n	8006226 <_strtod_l+0x30e>
 800626e:	4990      	ldr	r1, [pc, #576]	; (80064b0 <_strtod_l+0x598>)
 8006270:	a817      	add	r0, sp, #92	; 0x5c
 8006272:	f002 f891 	bl	8008398 <__match>
 8006276:	2800      	cmp	r0, #0
 8006278:	f43f aeb0 	beq.w	8005fdc <_strtod_l+0xc4>
 800627c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800627e:	498d      	ldr	r1, [pc, #564]	; (80064b4 <_strtod_l+0x59c>)
 8006280:	3b01      	subs	r3, #1
 8006282:	a817      	add	r0, sp, #92	; 0x5c
 8006284:	9317      	str	r3, [sp, #92]	; 0x5c
 8006286:	f002 f887 	bl	8008398 <__match>
 800628a:	b910      	cbnz	r0, 8006292 <_strtod_l+0x37a>
 800628c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800628e:	3301      	adds	r3, #1
 8006290:	9317      	str	r3, [sp, #92]	; 0x5c
 8006292:	f8df b230 	ldr.w	fp, [pc, #560]	; 80064c4 <_strtod_l+0x5ac>
 8006296:	f04f 0a00 	mov.w	sl, #0
 800629a:	e681      	b.n	8005fa0 <_strtod_l+0x88>
 800629c:	4886      	ldr	r0, [pc, #536]	; (80064b8 <_strtod_l+0x5a0>)
 800629e:	f003 fa1f 	bl	80096e0 <nan>
 80062a2:	ec5b ab10 	vmov	sl, fp, d0
 80062a6:	e67b      	b.n	8005fa0 <_strtod_l+0x88>
 80062a8:	9b05      	ldr	r3, [sp, #20]
 80062aa:	9807      	ldr	r0, [sp, #28]
 80062ac:	1af3      	subs	r3, r6, r3
 80062ae:	2f00      	cmp	r7, #0
 80062b0:	bf08      	it	eq
 80062b2:	462f      	moveq	r7, r5
 80062b4:	2d10      	cmp	r5, #16
 80062b6:	9306      	str	r3, [sp, #24]
 80062b8:	46a8      	mov	r8, r5
 80062ba:	bfa8      	it	ge
 80062bc:	f04f 0810 	movge.w	r8, #16
 80062c0:	f7fa f948 	bl	8000554 <__aeabi_ui2d>
 80062c4:	2d09      	cmp	r5, #9
 80062c6:	4682      	mov	sl, r0
 80062c8:	468b      	mov	fp, r1
 80062ca:	dd13      	ble.n	80062f4 <_strtod_l+0x3dc>
 80062cc:	4b7b      	ldr	r3, [pc, #492]	; (80064bc <_strtod_l+0x5a4>)
 80062ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80062d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062d6:	f7fa f9b7 	bl	8000648 <__aeabi_dmul>
 80062da:	4682      	mov	sl, r0
 80062dc:	4648      	mov	r0, r9
 80062de:	468b      	mov	fp, r1
 80062e0:	f7fa f938 	bl	8000554 <__aeabi_ui2d>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4650      	mov	r0, sl
 80062ea:	4659      	mov	r1, fp
 80062ec:	f7f9 fff6 	bl	80002dc <__adddf3>
 80062f0:	4682      	mov	sl, r0
 80062f2:	468b      	mov	fp, r1
 80062f4:	2d0f      	cmp	r5, #15
 80062f6:	dc38      	bgt.n	800636a <_strtod_l+0x452>
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f43f ae50 	beq.w	8005fa0 <_strtod_l+0x88>
 8006300:	dd24      	ble.n	800634c <_strtod_l+0x434>
 8006302:	2b16      	cmp	r3, #22
 8006304:	dc0b      	bgt.n	800631e <_strtod_l+0x406>
 8006306:	496d      	ldr	r1, [pc, #436]	; (80064bc <_strtod_l+0x5a4>)
 8006308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800630c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006310:	4652      	mov	r2, sl
 8006312:	465b      	mov	r3, fp
 8006314:	f7fa f998 	bl	8000648 <__aeabi_dmul>
 8006318:	4682      	mov	sl, r0
 800631a:	468b      	mov	fp, r1
 800631c:	e640      	b.n	8005fa0 <_strtod_l+0x88>
 800631e:	9a06      	ldr	r2, [sp, #24]
 8006320:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006324:	4293      	cmp	r3, r2
 8006326:	db20      	blt.n	800636a <_strtod_l+0x452>
 8006328:	4c64      	ldr	r4, [pc, #400]	; (80064bc <_strtod_l+0x5a4>)
 800632a:	f1c5 050f 	rsb	r5, r5, #15
 800632e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800633a:	f7fa f985 	bl	8000648 <__aeabi_dmul>
 800633e:	9b06      	ldr	r3, [sp, #24]
 8006340:	1b5d      	subs	r5, r3, r5
 8006342:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006346:	e9d4 2300 	ldrd	r2, r3, [r4]
 800634a:	e7e3      	b.n	8006314 <_strtod_l+0x3fc>
 800634c:	9b06      	ldr	r3, [sp, #24]
 800634e:	3316      	adds	r3, #22
 8006350:	db0b      	blt.n	800636a <_strtod_l+0x452>
 8006352:	9b05      	ldr	r3, [sp, #20]
 8006354:	1b9e      	subs	r6, r3, r6
 8006356:	4b59      	ldr	r3, [pc, #356]	; (80064bc <_strtod_l+0x5a4>)
 8006358:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800635c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	f7fa fa9a 	bl	800089c <__aeabi_ddiv>
 8006368:	e7d6      	b.n	8006318 <_strtod_l+0x400>
 800636a:	9b06      	ldr	r3, [sp, #24]
 800636c:	eba5 0808 	sub.w	r8, r5, r8
 8006370:	4498      	add	r8, r3
 8006372:	f1b8 0f00 	cmp.w	r8, #0
 8006376:	dd74      	ble.n	8006462 <_strtod_l+0x54a>
 8006378:	f018 030f 	ands.w	r3, r8, #15
 800637c:	d00a      	beq.n	8006394 <_strtod_l+0x47c>
 800637e:	494f      	ldr	r1, [pc, #316]	; (80064bc <_strtod_l+0x5a4>)
 8006380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800638c:	f7fa f95c 	bl	8000648 <__aeabi_dmul>
 8006390:	4682      	mov	sl, r0
 8006392:	468b      	mov	fp, r1
 8006394:	f038 080f 	bics.w	r8, r8, #15
 8006398:	d04f      	beq.n	800643a <_strtod_l+0x522>
 800639a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800639e:	dd22      	ble.n	80063e6 <_strtod_l+0x4ce>
 80063a0:	2500      	movs	r5, #0
 80063a2:	462e      	mov	r6, r5
 80063a4:	9507      	str	r5, [sp, #28]
 80063a6:	9505      	str	r5, [sp, #20]
 80063a8:	2322      	movs	r3, #34	; 0x22
 80063aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80064c4 <_strtod_l+0x5ac>
 80063ae:	6023      	str	r3, [r4, #0]
 80063b0:	f04f 0a00 	mov.w	sl, #0
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f43f adf2 	beq.w	8005fa0 <_strtod_l+0x88>
 80063bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063be:	4620      	mov	r0, r4
 80063c0:	f002 f960 	bl	8008684 <_Bfree>
 80063c4:	9905      	ldr	r1, [sp, #20]
 80063c6:	4620      	mov	r0, r4
 80063c8:	f002 f95c 	bl	8008684 <_Bfree>
 80063cc:	4631      	mov	r1, r6
 80063ce:	4620      	mov	r0, r4
 80063d0:	f002 f958 	bl	8008684 <_Bfree>
 80063d4:	9907      	ldr	r1, [sp, #28]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f002 f954 	bl	8008684 <_Bfree>
 80063dc:	4629      	mov	r1, r5
 80063de:	4620      	mov	r0, r4
 80063e0:	f002 f950 	bl	8008684 <_Bfree>
 80063e4:	e5dc      	b.n	8005fa0 <_strtod_l+0x88>
 80063e6:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <_strtod_l+0x5a8>)
 80063e8:	9304      	str	r3, [sp, #16]
 80063ea:	2300      	movs	r3, #0
 80063ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	4699      	mov	r9, r3
 80063f6:	f1b8 0f01 	cmp.w	r8, #1
 80063fa:	dc21      	bgt.n	8006440 <_strtod_l+0x528>
 80063fc:	b10b      	cbz	r3, 8006402 <_strtod_l+0x4ea>
 80063fe:	4682      	mov	sl, r0
 8006400:	468b      	mov	fp, r1
 8006402:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <_strtod_l+0x5a8>)
 8006404:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006408:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800640c:	4652      	mov	r2, sl
 800640e:	465b      	mov	r3, fp
 8006410:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006414:	f7fa f918 	bl	8000648 <__aeabi_dmul>
 8006418:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <_strtod_l+0x5ac>)
 800641a:	460a      	mov	r2, r1
 800641c:	400b      	ands	r3, r1
 800641e:	492a      	ldr	r1, [pc, #168]	; (80064c8 <_strtod_l+0x5b0>)
 8006420:	428b      	cmp	r3, r1
 8006422:	4682      	mov	sl, r0
 8006424:	d8bc      	bhi.n	80063a0 <_strtod_l+0x488>
 8006426:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800642a:	428b      	cmp	r3, r1
 800642c:	bf86      	itte	hi
 800642e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80064cc <_strtod_l+0x5b4>
 8006432:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8006436:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800643a:	2300      	movs	r3, #0
 800643c:	9304      	str	r3, [sp, #16]
 800643e:	e084      	b.n	800654a <_strtod_l+0x632>
 8006440:	f018 0f01 	tst.w	r8, #1
 8006444:	d005      	beq.n	8006452 <_strtod_l+0x53a>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fa f8fc 	bl	8000648 <__aeabi_dmul>
 8006450:	2301      	movs	r3, #1
 8006452:	9a04      	ldr	r2, [sp, #16]
 8006454:	3208      	adds	r2, #8
 8006456:	f109 0901 	add.w	r9, r9, #1
 800645a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800645e:	9204      	str	r2, [sp, #16]
 8006460:	e7c9      	b.n	80063f6 <_strtod_l+0x4de>
 8006462:	d0ea      	beq.n	800643a <_strtod_l+0x522>
 8006464:	f1c8 0800 	rsb	r8, r8, #0
 8006468:	f018 020f 	ands.w	r2, r8, #15
 800646c:	d00a      	beq.n	8006484 <_strtod_l+0x56c>
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <_strtod_l+0x5a4>)
 8006470:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006474:	4650      	mov	r0, sl
 8006476:	4659      	mov	r1, fp
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7fa fa0e 	bl	800089c <__aeabi_ddiv>
 8006480:	4682      	mov	sl, r0
 8006482:	468b      	mov	fp, r1
 8006484:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006488:	d0d7      	beq.n	800643a <_strtod_l+0x522>
 800648a:	f1b8 0f1f 	cmp.w	r8, #31
 800648e:	dd1f      	ble.n	80064d0 <_strtod_l+0x5b8>
 8006490:	2500      	movs	r5, #0
 8006492:	462e      	mov	r6, r5
 8006494:	9507      	str	r5, [sp, #28]
 8006496:	9505      	str	r5, [sp, #20]
 8006498:	2322      	movs	r3, #34	; 0x22
 800649a:	f04f 0a00 	mov.w	sl, #0
 800649e:	f04f 0b00 	mov.w	fp, #0
 80064a2:	6023      	str	r3, [r4, #0]
 80064a4:	e786      	b.n	80063b4 <_strtod_l+0x49c>
 80064a6:	bf00      	nop
 80064a8:	08009d25 	.word	0x08009d25
 80064ac:	08009d68 	.word	0x08009d68
 80064b0:	08009d1d 	.word	0x08009d1d
 80064b4:	08009eac 	.word	0x08009eac
 80064b8:	0800a1c0 	.word	0x0800a1c0
 80064bc:	0800a0a0 	.word	0x0800a0a0
 80064c0:	0800a078 	.word	0x0800a078
 80064c4:	7ff00000 	.word	0x7ff00000
 80064c8:	7ca00000 	.word	0x7ca00000
 80064cc:	7fefffff 	.word	0x7fefffff
 80064d0:	f018 0310 	ands.w	r3, r8, #16
 80064d4:	bf18      	it	ne
 80064d6:	236a      	movne	r3, #106	; 0x6a
 80064d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006888 <_strtod_l+0x970>
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	4650      	mov	r0, sl
 80064e0:	4659      	mov	r1, fp
 80064e2:	2300      	movs	r3, #0
 80064e4:	f018 0f01 	tst.w	r8, #1
 80064e8:	d004      	beq.n	80064f4 <_strtod_l+0x5dc>
 80064ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064ee:	f7fa f8ab 	bl	8000648 <__aeabi_dmul>
 80064f2:	2301      	movs	r3, #1
 80064f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80064f8:	f109 0908 	add.w	r9, r9, #8
 80064fc:	d1f2      	bne.n	80064e4 <_strtod_l+0x5cc>
 80064fe:	b10b      	cbz	r3, 8006504 <_strtod_l+0x5ec>
 8006500:	4682      	mov	sl, r0
 8006502:	468b      	mov	fp, r1
 8006504:	9b04      	ldr	r3, [sp, #16]
 8006506:	b1c3      	cbz	r3, 800653a <_strtod_l+0x622>
 8006508:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800650c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006510:	2b00      	cmp	r3, #0
 8006512:	4659      	mov	r1, fp
 8006514:	dd11      	ble.n	800653a <_strtod_l+0x622>
 8006516:	2b1f      	cmp	r3, #31
 8006518:	f340 8124 	ble.w	8006764 <_strtod_l+0x84c>
 800651c:	2b34      	cmp	r3, #52	; 0x34
 800651e:	bfde      	ittt	le
 8006520:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006524:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8006528:	fa03 f202 	lslle.w	r2, r3, r2
 800652c:	f04f 0a00 	mov.w	sl, #0
 8006530:	bfcc      	ite	gt
 8006532:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006536:	ea02 0b01 	andle.w	fp, r2, r1
 800653a:	2200      	movs	r2, #0
 800653c:	2300      	movs	r3, #0
 800653e:	4650      	mov	r0, sl
 8006540:	4659      	mov	r1, fp
 8006542:	f7fa fae9 	bl	8000b18 <__aeabi_dcmpeq>
 8006546:	2800      	cmp	r0, #0
 8006548:	d1a2      	bne.n	8006490 <_strtod_l+0x578>
 800654a:	9b07      	ldr	r3, [sp, #28]
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	9908      	ldr	r1, [sp, #32]
 8006550:	462b      	mov	r3, r5
 8006552:	463a      	mov	r2, r7
 8006554:	4620      	mov	r0, r4
 8006556:	f002 f8fd 	bl	8008754 <__s2b>
 800655a:	9007      	str	r0, [sp, #28]
 800655c:	2800      	cmp	r0, #0
 800655e:	f43f af1f 	beq.w	80063a0 <_strtod_l+0x488>
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	1b9e      	subs	r6, r3, r6
 8006566:	9b06      	ldr	r3, [sp, #24]
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfb4      	ite	lt
 800656c:	4633      	movlt	r3, r6
 800656e:	2300      	movge	r3, #0
 8006570:	930c      	str	r3, [sp, #48]	; 0x30
 8006572:	9b06      	ldr	r3, [sp, #24]
 8006574:	2500      	movs	r5, #0
 8006576:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800657a:	9312      	str	r3, [sp, #72]	; 0x48
 800657c:	462e      	mov	r6, r5
 800657e:	9b07      	ldr	r3, [sp, #28]
 8006580:	4620      	mov	r0, r4
 8006582:	6859      	ldr	r1, [r3, #4]
 8006584:	f002 f83e 	bl	8008604 <_Balloc>
 8006588:	9005      	str	r0, [sp, #20]
 800658a:	2800      	cmp	r0, #0
 800658c:	f43f af0c 	beq.w	80063a8 <_strtod_l+0x490>
 8006590:	9b07      	ldr	r3, [sp, #28]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	3202      	adds	r2, #2
 8006596:	f103 010c 	add.w	r1, r3, #12
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	300c      	adds	r0, #12
 800659e:	f7fe fd5b 	bl	8005058 <memcpy>
 80065a2:	ec4b ab10 	vmov	d0, sl, fp
 80065a6:	aa1a      	add	r2, sp, #104	; 0x68
 80065a8:	a919      	add	r1, sp, #100	; 0x64
 80065aa:	4620      	mov	r0, r4
 80065ac:	f002 fc18 	bl	8008de0 <__d2b>
 80065b0:	ec4b ab18 	vmov	d8, sl, fp
 80065b4:	9018      	str	r0, [sp, #96]	; 0x60
 80065b6:	2800      	cmp	r0, #0
 80065b8:	f43f aef6 	beq.w	80063a8 <_strtod_l+0x490>
 80065bc:	2101      	movs	r1, #1
 80065be:	4620      	mov	r0, r4
 80065c0:	f002 f962 	bl	8008888 <__i2b>
 80065c4:	4606      	mov	r6, r0
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f aeee 	beq.w	80063a8 <_strtod_l+0x490>
 80065cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065ce:	9904      	ldr	r1, [sp, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	bfab      	itete	ge
 80065d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80065d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80065d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80065da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80065de:	bfac      	ite	ge
 80065e0:	eb03 0902 	addge.w	r9, r3, r2
 80065e4:	1ad7      	sublt	r7, r2, r3
 80065e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80065e8:	eba3 0801 	sub.w	r8, r3, r1
 80065ec:	4490      	add	r8, r2
 80065ee:	4ba1      	ldr	r3, [pc, #644]	; (8006874 <_strtod_l+0x95c>)
 80065f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80065f4:	4598      	cmp	r8, r3
 80065f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80065fa:	f280 80c7 	bge.w	800678c <_strtod_l+0x874>
 80065fe:	eba3 0308 	sub.w	r3, r3, r8
 8006602:	2b1f      	cmp	r3, #31
 8006604:	eba2 0203 	sub.w	r2, r2, r3
 8006608:	f04f 0101 	mov.w	r1, #1
 800660c:	f300 80b1 	bgt.w	8006772 <_strtod_l+0x85a>
 8006610:	fa01 f303 	lsl.w	r3, r1, r3
 8006614:	930d      	str	r3, [sp, #52]	; 0x34
 8006616:	2300      	movs	r3, #0
 8006618:	9308      	str	r3, [sp, #32]
 800661a:	eb09 0802 	add.w	r8, r9, r2
 800661e:	9b04      	ldr	r3, [sp, #16]
 8006620:	45c1      	cmp	r9, r8
 8006622:	4417      	add	r7, r2
 8006624:	441f      	add	r7, r3
 8006626:	464b      	mov	r3, r9
 8006628:	bfa8      	it	ge
 800662a:	4643      	movge	r3, r8
 800662c:	42bb      	cmp	r3, r7
 800662e:	bfa8      	it	ge
 8006630:	463b      	movge	r3, r7
 8006632:	2b00      	cmp	r3, #0
 8006634:	bfc2      	ittt	gt
 8006636:	eba8 0803 	subgt.w	r8, r8, r3
 800663a:	1aff      	subgt	r7, r7, r3
 800663c:	eba9 0903 	subgt.w	r9, r9, r3
 8006640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006642:	2b00      	cmp	r3, #0
 8006644:	dd17      	ble.n	8006676 <_strtod_l+0x75e>
 8006646:	4631      	mov	r1, r6
 8006648:	461a      	mov	r2, r3
 800664a:	4620      	mov	r0, r4
 800664c:	f002 f9dc 	bl	8008a08 <__pow5mult>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	f43f aea8 	beq.w	80063a8 <_strtod_l+0x490>
 8006658:	4601      	mov	r1, r0
 800665a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800665c:	4620      	mov	r0, r4
 800665e:	f002 f929 	bl	80088b4 <__multiply>
 8006662:	900b      	str	r0, [sp, #44]	; 0x2c
 8006664:	2800      	cmp	r0, #0
 8006666:	f43f ae9f 	beq.w	80063a8 <_strtod_l+0x490>
 800666a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800666c:	4620      	mov	r0, r4
 800666e:	f002 f809 	bl	8008684 <_Bfree>
 8006672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006674:	9318      	str	r3, [sp, #96]	; 0x60
 8006676:	f1b8 0f00 	cmp.w	r8, #0
 800667a:	f300 808c 	bgt.w	8006796 <_strtod_l+0x87e>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dd08      	ble.n	8006696 <_strtod_l+0x77e>
 8006684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006686:	9905      	ldr	r1, [sp, #20]
 8006688:	4620      	mov	r0, r4
 800668a:	f002 f9bd 	bl	8008a08 <__pow5mult>
 800668e:	9005      	str	r0, [sp, #20]
 8006690:	2800      	cmp	r0, #0
 8006692:	f43f ae89 	beq.w	80063a8 <_strtod_l+0x490>
 8006696:	2f00      	cmp	r7, #0
 8006698:	dd08      	ble.n	80066ac <_strtod_l+0x794>
 800669a:	9905      	ldr	r1, [sp, #20]
 800669c:	463a      	mov	r2, r7
 800669e:	4620      	mov	r0, r4
 80066a0:	f002 fa0c 	bl	8008abc <__lshift>
 80066a4:	9005      	str	r0, [sp, #20]
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f43f ae7e 	beq.w	80063a8 <_strtod_l+0x490>
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	dd08      	ble.n	80066c4 <_strtod_l+0x7ac>
 80066b2:	4631      	mov	r1, r6
 80066b4:	464a      	mov	r2, r9
 80066b6:	4620      	mov	r0, r4
 80066b8:	f002 fa00 	bl	8008abc <__lshift>
 80066bc:	4606      	mov	r6, r0
 80066be:	2800      	cmp	r0, #0
 80066c0:	f43f ae72 	beq.w	80063a8 <_strtod_l+0x490>
 80066c4:	9a05      	ldr	r2, [sp, #20]
 80066c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c8:	4620      	mov	r0, r4
 80066ca:	f002 fa83 	bl	8008bd4 <__mdiff>
 80066ce:	4605      	mov	r5, r0
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f43f ae69 	beq.w	80063a8 <_strtod_l+0x490>
 80066d6:	68c3      	ldr	r3, [r0, #12]
 80066d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066da:	2300      	movs	r3, #0
 80066dc:	60c3      	str	r3, [r0, #12]
 80066de:	4631      	mov	r1, r6
 80066e0:	f002 fa5c 	bl	8008b9c <__mcmp>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	da60      	bge.n	80067aa <_strtod_l+0x892>
 80066e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ea:	ea53 030a 	orrs.w	r3, r3, sl
 80066ee:	f040 8082 	bne.w	80067f6 <_strtod_l+0x8de>
 80066f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d17d      	bne.n	80067f6 <_strtod_l+0x8de>
 80066fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066fe:	0d1b      	lsrs	r3, r3, #20
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006706:	d976      	bls.n	80067f6 <_strtod_l+0x8de>
 8006708:	696b      	ldr	r3, [r5, #20]
 800670a:	b913      	cbnz	r3, 8006712 <_strtod_l+0x7fa>
 800670c:	692b      	ldr	r3, [r5, #16]
 800670e:	2b01      	cmp	r3, #1
 8006710:	dd71      	ble.n	80067f6 <_strtod_l+0x8de>
 8006712:	4629      	mov	r1, r5
 8006714:	2201      	movs	r2, #1
 8006716:	4620      	mov	r0, r4
 8006718:	f002 f9d0 	bl	8008abc <__lshift>
 800671c:	4631      	mov	r1, r6
 800671e:	4605      	mov	r5, r0
 8006720:	f002 fa3c 	bl	8008b9c <__mcmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	dd66      	ble.n	80067f6 <_strtod_l+0x8de>
 8006728:	9904      	ldr	r1, [sp, #16]
 800672a:	4a53      	ldr	r2, [pc, #332]	; (8006878 <_strtod_l+0x960>)
 800672c:	465b      	mov	r3, fp
 800672e:	2900      	cmp	r1, #0
 8006730:	f000 8081 	beq.w	8006836 <_strtod_l+0x91e>
 8006734:	ea02 010b 	and.w	r1, r2, fp
 8006738:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800673c:	dc7b      	bgt.n	8006836 <_strtod_l+0x91e>
 800673e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006742:	f77f aea9 	ble.w	8006498 <_strtod_l+0x580>
 8006746:	4b4d      	ldr	r3, [pc, #308]	; (800687c <_strtod_l+0x964>)
 8006748:	4650      	mov	r0, sl
 800674a:	4659      	mov	r1, fp
 800674c:	2200      	movs	r2, #0
 800674e:	f7f9 ff7b 	bl	8000648 <__aeabi_dmul>
 8006752:	460b      	mov	r3, r1
 8006754:	4303      	orrs	r3, r0
 8006756:	bf08      	it	eq
 8006758:	2322      	moveq	r3, #34	; 0x22
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	bf08      	it	eq
 8006760:	6023      	streq	r3, [r4, #0]
 8006762:	e62b      	b.n	80063bc <_strtod_l+0x4a4>
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	ea03 0a0a 	and.w	sl, r3, sl
 8006770:	e6e3      	b.n	800653a <_strtod_l+0x622>
 8006772:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006776:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800677a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800677e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006782:	fa01 f308 	lsl.w	r3, r1, r8
 8006786:	9308      	str	r3, [sp, #32]
 8006788:	910d      	str	r1, [sp, #52]	; 0x34
 800678a:	e746      	b.n	800661a <_strtod_l+0x702>
 800678c:	2300      	movs	r3, #0
 800678e:	9308      	str	r3, [sp, #32]
 8006790:	2301      	movs	r3, #1
 8006792:	930d      	str	r3, [sp, #52]	; 0x34
 8006794:	e741      	b.n	800661a <_strtod_l+0x702>
 8006796:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006798:	4642      	mov	r2, r8
 800679a:	4620      	mov	r0, r4
 800679c:	f002 f98e 	bl	8008abc <__lshift>
 80067a0:	9018      	str	r0, [sp, #96]	; 0x60
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f47f af6b 	bne.w	800667e <_strtod_l+0x766>
 80067a8:	e5fe      	b.n	80063a8 <_strtod_l+0x490>
 80067aa:	465f      	mov	r7, fp
 80067ac:	d16e      	bne.n	800688c <_strtod_l+0x974>
 80067ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80067b4:	b342      	cbz	r2, 8006808 <_strtod_l+0x8f0>
 80067b6:	4a32      	ldr	r2, [pc, #200]	; (8006880 <_strtod_l+0x968>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d128      	bne.n	800680e <_strtod_l+0x8f6>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	4651      	mov	r1, sl
 80067c0:	b1eb      	cbz	r3, 80067fe <_strtod_l+0x8e6>
 80067c2:	4b2d      	ldr	r3, [pc, #180]	; (8006878 <_strtod_l+0x960>)
 80067c4:	403b      	ands	r3, r7
 80067c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80067ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067ce:	d819      	bhi.n	8006804 <_strtod_l+0x8ec>
 80067d0:	0d1b      	lsrs	r3, r3, #20
 80067d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	4299      	cmp	r1, r3
 80067dc:	d117      	bne.n	800680e <_strtod_l+0x8f6>
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <_strtod_l+0x96c>)
 80067e0:	429f      	cmp	r7, r3
 80067e2:	d102      	bne.n	80067ea <_strtod_l+0x8d2>
 80067e4:	3101      	adds	r1, #1
 80067e6:	f43f addf 	beq.w	80063a8 <_strtod_l+0x490>
 80067ea:	4b23      	ldr	r3, [pc, #140]	; (8006878 <_strtod_l+0x960>)
 80067ec:	403b      	ands	r3, r7
 80067ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80067f2:	f04f 0a00 	mov.w	sl, #0
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1a4      	bne.n	8006746 <_strtod_l+0x82e>
 80067fc:	e5de      	b.n	80063bc <_strtod_l+0x4a4>
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006802:	e7ea      	b.n	80067da <_strtod_l+0x8c2>
 8006804:	4613      	mov	r3, r2
 8006806:	e7e8      	b.n	80067da <_strtod_l+0x8c2>
 8006808:	ea53 030a 	orrs.w	r3, r3, sl
 800680c:	d08c      	beq.n	8006728 <_strtod_l+0x810>
 800680e:	9b08      	ldr	r3, [sp, #32]
 8006810:	b1db      	cbz	r3, 800684a <_strtod_l+0x932>
 8006812:	423b      	tst	r3, r7
 8006814:	d0ef      	beq.n	80067f6 <_strtod_l+0x8de>
 8006816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006818:	9a04      	ldr	r2, [sp, #16]
 800681a:	4650      	mov	r0, sl
 800681c:	4659      	mov	r1, fp
 800681e:	b1c3      	cbz	r3, 8006852 <_strtod_l+0x93a>
 8006820:	f7ff fb5e 	bl	8005ee0 <sulp>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	ec51 0b18 	vmov	r0, r1, d8
 800682c:	f7f9 fd56 	bl	80002dc <__adddf3>
 8006830:	4682      	mov	sl, r0
 8006832:	468b      	mov	fp, r1
 8006834:	e7df      	b.n	80067f6 <_strtod_l+0x8de>
 8006836:	4013      	ands	r3, r2
 8006838:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800683c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006840:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006844:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006848:	e7d5      	b.n	80067f6 <_strtod_l+0x8de>
 800684a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800684c:	ea13 0f0a 	tst.w	r3, sl
 8006850:	e7e0      	b.n	8006814 <_strtod_l+0x8fc>
 8006852:	f7ff fb45 	bl	8005ee0 <sulp>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	ec51 0b18 	vmov	r0, r1, d8
 800685e:	f7f9 fd3b 	bl	80002d8 <__aeabi_dsub>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	f7fa f955 	bl	8000b18 <__aeabi_dcmpeq>
 800686e:	2800      	cmp	r0, #0
 8006870:	d0c1      	beq.n	80067f6 <_strtod_l+0x8de>
 8006872:	e611      	b.n	8006498 <_strtod_l+0x580>
 8006874:	fffffc02 	.word	0xfffffc02
 8006878:	7ff00000 	.word	0x7ff00000
 800687c:	39500000 	.word	0x39500000
 8006880:	000fffff 	.word	0x000fffff
 8006884:	7fefffff 	.word	0x7fefffff
 8006888:	08009d80 	.word	0x08009d80
 800688c:	4631      	mov	r1, r6
 800688e:	4628      	mov	r0, r5
 8006890:	f002 fb02 	bl	8008e98 <__ratio>
 8006894:	ec59 8b10 	vmov	r8, r9, d0
 8006898:	ee10 0a10 	vmov	r0, s0
 800689c:	2200      	movs	r2, #0
 800689e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f94c 	bl	8000b40 <__aeabi_dcmple>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d07a      	beq.n	80069a2 <_strtod_l+0xa8a>
 80068ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d04a      	beq.n	8006948 <_strtod_l+0xa30>
 80068b2:	4b95      	ldr	r3, [pc, #596]	; (8006b08 <_strtod_l+0xbf0>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b08 <_strtod_l+0xbf0>
 80068be:	f04f 0800 	mov.w	r8, #0
 80068c2:	4b92      	ldr	r3, [pc, #584]	; (8006b0c <_strtod_l+0xbf4>)
 80068c4:	403b      	ands	r3, r7
 80068c6:	930d      	str	r3, [sp, #52]	; 0x34
 80068c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068ca:	4b91      	ldr	r3, [pc, #580]	; (8006b10 <_strtod_l+0xbf8>)
 80068cc:	429a      	cmp	r2, r3
 80068ce:	f040 80b0 	bne.w	8006a32 <_strtod_l+0xb1a>
 80068d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80068da:	ec4b ab10 	vmov	d0, sl, fp
 80068de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80068e2:	f002 fa01 	bl	8008ce8 <__ulp>
 80068e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80068ea:	ec53 2b10 	vmov	r2, r3, d0
 80068ee:	f7f9 feab 	bl	8000648 <__aeabi_dmul>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7f9 fcf1 	bl	80002dc <__adddf3>
 80068fa:	460b      	mov	r3, r1
 80068fc:	4983      	ldr	r1, [pc, #524]	; (8006b0c <_strtod_l+0xbf4>)
 80068fe:	4a85      	ldr	r2, [pc, #532]	; (8006b14 <_strtod_l+0xbfc>)
 8006900:	4019      	ands	r1, r3
 8006902:	4291      	cmp	r1, r2
 8006904:	4682      	mov	sl, r0
 8006906:	d960      	bls.n	80069ca <_strtod_l+0xab2>
 8006908:	ee18 3a90 	vmov	r3, s17
 800690c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006910:	4293      	cmp	r3, r2
 8006912:	d104      	bne.n	800691e <_strtod_l+0xa06>
 8006914:	ee18 3a10 	vmov	r3, s16
 8006918:	3301      	adds	r3, #1
 800691a:	f43f ad45 	beq.w	80063a8 <_strtod_l+0x490>
 800691e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006b20 <_strtod_l+0xc08>
 8006922:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006926:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006928:	4620      	mov	r0, r4
 800692a:	f001 feab 	bl	8008684 <_Bfree>
 800692e:	9905      	ldr	r1, [sp, #20]
 8006930:	4620      	mov	r0, r4
 8006932:	f001 fea7 	bl	8008684 <_Bfree>
 8006936:	4631      	mov	r1, r6
 8006938:	4620      	mov	r0, r4
 800693a:	f001 fea3 	bl	8008684 <_Bfree>
 800693e:	4629      	mov	r1, r5
 8006940:	4620      	mov	r0, r4
 8006942:	f001 fe9f 	bl	8008684 <_Bfree>
 8006946:	e61a      	b.n	800657e <_strtod_l+0x666>
 8006948:	f1ba 0f00 	cmp.w	sl, #0
 800694c:	d11b      	bne.n	8006986 <_strtod_l+0xa6e>
 800694e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006952:	b9f3      	cbnz	r3, 8006992 <_strtod_l+0xa7a>
 8006954:	4b6c      	ldr	r3, [pc, #432]	; (8006b08 <_strtod_l+0xbf0>)
 8006956:	2200      	movs	r2, #0
 8006958:	4640      	mov	r0, r8
 800695a:	4649      	mov	r1, r9
 800695c:	f7fa f8e6 	bl	8000b2c <__aeabi_dcmplt>
 8006960:	b9d0      	cbnz	r0, 8006998 <_strtod_l+0xa80>
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	4b6c      	ldr	r3, [pc, #432]	; (8006b18 <_strtod_l+0xc00>)
 8006968:	2200      	movs	r2, #0
 800696a:	f7f9 fe6d 	bl	8000648 <__aeabi_dmul>
 800696e:	4680      	mov	r8, r0
 8006970:	4689      	mov	r9, r1
 8006972:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006976:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800697a:	9315      	str	r3, [sp, #84]	; 0x54
 800697c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006980:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006984:	e79d      	b.n	80068c2 <_strtod_l+0x9aa>
 8006986:	f1ba 0f01 	cmp.w	sl, #1
 800698a:	d102      	bne.n	8006992 <_strtod_l+0xa7a>
 800698c:	2f00      	cmp	r7, #0
 800698e:	f43f ad83 	beq.w	8006498 <_strtod_l+0x580>
 8006992:	4b62      	ldr	r3, [pc, #392]	; (8006b1c <_strtod_l+0xc04>)
 8006994:	2200      	movs	r2, #0
 8006996:	e78e      	b.n	80068b6 <_strtod_l+0x99e>
 8006998:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006b18 <_strtod_l+0xc00>
 800699c:	f04f 0800 	mov.w	r8, #0
 80069a0:	e7e7      	b.n	8006972 <_strtod_l+0xa5a>
 80069a2:	4b5d      	ldr	r3, [pc, #372]	; (8006b18 <_strtod_l+0xc00>)
 80069a4:	4640      	mov	r0, r8
 80069a6:	4649      	mov	r1, r9
 80069a8:	2200      	movs	r2, #0
 80069aa:	f7f9 fe4d 	bl	8000648 <__aeabi_dmul>
 80069ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069b0:	4680      	mov	r8, r0
 80069b2:	4689      	mov	r9, r1
 80069b4:	b933      	cbnz	r3, 80069c4 <_strtod_l+0xaac>
 80069b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ba:	900e      	str	r0, [sp, #56]	; 0x38
 80069bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80069be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80069c2:	e7dd      	b.n	8006980 <_strtod_l+0xa68>
 80069c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80069c8:	e7f9      	b.n	80069be <_strtod_l+0xaa6>
 80069ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1a8      	bne.n	8006926 <_strtod_l+0xa0e>
 80069d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80069d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069da:	0d1b      	lsrs	r3, r3, #20
 80069dc:	051b      	lsls	r3, r3, #20
 80069de:	429a      	cmp	r2, r3
 80069e0:	d1a1      	bne.n	8006926 <_strtod_l+0xa0e>
 80069e2:	4640      	mov	r0, r8
 80069e4:	4649      	mov	r1, r9
 80069e6:	f7fa f98f 	bl	8000d08 <__aeabi_d2lz>
 80069ea:	f7f9 fdff 	bl	80005ec <__aeabi_l2d>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4640      	mov	r0, r8
 80069f4:	4649      	mov	r1, r9
 80069f6:	f7f9 fc6f 	bl	80002d8 <__aeabi_dsub>
 80069fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a00:	ea43 030a 	orr.w	r3, r3, sl
 8006a04:	4313      	orrs	r3, r2
 8006a06:	4680      	mov	r8, r0
 8006a08:	4689      	mov	r9, r1
 8006a0a:	d055      	beq.n	8006ab8 <_strtod_l+0xba0>
 8006a0c:	a336      	add	r3, pc, #216	; (adr r3, 8006ae8 <_strtod_l+0xbd0>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7fa f88b 	bl	8000b2c <__aeabi_dcmplt>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f47f acd0 	bne.w	80063bc <_strtod_l+0x4a4>
 8006a1c:	a334      	add	r3, pc, #208	; (adr r3, 8006af0 <_strtod_l+0xbd8>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7fa f89f 	bl	8000b68 <__aeabi_dcmpgt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	f43f af7b 	beq.w	8006926 <_strtod_l+0xa0e>
 8006a30:	e4c4      	b.n	80063bc <_strtod_l+0x4a4>
 8006a32:	9b04      	ldr	r3, [sp, #16]
 8006a34:	b333      	cbz	r3, 8006a84 <_strtod_l+0xb6c>
 8006a36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a3c:	d822      	bhi.n	8006a84 <_strtod_l+0xb6c>
 8006a3e:	a32e      	add	r3, pc, #184	; (adr r3, 8006af8 <_strtod_l+0xbe0>)
 8006a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	f7fa f87a 	bl	8000b40 <__aeabi_dcmple>
 8006a4c:	b1a0      	cbz	r0, 8006a78 <_strtod_l+0xb60>
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	f7fa f8d1 	bl	8000bf8 <__aeabi_d2uiz>
 8006a56:	2801      	cmp	r0, #1
 8006a58:	bf38      	it	cc
 8006a5a:	2001      	movcc	r0, #1
 8006a5c:	f7f9 fd7a 	bl	8000554 <__aeabi_ui2d>
 8006a60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a62:	4680      	mov	r8, r0
 8006a64:	4689      	mov	r9, r1
 8006a66:	bb23      	cbnz	r3, 8006ab2 <_strtod_l+0xb9a>
 8006a68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a6c:	9010      	str	r0, [sp, #64]	; 0x40
 8006a6e:	9311      	str	r3, [sp, #68]	; 0x44
 8006a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a80:	1a9b      	subs	r3, r3, r2
 8006a82:	9309      	str	r3, [sp, #36]	; 0x24
 8006a84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a88:	eeb0 0a48 	vmov.f32	s0, s16
 8006a8c:	eef0 0a68 	vmov.f32	s1, s17
 8006a90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006a94:	f002 f928 	bl	8008ce8 <__ulp>
 8006a98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006a9c:	ec53 2b10 	vmov	r2, r3, d0
 8006aa0:	f7f9 fdd2 	bl	8000648 <__aeabi_dmul>
 8006aa4:	ec53 2b18 	vmov	r2, r3, d8
 8006aa8:	f7f9 fc18 	bl	80002dc <__adddf3>
 8006aac:	4682      	mov	sl, r0
 8006aae:	468b      	mov	fp, r1
 8006ab0:	e78d      	b.n	80069ce <_strtod_l+0xab6>
 8006ab2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006ab6:	e7db      	b.n	8006a70 <_strtod_l+0xb58>
 8006ab8:	a311      	add	r3, pc, #68	; (adr r3, 8006b00 <_strtod_l+0xbe8>)
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	f7fa f835 	bl	8000b2c <__aeabi_dcmplt>
 8006ac2:	e7b2      	b.n	8006a2a <_strtod_l+0xb12>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006aca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	f7ff ba6b 	b.w	8005fa8 <_strtod_l+0x90>
 8006ad2:	2a65      	cmp	r2, #101	; 0x65
 8006ad4:	f43f ab5f 	beq.w	8006196 <_strtod_l+0x27e>
 8006ad8:	2a45      	cmp	r2, #69	; 0x45
 8006ada:	f43f ab5c 	beq.w	8006196 <_strtod_l+0x27e>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f7ff bb94 	b.w	800620c <_strtod_l+0x2f4>
 8006ae4:	f3af 8000 	nop.w
 8006ae8:	94a03595 	.word	0x94a03595
 8006aec:	3fdfffff 	.word	0x3fdfffff
 8006af0:	35afe535 	.word	0x35afe535
 8006af4:	3fe00000 	.word	0x3fe00000
 8006af8:	ffc00000 	.word	0xffc00000
 8006afc:	41dfffff 	.word	0x41dfffff
 8006b00:	94a03595 	.word	0x94a03595
 8006b04:	3fcfffff 	.word	0x3fcfffff
 8006b08:	3ff00000 	.word	0x3ff00000
 8006b0c:	7ff00000 	.word	0x7ff00000
 8006b10:	7fe00000 	.word	0x7fe00000
 8006b14:	7c9fffff 	.word	0x7c9fffff
 8006b18:	3fe00000 	.word	0x3fe00000
 8006b1c:	bff00000 	.word	0xbff00000
 8006b20:	7fefffff 	.word	0x7fefffff

08006b24 <_strtod_r>:
 8006b24:	4b01      	ldr	r3, [pc, #4]	; (8006b2c <_strtod_r+0x8>)
 8006b26:	f7ff b9f7 	b.w	8005f18 <_strtod_l>
 8006b2a:	bf00      	nop
 8006b2c:	20000080 	.word	0x20000080

08006b30 <_strtol_l.constprop.0>:
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b36:	d001      	beq.n	8006b3c <_strtol_l.constprop.0+0xc>
 8006b38:	2b24      	cmp	r3, #36	; 0x24
 8006b3a:	d906      	bls.n	8006b4a <_strtol_l.constprop.0+0x1a>
 8006b3c:	f7fe fa62 	bl	8005004 <__errno>
 8006b40:	2316      	movs	r3, #22
 8006b42:	6003      	str	r3, [r0, #0]
 8006b44:	2000      	movs	r0, #0
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c30 <_strtol_l.constprop.0+0x100>
 8006b4e:	460d      	mov	r5, r1
 8006b50:	462e      	mov	r6, r5
 8006b52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006b5a:	f017 0708 	ands.w	r7, r7, #8
 8006b5e:	d1f7      	bne.n	8006b50 <_strtol_l.constprop.0+0x20>
 8006b60:	2c2d      	cmp	r4, #45	; 0x2d
 8006b62:	d132      	bne.n	8006bca <_strtol_l.constprop.0+0x9a>
 8006b64:	782c      	ldrb	r4, [r5, #0]
 8006b66:	2701      	movs	r7, #1
 8006b68:	1cb5      	adds	r5, r6, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d05b      	beq.n	8006c26 <_strtol_l.constprop.0+0xf6>
 8006b6e:	2b10      	cmp	r3, #16
 8006b70:	d109      	bne.n	8006b86 <_strtol_l.constprop.0+0x56>
 8006b72:	2c30      	cmp	r4, #48	; 0x30
 8006b74:	d107      	bne.n	8006b86 <_strtol_l.constprop.0+0x56>
 8006b76:	782c      	ldrb	r4, [r5, #0]
 8006b78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006b7c:	2c58      	cmp	r4, #88	; 0x58
 8006b7e:	d14d      	bne.n	8006c1c <_strtol_l.constprop.0+0xec>
 8006b80:	786c      	ldrb	r4, [r5, #1]
 8006b82:	2310      	movs	r3, #16
 8006b84:	3502      	adds	r5, #2
 8006b86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006b8a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006b8e:	f04f 0c00 	mov.w	ip, #0
 8006b92:	fbb8 f9f3 	udiv	r9, r8, r3
 8006b96:	4666      	mov	r6, ip
 8006b98:	fb03 8a19 	mls	sl, r3, r9, r8
 8006b9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006ba0:	f1be 0f09 	cmp.w	lr, #9
 8006ba4:	d816      	bhi.n	8006bd4 <_strtol_l.constprop.0+0xa4>
 8006ba6:	4674      	mov	r4, lr
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	dd24      	ble.n	8006bf6 <_strtol_l.constprop.0+0xc6>
 8006bac:	f1bc 0f00 	cmp.w	ip, #0
 8006bb0:	db1e      	blt.n	8006bf0 <_strtol_l.constprop.0+0xc0>
 8006bb2:	45b1      	cmp	r9, r6
 8006bb4:	d31c      	bcc.n	8006bf0 <_strtol_l.constprop.0+0xc0>
 8006bb6:	d101      	bne.n	8006bbc <_strtol_l.constprop.0+0x8c>
 8006bb8:	45a2      	cmp	sl, r4
 8006bba:	db19      	blt.n	8006bf0 <_strtol_l.constprop.0+0xc0>
 8006bbc:	fb06 4603 	mla	r6, r6, r3, r4
 8006bc0:	f04f 0c01 	mov.w	ip, #1
 8006bc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bc8:	e7e8      	b.n	8006b9c <_strtol_l.constprop.0+0x6c>
 8006bca:	2c2b      	cmp	r4, #43	; 0x2b
 8006bcc:	bf04      	itt	eq
 8006bce:	782c      	ldrbeq	r4, [r5, #0]
 8006bd0:	1cb5      	addeq	r5, r6, #2
 8006bd2:	e7ca      	b.n	8006b6a <_strtol_l.constprop.0+0x3a>
 8006bd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006bd8:	f1be 0f19 	cmp.w	lr, #25
 8006bdc:	d801      	bhi.n	8006be2 <_strtol_l.constprop.0+0xb2>
 8006bde:	3c37      	subs	r4, #55	; 0x37
 8006be0:	e7e2      	b.n	8006ba8 <_strtol_l.constprop.0+0x78>
 8006be2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006be6:	f1be 0f19 	cmp.w	lr, #25
 8006bea:	d804      	bhi.n	8006bf6 <_strtol_l.constprop.0+0xc6>
 8006bec:	3c57      	subs	r4, #87	; 0x57
 8006bee:	e7db      	b.n	8006ba8 <_strtol_l.constprop.0+0x78>
 8006bf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8006bf4:	e7e6      	b.n	8006bc4 <_strtol_l.constprop.0+0x94>
 8006bf6:	f1bc 0f00 	cmp.w	ip, #0
 8006bfa:	da05      	bge.n	8006c08 <_strtol_l.constprop.0+0xd8>
 8006bfc:	2322      	movs	r3, #34	; 0x22
 8006bfe:	6003      	str	r3, [r0, #0]
 8006c00:	4646      	mov	r6, r8
 8006c02:	b942      	cbnz	r2, 8006c16 <_strtol_l.constprop.0+0xe6>
 8006c04:	4630      	mov	r0, r6
 8006c06:	e79e      	b.n	8006b46 <_strtol_l.constprop.0+0x16>
 8006c08:	b107      	cbz	r7, 8006c0c <_strtol_l.constprop.0+0xdc>
 8006c0a:	4276      	negs	r6, r6
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	d0f9      	beq.n	8006c04 <_strtol_l.constprop.0+0xd4>
 8006c10:	f1bc 0f00 	cmp.w	ip, #0
 8006c14:	d000      	beq.n	8006c18 <_strtol_l.constprop.0+0xe8>
 8006c16:	1e69      	subs	r1, r5, #1
 8006c18:	6011      	str	r1, [r2, #0]
 8006c1a:	e7f3      	b.n	8006c04 <_strtol_l.constprop.0+0xd4>
 8006c1c:	2430      	movs	r4, #48	; 0x30
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1b1      	bne.n	8006b86 <_strtol_l.constprop.0+0x56>
 8006c22:	2308      	movs	r3, #8
 8006c24:	e7af      	b.n	8006b86 <_strtol_l.constprop.0+0x56>
 8006c26:	2c30      	cmp	r4, #48	; 0x30
 8006c28:	d0a5      	beq.n	8006b76 <_strtol_l.constprop.0+0x46>
 8006c2a:	230a      	movs	r3, #10
 8006c2c:	e7ab      	b.n	8006b86 <_strtol_l.constprop.0+0x56>
 8006c2e:	bf00      	nop
 8006c30:	08009da9 	.word	0x08009da9

08006c34 <_strtol_r>:
 8006c34:	f7ff bf7c 	b.w	8006b30 <_strtol_l.constprop.0>

08006c38 <__swbuf_r>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	4605      	mov	r5, r0
 8006c40:	b118      	cbz	r0, 8006c4a <__swbuf_r+0x12>
 8006c42:	6983      	ldr	r3, [r0, #24]
 8006c44:	b90b      	cbnz	r3, 8006c4a <__swbuf_r+0x12>
 8006c46:	f001 f84b 	bl	8007ce0 <__sinit>
 8006c4a:	4b21      	ldr	r3, [pc, #132]	; (8006cd0 <__swbuf_r+0x98>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d12b      	bne.n	8006ca8 <__swbuf_r+0x70>
 8006c50:	686c      	ldr	r4, [r5, #4]
 8006c52:	69a3      	ldr	r3, [r4, #24]
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	071a      	lsls	r2, r3, #28
 8006c5a:	d52f      	bpl.n	8006cbc <__swbuf_r+0x84>
 8006c5c:	6923      	ldr	r3, [r4, #16]
 8006c5e:	b36b      	cbz	r3, 8006cbc <__swbuf_r+0x84>
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	6820      	ldr	r0, [r4, #0]
 8006c64:	1ac0      	subs	r0, r0, r3
 8006c66:	6963      	ldr	r3, [r4, #20]
 8006c68:	b2f6      	uxtb	r6, r6
 8006c6a:	4283      	cmp	r3, r0
 8006c6c:	4637      	mov	r7, r6
 8006c6e:	dc04      	bgt.n	8006c7a <__swbuf_r+0x42>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 ffa0 	bl	8007bb8 <_fflush_r>
 8006c78:	bb30      	cbnz	r0, 8006cc8 <__swbuf_r+0x90>
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	60a3      	str	r3, [r4, #8]
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	6022      	str	r2, [r4, #0]
 8006c86:	701e      	strb	r6, [r3, #0]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	4283      	cmp	r3, r0
 8006c8e:	d004      	beq.n	8006c9a <__swbuf_r+0x62>
 8006c90:	89a3      	ldrh	r3, [r4, #12]
 8006c92:	07db      	lsls	r3, r3, #31
 8006c94:	d506      	bpl.n	8006ca4 <__swbuf_r+0x6c>
 8006c96:	2e0a      	cmp	r6, #10
 8006c98:	d104      	bne.n	8006ca4 <__swbuf_r+0x6c>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	f000 ff8b 	bl	8007bb8 <_fflush_r>
 8006ca2:	b988      	cbnz	r0, 8006cc8 <__swbuf_r+0x90>
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <__swbuf_r+0x9c>)
 8006caa:	429c      	cmp	r4, r3
 8006cac:	d101      	bne.n	8006cb2 <__swbuf_r+0x7a>
 8006cae:	68ac      	ldr	r4, [r5, #8]
 8006cb0:	e7cf      	b.n	8006c52 <__swbuf_r+0x1a>
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <__swbuf_r+0xa0>)
 8006cb4:	429c      	cmp	r4, r3
 8006cb6:	bf08      	it	eq
 8006cb8:	68ec      	ldreq	r4, [r5, #12]
 8006cba:	e7ca      	b.n	8006c52 <__swbuf_r+0x1a>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f80c 	bl	8006cdc <__swsetup_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0cb      	beq.n	8006c60 <__swbuf_r+0x28>
 8006cc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ccc:	e7ea      	b.n	8006ca4 <__swbuf_r+0x6c>
 8006cce:	bf00      	nop
 8006cd0:	08009f5c 	.word	0x08009f5c
 8006cd4:	08009f7c 	.word	0x08009f7c
 8006cd8:	08009f3c 	.word	0x08009f3c

08006cdc <__swsetup_r>:
 8006cdc:	4b32      	ldr	r3, [pc, #200]	; (8006da8 <__swsetup_r+0xcc>)
 8006cde:	b570      	push	{r4, r5, r6, lr}
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	b125      	cbz	r5, 8006cf2 <__swsetup_r+0x16>
 8006ce8:	69ab      	ldr	r3, [r5, #24]
 8006cea:	b913      	cbnz	r3, 8006cf2 <__swsetup_r+0x16>
 8006cec:	4628      	mov	r0, r5
 8006cee:	f000 fff7 	bl	8007ce0 <__sinit>
 8006cf2:	4b2e      	ldr	r3, [pc, #184]	; (8006dac <__swsetup_r+0xd0>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d10f      	bne.n	8006d18 <__swsetup_r+0x3c>
 8006cf8:	686c      	ldr	r4, [r5, #4]
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d00:	0719      	lsls	r1, r3, #28
 8006d02:	d42c      	bmi.n	8006d5e <__swsetup_r+0x82>
 8006d04:	06dd      	lsls	r5, r3, #27
 8006d06:	d411      	bmi.n	8006d2c <__swsetup_r+0x50>
 8006d08:	2309      	movs	r3, #9
 8006d0a:	6033      	str	r3, [r6, #0]
 8006d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d16:	e03e      	b.n	8006d96 <__swsetup_r+0xba>
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <__swsetup_r+0xd4>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	d101      	bne.n	8006d22 <__swsetup_r+0x46>
 8006d1e:	68ac      	ldr	r4, [r5, #8]
 8006d20:	e7eb      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d22:	4b24      	ldr	r3, [pc, #144]	; (8006db4 <__swsetup_r+0xd8>)
 8006d24:	429c      	cmp	r4, r3
 8006d26:	bf08      	it	eq
 8006d28:	68ec      	ldreq	r4, [r5, #12]
 8006d2a:	e7e6      	b.n	8006cfa <__swsetup_r+0x1e>
 8006d2c:	0758      	lsls	r0, r3, #29
 8006d2e:	d512      	bpl.n	8006d56 <__swsetup_r+0x7a>
 8006d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d32:	b141      	cbz	r1, 8006d46 <__swsetup_r+0x6a>
 8006d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d38:	4299      	cmp	r1, r3
 8006d3a:	d002      	beq.n	8006d42 <__swsetup_r+0x66>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f002 f939 	bl	8008fb4 <_free_r>
 8006d42:	2300      	movs	r3, #0
 8006d44:	6363      	str	r3, [r4, #52]	; 0x34
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	6063      	str	r3, [r4, #4]
 8006d52:	6923      	ldr	r3, [r4, #16]
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f043 0308 	orr.w	r3, r3, #8
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b94b      	cbnz	r3, 8006d76 <__swsetup_r+0x9a>
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d003      	beq.n	8006d76 <__swsetup_r+0x9a>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4630      	mov	r0, r6
 8006d72:	f001 fbed 	bl	8008550 <__smakebuf_r>
 8006d76:	89a0      	ldrh	r0, [r4, #12]
 8006d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d7c:	f010 0301 	ands.w	r3, r0, #1
 8006d80:	d00a      	beq.n	8006d98 <__swsetup_r+0xbc>
 8006d82:	2300      	movs	r3, #0
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	6963      	ldr	r3, [r4, #20]
 8006d88:	425b      	negs	r3, r3
 8006d8a:	61a3      	str	r3, [r4, #24]
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b943      	cbnz	r3, 8006da2 <__swsetup_r+0xc6>
 8006d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d94:	d1ba      	bne.n	8006d0c <__swsetup_r+0x30>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	0781      	lsls	r1, r0, #30
 8006d9a:	bf58      	it	pl
 8006d9c:	6963      	ldrpl	r3, [r4, #20]
 8006d9e:	60a3      	str	r3, [r4, #8]
 8006da0:	e7f4      	b.n	8006d8c <__swsetup_r+0xb0>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7f7      	b.n	8006d96 <__swsetup_r+0xba>
 8006da6:	bf00      	nop
 8006da8:	20000018 	.word	0x20000018
 8006dac:	08009f5c 	.word	0x08009f5c
 8006db0:	08009f7c 	.word	0x08009f7c
 8006db4:	08009f3c 	.word	0x08009f3c

08006db8 <quorem>:
 8006db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbc:	6903      	ldr	r3, [r0, #16]
 8006dbe:	690c      	ldr	r4, [r1, #16]
 8006dc0:	42a3      	cmp	r3, r4
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	f2c0 8081 	blt.w	8006eca <quorem+0x112>
 8006dc8:	3c01      	subs	r4, #1
 8006dca:	f101 0814 	add.w	r8, r1, #20
 8006dce:	f100 0514 	add.w	r5, r0, #20
 8006dd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ddc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de0:	3301      	adds	r3, #1
 8006de2:	429a      	cmp	r2, r3
 8006de4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8006df0:	d331      	bcc.n	8006e56 <quorem+0x9e>
 8006df2:	f04f 0e00 	mov.w	lr, #0
 8006df6:	4640      	mov	r0, r8
 8006df8:	46ac      	mov	ip, r5
 8006dfa:	46f2      	mov	sl, lr
 8006dfc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e00:	b293      	uxth	r3, r2
 8006e02:	fb06 e303 	mla	r3, r6, r3, lr
 8006e06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	ebaa 0303 	sub.w	r3, sl, r3
 8006e10:	f8dc a000 	ldr.w	sl, [ip]
 8006e14:	0c12      	lsrs	r2, r2, #16
 8006e16:	fa13 f38a 	uxtah	r3, r3, sl
 8006e1a:	fb06 e202 	mla	r2, r6, r2, lr
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	9b00      	ldr	r3, [sp, #0]
 8006e22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e26:	b292      	uxth	r2, r2
 8006e28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e30:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e34:	4581      	cmp	r9, r0
 8006e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3a:	f84c 3b04 	str.w	r3, [ip], #4
 8006e3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006e42:	d2db      	bcs.n	8006dfc <quorem+0x44>
 8006e44:	f855 300b 	ldr.w	r3, [r5, fp]
 8006e48:	b92b      	cbnz	r3, 8006e56 <quorem+0x9e>
 8006e4a:	9b01      	ldr	r3, [sp, #4]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	429d      	cmp	r5, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	d32e      	bcc.n	8006eb2 <quorem+0xfa>
 8006e54:	613c      	str	r4, [r7, #16]
 8006e56:	4638      	mov	r0, r7
 8006e58:	f001 fea0 	bl	8008b9c <__mcmp>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	db24      	blt.n	8006eaa <quorem+0xf2>
 8006e60:	3601      	adds	r6, #1
 8006e62:	4628      	mov	r0, r5
 8006e64:	f04f 0c00 	mov.w	ip, #0
 8006e68:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e6c:	f8d0 e000 	ldr.w	lr, [r0]
 8006e70:	b293      	uxth	r3, r2
 8006e72:	ebac 0303 	sub.w	r3, ip, r3
 8006e76:	0c12      	lsrs	r2, r2, #16
 8006e78:	fa13 f38e 	uxtah	r3, r3, lr
 8006e7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006e80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e8a:	45c1      	cmp	r9, r8
 8006e8c:	f840 3b04 	str.w	r3, [r0], #4
 8006e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006e94:	d2e8      	bcs.n	8006e68 <quorem+0xb0>
 8006e96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e9e:	b922      	cbnz	r2, 8006eaa <quorem+0xf2>
 8006ea0:	3b04      	subs	r3, #4
 8006ea2:	429d      	cmp	r5, r3
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	d30a      	bcc.n	8006ebe <quorem+0x106>
 8006ea8:	613c      	str	r4, [r7, #16]
 8006eaa:	4630      	mov	r0, r6
 8006eac:	b003      	add	sp, #12
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	6812      	ldr	r2, [r2, #0]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	2a00      	cmp	r2, #0
 8006eb8:	d1cc      	bne.n	8006e54 <quorem+0x9c>
 8006eba:	3c01      	subs	r4, #1
 8006ebc:	e7c7      	b.n	8006e4e <quorem+0x96>
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	3b04      	subs	r3, #4
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <quorem+0xf0>
 8006ec6:	3c01      	subs	r4, #1
 8006ec8:	e7eb      	b.n	8006ea2 <quorem+0xea>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e7ee      	b.n	8006eac <quorem+0xf4>
	...

08006ed0 <_dtoa_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	ed2d 8b04 	vpush	{d8-d9}
 8006ed8:	ec57 6b10 	vmov	r6, r7, d0
 8006edc:	b093      	sub	sp, #76	; 0x4c
 8006ede:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ee0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ee4:	9106      	str	r1, [sp, #24]
 8006ee6:	ee10 aa10 	vmov	sl, s0
 8006eea:	4604      	mov	r4, r0
 8006eec:	9209      	str	r2, [sp, #36]	; 0x24
 8006eee:	930c      	str	r3, [sp, #48]	; 0x30
 8006ef0:	46bb      	mov	fp, r7
 8006ef2:	b975      	cbnz	r5, 8006f12 <_dtoa_r+0x42>
 8006ef4:	2010      	movs	r0, #16
 8006ef6:	f001 fb6b 	bl	80085d0 <malloc>
 8006efa:	4602      	mov	r2, r0
 8006efc:	6260      	str	r0, [r4, #36]	; 0x24
 8006efe:	b920      	cbnz	r0, 8006f0a <_dtoa_r+0x3a>
 8006f00:	4ba7      	ldr	r3, [pc, #668]	; (80071a0 <_dtoa_r+0x2d0>)
 8006f02:	21ea      	movs	r1, #234	; 0xea
 8006f04:	48a7      	ldr	r0, [pc, #668]	; (80071a4 <_dtoa_r+0x2d4>)
 8006f06:	f002 fc79 	bl	80097fc <__assert_func>
 8006f0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f0e:	6005      	str	r5, [r0, #0]
 8006f10:	60c5      	str	r5, [r0, #12]
 8006f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f14:	6819      	ldr	r1, [r3, #0]
 8006f16:	b151      	cbz	r1, 8006f2e <_dtoa_r+0x5e>
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	604a      	str	r2, [r1, #4]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4093      	lsls	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f001 fbae 	bl	8008684 <_Bfree>
 8006f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	1e3b      	subs	r3, r7, #0
 8006f30:	bfaa      	itet	ge
 8006f32:	2300      	movge	r3, #0
 8006f34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006f38:	f8c8 3000 	strge.w	r3, [r8]
 8006f3c:	4b9a      	ldr	r3, [pc, #616]	; (80071a8 <_dtoa_r+0x2d8>)
 8006f3e:	bfbc      	itt	lt
 8006f40:	2201      	movlt	r2, #1
 8006f42:	f8c8 2000 	strlt.w	r2, [r8]
 8006f46:	ea33 030b 	bics.w	r3, r3, fp
 8006f4a:	d11b      	bne.n	8006f84 <_dtoa_r+0xb4>
 8006f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f4e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f58:	4333      	orrs	r3, r6
 8006f5a:	f000 8592 	beq.w	8007a82 <_dtoa_r+0xbb2>
 8006f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006f60:	b963      	cbnz	r3, 8006f7c <_dtoa_r+0xac>
 8006f62:	4b92      	ldr	r3, [pc, #584]	; (80071ac <_dtoa_r+0x2dc>)
 8006f64:	e022      	b.n	8006fac <_dtoa_r+0xdc>
 8006f66:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <_dtoa_r+0x2e0>)
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	9801      	ldr	r0, [sp, #4]
 8006f72:	b013      	add	sp, #76	; 0x4c
 8006f74:	ecbd 8b04 	vpop	{d8-d9}
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	4b8b      	ldr	r3, [pc, #556]	; (80071ac <_dtoa_r+0x2dc>)
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	3303      	adds	r3, #3
 8006f82:	e7f3      	b.n	8006f6c <_dtoa_r+0x9c>
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	4650      	mov	r0, sl
 8006f8a:	4659      	mov	r1, fp
 8006f8c:	f7f9 fdc4 	bl	8000b18 <__aeabi_dcmpeq>
 8006f90:	ec4b ab19 	vmov	d9, sl, fp
 8006f94:	4680      	mov	r8, r0
 8006f96:	b158      	cbz	r0, 8006fb0 <_dtoa_r+0xe0>
 8006f98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 856b 	beq.w	8007a7c <_dtoa_r+0xbac>
 8006fa6:	4883      	ldr	r0, [pc, #524]	; (80071b4 <_dtoa_r+0x2e4>)
 8006fa8:	6018      	str	r0, [r3, #0]
 8006faa:	1e43      	subs	r3, r0, #1
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	e7df      	b.n	8006f70 <_dtoa_r+0xa0>
 8006fb0:	ec4b ab10 	vmov	d0, sl, fp
 8006fb4:	aa10      	add	r2, sp, #64	; 0x40
 8006fb6:	a911      	add	r1, sp, #68	; 0x44
 8006fb8:	4620      	mov	r0, r4
 8006fba:	f001 ff11 	bl	8008de0 <__d2b>
 8006fbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006fc2:	ee08 0a10 	vmov	s16, r0
 8006fc6:	2d00      	cmp	r5, #0
 8006fc8:	f000 8084 	beq.w	80070d4 <_dtoa_r+0x204>
 8006fcc:	ee19 3a90 	vmov	r3, s19
 8006fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006fd8:	4656      	mov	r6, sl
 8006fda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006fde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006fe2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006fe6:	4b74      	ldr	r3, [pc, #464]	; (80071b8 <_dtoa_r+0x2e8>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	4630      	mov	r0, r6
 8006fec:	4639      	mov	r1, r7
 8006fee:	f7f9 f973 	bl	80002d8 <__aeabi_dsub>
 8006ff2:	a365      	add	r3, pc, #404	; (adr r3, 8007188 <_dtoa_r+0x2b8>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 fb26 	bl	8000648 <__aeabi_dmul>
 8006ffc:	a364      	add	r3, pc, #400	; (adr r3, 8007190 <_dtoa_r+0x2c0>)
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 f96b 	bl	80002dc <__adddf3>
 8007006:	4606      	mov	r6, r0
 8007008:	4628      	mov	r0, r5
 800700a:	460f      	mov	r7, r1
 800700c:	f7f9 fab2 	bl	8000574 <__aeabi_i2d>
 8007010:	a361      	add	r3, pc, #388	; (adr r3, 8007198 <_dtoa_r+0x2c8>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 fb17 	bl	8000648 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 f95b 	bl	80002dc <__adddf3>
 8007026:	4606      	mov	r6, r0
 8007028:	460f      	mov	r7, r1
 800702a:	f7f9 fdbd 	bl	8000ba8 <__aeabi_d2iz>
 800702e:	2200      	movs	r2, #0
 8007030:	9000      	str	r0, [sp, #0]
 8007032:	2300      	movs	r3, #0
 8007034:	4630      	mov	r0, r6
 8007036:	4639      	mov	r1, r7
 8007038:	f7f9 fd78 	bl	8000b2c <__aeabi_dcmplt>
 800703c:	b150      	cbz	r0, 8007054 <_dtoa_r+0x184>
 800703e:	9800      	ldr	r0, [sp, #0]
 8007040:	f7f9 fa98 	bl	8000574 <__aeabi_i2d>
 8007044:	4632      	mov	r2, r6
 8007046:	463b      	mov	r3, r7
 8007048:	f7f9 fd66 	bl	8000b18 <__aeabi_dcmpeq>
 800704c:	b910      	cbnz	r0, 8007054 <_dtoa_r+0x184>
 800704e:	9b00      	ldr	r3, [sp, #0]
 8007050:	3b01      	subs	r3, #1
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	9b00      	ldr	r3, [sp, #0]
 8007056:	2b16      	cmp	r3, #22
 8007058:	d85a      	bhi.n	8007110 <_dtoa_r+0x240>
 800705a:	9a00      	ldr	r2, [sp, #0]
 800705c:	4b57      	ldr	r3, [pc, #348]	; (80071bc <_dtoa_r+0x2ec>)
 800705e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	ec51 0b19 	vmov	r0, r1, d9
 800706a:	f7f9 fd5f 	bl	8000b2c <__aeabi_dcmplt>
 800706e:	2800      	cmp	r0, #0
 8007070:	d050      	beq.n	8007114 <_dtoa_r+0x244>
 8007072:	9b00      	ldr	r3, [sp, #0]
 8007074:	3b01      	subs	r3, #1
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	2300      	movs	r3, #0
 800707a:	930b      	str	r3, [sp, #44]	; 0x2c
 800707c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800707e:	1b5d      	subs	r5, r3, r5
 8007080:	1e6b      	subs	r3, r5, #1
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	bf45      	ittet	mi
 8007086:	f1c5 0301 	rsbmi	r3, r5, #1
 800708a:	9304      	strmi	r3, [sp, #16]
 800708c:	2300      	movpl	r3, #0
 800708e:	2300      	movmi	r3, #0
 8007090:	bf4c      	ite	mi
 8007092:	9305      	strmi	r3, [sp, #20]
 8007094:	9304      	strpl	r3, [sp, #16]
 8007096:	9b00      	ldr	r3, [sp, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db3d      	blt.n	8007118 <_dtoa_r+0x248>
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	9a00      	ldr	r2, [sp, #0]
 80070a0:	920a      	str	r2, [sp, #40]	; 0x28
 80070a2:	4413      	add	r3, r2
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	2300      	movs	r3, #0
 80070a8:	9307      	str	r3, [sp, #28]
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	2b09      	cmp	r3, #9
 80070ae:	f200 8089 	bhi.w	80071c4 <_dtoa_r+0x2f4>
 80070b2:	2b05      	cmp	r3, #5
 80070b4:	bfc4      	itt	gt
 80070b6:	3b04      	subgt	r3, #4
 80070b8:	9306      	strgt	r3, [sp, #24]
 80070ba:	9b06      	ldr	r3, [sp, #24]
 80070bc:	f1a3 0302 	sub.w	r3, r3, #2
 80070c0:	bfcc      	ite	gt
 80070c2:	2500      	movgt	r5, #0
 80070c4:	2501      	movle	r5, #1
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	f200 8087 	bhi.w	80071da <_dtoa_r+0x30a>
 80070cc:	e8df f003 	tbb	[pc, r3]
 80070d0:	59383a2d 	.word	0x59383a2d
 80070d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80070d8:	441d      	add	r5, r3
 80070da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80070de:	2b20      	cmp	r3, #32
 80070e0:	bfc1      	itttt	gt
 80070e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80070ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80070ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80070f2:	bfda      	itte	le
 80070f4:	f1c3 0320 	rsble	r3, r3, #32
 80070f8:	fa06 f003 	lslle.w	r0, r6, r3
 80070fc:	4318      	orrgt	r0, r3
 80070fe:	f7f9 fa29 	bl	8000554 <__aeabi_ui2d>
 8007102:	2301      	movs	r3, #1
 8007104:	4606      	mov	r6, r0
 8007106:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800710a:	3d01      	subs	r5, #1
 800710c:	930e      	str	r3, [sp, #56]	; 0x38
 800710e:	e76a      	b.n	8006fe6 <_dtoa_r+0x116>
 8007110:	2301      	movs	r3, #1
 8007112:	e7b2      	b.n	800707a <_dtoa_r+0x1aa>
 8007114:	900b      	str	r0, [sp, #44]	; 0x2c
 8007116:	e7b1      	b.n	800707c <_dtoa_r+0x1ac>
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	9a00      	ldr	r2, [sp, #0]
 800711c:	1a9b      	subs	r3, r3, r2
 800711e:	9304      	str	r3, [sp, #16]
 8007120:	4253      	negs	r3, r2
 8007122:	9307      	str	r3, [sp, #28]
 8007124:	2300      	movs	r3, #0
 8007126:	930a      	str	r3, [sp, #40]	; 0x28
 8007128:	e7bf      	b.n	80070aa <_dtoa_r+0x1da>
 800712a:	2300      	movs	r3, #0
 800712c:	9308      	str	r3, [sp, #32]
 800712e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	dc55      	bgt.n	80071e0 <_dtoa_r+0x310>
 8007134:	2301      	movs	r3, #1
 8007136:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800713a:	461a      	mov	r2, r3
 800713c:	9209      	str	r2, [sp, #36]	; 0x24
 800713e:	e00c      	b.n	800715a <_dtoa_r+0x28a>
 8007140:	2301      	movs	r3, #1
 8007142:	e7f3      	b.n	800712c <_dtoa_r+0x25c>
 8007144:	2300      	movs	r3, #0
 8007146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007148:	9308      	str	r3, [sp, #32]
 800714a:	9b00      	ldr	r3, [sp, #0]
 800714c:	4413      	add	r3, r2
 800714e:	9302      	str	r3, [sp, #8]
 8007150:	3301      	adds	r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	9303      	str	r3, [sp, #12]
 8007156:	bfb8      	it	lt
 8007158:	2301      	movlt	r3, #1
 800715a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800715c:	2200      	movs	r2, #0
 800715e:	6042      	str	r2, [r0, #4]
 8007160:	2204      	movs	r2, #4
 8007162:	f102 0614 	add.w	r6, r2, #20
 8007166:	429e      	cmp	r6, r3
 8007168:	6841      	ldr	r1, [r0, #4]
 800716a:	d93d      	bls.n	80071e8 <_dtoa_r+0x318>
 800716c:	4620      	mov	r0, r4
 800716e:	f001 fa49 	bl	8008604 <_Balloc>
 8007172:	9001      	str	r0, [sp, #4]
 8007174:	2800      	cmp	r0, #0
 8007176:	d13b      	bne.n	80071f0 <_dtoa_r+0x320>
 8007178:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <_dtoa_r+0x2f0>)
 800717a:	4602      	mov	r2, r0
 800717c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007180:	e6c0      	b.n	8006f04 <_dtoa_r+0x34>
 8007182:	2301      	movs	r3, #1
 8007184:	e7df      	b.n	8007146 <_dtoa_r+0x276>
 8007186:	bf00      	nop
 8007188:	636f4361 	.word	0x636f4361
 800718c:	3fd287a7 	.word	0x3fd287a7
 8007190:	8b60c8b3 	.word	0x8b60c8b3
 8007194:	3fc68a28 	.word	0x3fc68a28
 8007198:	509f79fb 	.word	0x509f79fb
 800719c:	3fd34413 	.word	0x3fd34413
 80071a0:	08009eb6 	.word	0x08009eb6
 80071a4:	08009ecd 	.word	0x08009ecd
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	08009eb2 	.word	0x08009eb2
 80071b0:	08009ea9 	.word	0x08009ea9
 80071b4:	08009d29 	.word	0x08009d29
 80071b8:	3ff80000 	.word	0x3ff80000
 80071bc:	0800a0a0 	.word	0x0800a0a0
 80071c0:	08009f28 	.word	0x08009f28
 80071c4:	2501      	movs	r5, #1
 80071c6:	2300      	movs	r3, #0
 80071c8:	9306      	str	r3, [sp, #24]
 80071ca:	9508      	str	r5, [sp, #32]
 80071cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2312      	movs	r3, #18
 80071d8:	e7b0      	b.n	800713c <_dtoa_r+0x26c>
 80071da:	2301      	movs	r3, #1
 80071dc:	9308      	str	r3, [sp, #32]
 80071de:	e7f5      	b.n	80071cc <_dtoa_r+0x2fc>
 80071e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80071e6:	e7b8      	b.n	800715a <_dtoa_r+0x28a>
 80071e8:	3101      	adds	r1, #1
 80071ea:	6041      	str	r1, [r0, #4]
 80071ec:	0052      	lsls	r2, r2, #1
 80071ee:	e7b8      	b.n	8007162 <_dtoa_r+0x292>
 80071f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f2:	9a01      	ldr	r2, [sp, #4]
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	2b0e      	cmp	r3, #14
 80071fa:	f200 809d 	bhi.w	8007338 <_dtoa_r+0x468>
 80071fe:	2d00      	cmp	r5, #0
 8007200:	f000 809a 	beq.w	8007338 <_dtoa_r+0x468>
 8007204:	9b00      	ldr	r3, [sp, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd32      	ble.n	8007270 <_dtoa_r+0x3a0>
 800720a:	4ab7      	ldr	r2, [pc, #732]	; (80074e8 <_dtoa_r+0x618>)
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007214:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	05d8      	lsls	r0, r3, #23
 800721c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007220:	d516      	bpl.n	8007250 <_dtoa_r+0x380>
 8007222:	4bb2      	ldr	r3, [pc, #712]	; (80074ec <_dtoa_r+0x61c>)
 8007224:	ec51 0b19 	vmov	r0, r1, d9
 8007228:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800722c:	f7f9 fb36 	bl	800089c <__aeabi_ddiv>
 8007230:	f007 070f 	and.w	r7, r7, #15
 8007234:	4682      	mov	sl, r0
 8007236:	468b      	mov	fp, r1
 8007238:	2503      	movs	r5, #3
 800723a:	4eac      	ldr	r6, [pc, #688]	; (80074ec <_dtoa_r+0x61c>)
 800723c:	b957      	cbnz	r7, 8007254 <_dtoa_r+0x384>
 800723e:	4642      	mov	r2, r8
 8007240:	464b      	mov	r3, r9
 8007242:	4650      	mov	r0, sl
 8007244:	4659      	mov	r1, fp
 8007246:	f7f9 fb29 	bl	800089c <__aeabi_ddiv>
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	e028      	b.n	80072a2 <_dtoa_r+0x3d2>
 8007250:	2502      	movs	r5, #2
 8007252:	e7f2      	b.n	800723a <_dtoa_r+0x36a>
 8007254:	07f9      	lsls	r1, r7, #31
 8007256:	d508      	bpl.n	800726a <_dtoa_r+0x39a>
 8007258:	4640      	mov	r0, r8
 800725a:	4649      	mov	r1, r9
 800725c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007260:	f7f9 f9f2 	bl	8000648 <__aeabi_dmul>
 8007264:	3501      	adds	r5, #1
 8007266:	4680      	mov	r8, r0
 8007268:	4689      	mov	r9, r1
 800726a:	107f      	asrs	r7, r7, #1
 800726c:	3608      	adds	r6, #8
 800726e:	e7e5      	b.n	800723c <_dtoa_r+0x36c>
 8007270:	f000 809b 	beq.w	80073aa <_dtoa_r+0x4da>
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	4f9d      	ldr	r7, [pc, #628]	; (80074ec <_dtoa_r+0x61c>)
 8007278:	425e      	negs	r6, r3
 800727a:	4b9b      	ldr	r3, [pc, #620]	; (80074e8 <_dtoa_r+0x618>)
 800727c:	f006 020f 	and.w	r2, r6, #15
 8007280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	ec51 0b19 	vmov	r0, r1, d9
 800728c:	f7f9 f9dc 	bl	8000648 <__aeabi_dmul>
 8007290:	1136      	asrs	r6, r6, #4
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	2300      	movs	r3, #0
 8007298:	2502      	movs	r5, #2
 800729a:	2e00      	cmp	r6, #0
 800729c:	d17a      	bne.n	8007394 <_dtoa_r+0x4c4>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1d3      	bne.n	800724a <_dtoa_r+0x37a>
 80072a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8082 	beq.w	80073ae <_dtoa_r+0x4de>
 80072aa:	4b91      	ldr	r3, [pc, #580]	; (80074f0 <_dtoa_r+0x620>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	f7f9 fc3b 	bl	8000b2c <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d079      	beq.n	80073ae <_dtoa_r+0x4de>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d076      	beq.n	80073ae <_dtoa_r+0x4de>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dd36      	ble.n	8007334 <_dtoa_r+0x464>
 80072c6:	9b00      	ldr	r3, [sp, #0]
 80072c8:	4650      	mov	r0, sl
 80072ca:	4659      	mov	r1, fp
 80072cc:	1e5f      	subs	r7, r3, #1
 80072ce:	2200      	movs	r2, #0
 80072d0:	4b88      	ldr	r3, [pc, #544]	; (80074f4 <_dtoa_r+0x624>)
 80072d2:	f7f9 f9b9 	bl	8000648 <__aeabi_dmul>
 80072d6:	9e02      	ldr	r6, [sp, #8]
 80072d8:	4682      	mov	sl, r0
 80072da:	468b      	mov	fp, r1
 80072dc:	3501      	adds	r5, #1
 80072de:	4628      	mov	r0, r5
 80072e0:	f7f9 f948 	bl	8000574 <__aeabi_i2d>
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	f7f9 f9ae 	bl	8000648 <__aeabi_dmul>
 80072ec:	4b82      	ldr	r3, [pc, #520]	; (80074f8 <_dtoa_r+0x628>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	f7f8 fff4 	bl	80002dc <__adddf3>
 80072f4:	46d0      	mov	r8, sl
 80072f6:	46d9      	mov	r9, fp
 80072f8:	4682      	mov	sl, r0
 80072fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80072fe:	2e00      	cmp	r6, #0
 8007300:	d158      	bne.n	80073b4 <_dtoa_r+0x4e4>
 8007302:	4b7e      	ldr	r3, [pc, #504]	; (80074fc <_dtoa_r+0x62c>)
 8007304:	2200      	movs	r2, #0
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ffe5 	bl	80002d8 <__aeabi_dsub>
 800730e:	4652      	mov	r2, sl
 8007310:	465b      	mov	r3, fp
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	f7f9 fc27 	bl	8000b68 <__aeabi_dcmpgt>
 800731a:	2800      	cmp	r0, #0
 800731c:	f040 8295 	bne.w	800784a <_dtoa_r+0x97a>
 8007320:	4652      	mov	r2, sl
 8007322:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007326:	4640      	mov	r0, r8
 8007328:	4649      	mov	r1, r9
 800732a:	f7f9 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800732e:	2800      	cmp	r0, #0
 8007330:	f040 8289 	bne.w	8007846 <_dtoa_r+0x976>
 8007334:	ec5b ab19 	vmov	sl, fp, d9
 8007338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800733a:	2b00      	cmp	r3, #0
 800733c:	f2c0 8148 	blt.w	80075d0 <_dtoa_r+0x700>
 8007340:	9a00      	ldr	r2, [sp, #0]
 8007342:	2a0e      	cmp	r2, #14
 8007344:	f300 8144 	bgt.w	80075d0 <_dtoa_r+0x700>
 8007348:	4b67      	ldr	r3, [pc, #412]	; (80074e8 <_dtoa_r+0x618>)
 800734a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800734e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007354:	2b00      	cmp	r3, #0
 8007356:	f280 80d5 	bge.w	8007504 <_dtoa_r+0x634>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f300 80d1 	bgt.w	8007504 <_dtoa_r+0x634>
 8007362:	f040 826f 	bne.w	8007844 <_dtoa_r+0x974>
 8007366:	4b65      	ldr	r3, [pc, #404]	; (80074fc <_dtoa_r+0x62c>)
 8007368:	2200      	movs	r2, #0
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f9 f96b 	bl	8000648 <__aeabi_dmul>
 8007372:	4652      	mov	r2, sl
 8007374:	465b      	mov	r3, fp
 8007376:	f7f9 fbed 	bl	8000b54 <__aeabi_dcmpge>
 800737a:	9e03      	ldr	r6, [sp, #12]
 800737c:	4637      	mov	r7, r6
 800737e:	2800      	cmp	r0, #0
 8007380:	f040 8245 	bne.w	800780e <_dtoa_r+0x93e>
 8007384:	9d01      	ldr	r5, [sp, #4]
 8007386:	2331      	movs	r3, #49	; 0x31
 8007388:	f805 3b01 	strb.w	r3, [r5], #1
 800738c:	9b00      	ldr	r3, [sp, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	e240      	b.n	8007816 <_dtoa_r+0x946>
 8007394:	07f2      	lsls	r2, r6, #31
 8007396:	d505      	bpl.n	80073a4 <_dtoa_r+0x4d4>
 8007398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800739c:	f7f9 f954 	bl	8000648 <__aeabi_dmul>
 80073a0:	3501      	adds	r5, #1
 80073a2:	2301      	movs	r3, #1
 80073a4:	1076      	asrs	r6, r6, #1
 80073a6:	3708      	adds	r7, #8
 80073a8:	e777      	b.n	800729a <_dtoa_r+0x3ca>
 80073aa:	2502      	movs	r5, #2
 80073ac:	e779      	b.n	80072a2 <_dtoa_r+0x3d2>
 80073ae:	9f00      	ldr	r7, [sp, #0]
 80073b0:	9e03      	ldr	r6, [sp, #12]
 80073b2:	e794      	b.n	80072de <_dtoa_r+0x40e>
 80073b4:	9901      	ldr	r1, [sp, #4]
 80073b6:	4b4c      	ldr	r3, [pc, #304]	; (80074e8 <_dtoa_r+0x618>)
 80073b8:	4431      	add	r1, r6
 80073ba:	910d      	str	r1, [sp, #52]	; 0x34
 80073bc:	9908      	ldr	r1, [sp, #32]
 80073be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073c6:	2900      	cmp	r1, #0
 80073c8:	d043      	beq.n	8007452 <_dtoa_r+0x582>
 80073ca:	494d      	ldr	r1, [pc, #308]	; (8007500 <_dtoa_r+0x630>)
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7f9 fa65 	bl	800089c <__aeabi_ddiv>
 80073d2:	4652      	mov	r2, sl
 80073d4:	465b      	mov	r3, fp
 80073d6:	f7f8 ff7f 	bl	80002d8 <__aeabi_dsub>
 80073da:	9d01      	ldr	r5, [sp, #4]
 80073dc:	4682      	mov	sl, r0
 80073de:	468b      	mov	fp, r1
 80073e0:	4649      	mov	r1, r9
 80073e2:	4640      	mov	r0, r8
 80073e4:	f7f9 fbe0 	bl	8000ba8 <__aeabi_d2iz>
 80073e8:	4606      	mov	r6, r0
 80073ea:	f7f9 f8c3 	bl	8000574 <__aeabi_i2d>
 80073ee:	4602      	mov	r2, r0
 80073f0:	460b      	mov	r3, r1
 80073f2:	4640      	mov	r0, r8
 80073f4:	4649      	mov	r1, r9
 80073f6:	f7f8 ff6f 	bl	80002d8 <__aeabi_dsub>
 80073fa:	3630      	adds	r6, #48	; 0x30
 80073fc:	f805 6b01 	strb.w	r6, [r5], #1
 8007400:	4652      	mov	r2, sl
 8007402:	465b      	mov	r3, fp
 8007404:	4680      	mov	r8, r0
 8007406:	4689      	mov	r9, r1
 8007408:	f7f9 fb90 	bl	8000b2c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d163      	bne.n	80074d8 <_dtoa_r+0x608>
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	4936      	ldr	r1, [pc, #216]	; (80074f0 <_dtoa_r+0x620>)
 8007416:	2000      	movs	r0, #0
 8007418:	f7f8 ff5e 	bl	80002d8 <__aeabi_dsub>
 800741c:	4652      	mov	r2, sl
 800741e:	465b      	mov	r3, fp
 8007420:	f7f9 fb84 	bl	8000b2c <__aeabi_dcmplt>
 8007424:	2800      	cmp	r0, #0
 8007426:	f040 80b5 	bne.w	8007594 <_dtoa_r+0x6c4>
 800742a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800742c:	429d      	cmp	r5, r3
 800742e:	d081      	beq.n	8007334 <_dtoa_r+0x464>
 8007430:	4b30      	ldr	r3, [pc, #192]	; (80074f4 <_dtoa_r+0x624>)
 8007432:	2200      	movs	r2, #0
 8007434:	4650      	mov	r0, sl
 8007436:	4659      	mov	r1, fp
 8007438:	f7f9 f906 	bl	8000648 <__aeabi_dmul>
 800743c:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <_dtoa_r+0x624>)
 800743e:	4682      	mov	sl, r0
 8007440:	468b      	mov	fp, r1
 8007442:	4640      	mov	r0, r8
 8007444:	4649      	mov	r1, r9
 8007446:	2200      	movs	r2, #0
 8007448:	f7f9 f8fe 	bl	8000648 <__aeabi_dmul>
 800744c:	4680      	mov	r8, r0
 800744e:	4689      	mov	r9, r1
 8007450:	e7c6      	b.n	80073e0 <_dtoa_r+0x510>
 8007452:	4650      	mov	r0, sl
 8007454:	4659      	mov	r1, fp
 8007456:	f7f9 f8f7 	bl	8000648 <__aeabi_dmul>
 800745a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800745c:	9d01      	ldr	r5, [sp, #4]
 800745e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	4649      	mov	r1, r9
 8007466:	4640      	mov	r0, r8
 8007468:	f7f9 fb9e 	bl	8000ba8 <__aeabi_d2iz>
 800746c:	4606      	mov	r6, r0
 800746e:	f7f9 f881 	bl	8000574 <__aeabi_i2d>
 8007472:	3630      	adds	r6, #48	; 0x30
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4640      	mov	r0, r8
 800747a:	4649      	mov	r1, r9
 800747c:	f7f8 ff2c 	bl	80002d8 <__aeabi_dsub>
 8007480:	f805 6b01 	strb.w	r6, [r5], #1
 8007484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007486:	429d      	cmp	r5, r3
 8007488:	4680      	mov	r8, r0
 800748a:	4689      	mov	r9, r1
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	d124      	bne.n	80074dc <_dtoa_r+0x60c>
 8007492:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <_dtoa_r+0x630>)
 8007494:	4650      	mov	r0, sl
 8007496:	4659      	mov	r1, fp
 8007498:	f7f8 ff20 	bl	80002dc <__adddf3>
 800749c:	4602      	mov	r2, r0
 800749e:	460b      	mov	r3, r1
 80074a0:	4640      	mov	r0, r8
 80074a2:	4649      	mov	r1, r9
 80074a4:	f7f9 fb60 	bl	8000b68 <__aeabi_dcmpgt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	d173      	bne.n	8007594 <_dtoa_r+0x6c4>
 80074ac:	4652      	mov	r2, sl
 80074ae:	465b      	mov	r3, fp
 80074b0:	4913      	ldr	r1, [pc, #76]	; (8007500 <_dtoa_r+0x630>)
 80074b2:	2000      	movs	r0, #0
 80074b4:	f7f8 ff10 	bl	80002d8 <__aeabi_dsub>
 80074b8:	4602      	mov	r2, r0
 80074ba:	460b      	mov	r3, r1
 80074bc:	4640      	mov	r0, r8
 80074be:	4649      	mov	r1, r9
 80074c0:	f7f9 fb34 	bl	8000b2c <__aeabi_dcmplt>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	f43f af35 	beq.w	8007334 <_dtoa_r+0x464>
 80074ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80074cc:	1e6b      	subs	r3, r5, #1
 80074ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80074d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d0f8      	beq.n	80074ca <_dtoa_r+0x5fa>
 80074d8:	9700      	str	r7, [sp, #0]
 80074da:	e049      	b.n	8007570 <_dtoa_r+0x6a0>
 80074dc:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <_dtoa_r+0x624>)
 80074de:	f7f9 f8b3 	bl	8000648 <__aeabi_dmul>
 80074e2:	4680      	mov	r8, r0
 80074e4:	4689      	mov	r9, r1
 80074e6:	e7bd      	b.n	8007464 <_dtoa_r+0x594>
 80074e8:	0800a0a0 	.word	0x0800a0a0
 80074ec:	0800a078 	.word	0x0800a078
 80074f0:	3ff00000 	.word	0x3ff00000
 80074f4:	40240000 	.word	0x40240000
 80074f8:	401c0000 	.word	0x401c0000
 80074fc:	40140000 	.word	0x40140000
 8007500:	3fe00000 	.word	0x3fe00000
 8007504:	9d01      	ldr	r5, [sp, #4]
 8007506:	4656      	mov	r6, sl
 8007508:	465f      	mov	r7, fp
 800750a:	4642      	mov	r2, r8
 800750c:	464b      	mov	r3, r9
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f9 f9c3 	bl	800089c <__aeabi_ddiv>
 8007516:	f7f9 fb47 	bl	8000ba8 <__aeabi_d2iz>
 800751a:	4682      	mov	sl, r0
 800751c:	f7f9 f82a 	bl	8000574 <__aeabi_i2d>
 8007520:	4642      	mov	r2, r8
 8007522:	464b      	mov	r3, r9
 8007524:	f7f9 f890 	bl	8000648 <__aeabi_dmul>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4630      	mov	r0, r6
 800752e:	4639      	mov	r1, r7
 8007530:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007534:	f7f8 fed0 	bl	80002d8 <__aeabi_dsub>
 8007538:	f805 6b01 	strb.w	r6, [r5], #1
 800753c:	9e01      	ldr	r6, [sp, #4]
 800753e:	9f03      	ldr	r7, [sp, #12]
 8007540:	1bae      	subs	r6, r5, r6
 8007542:	42b7      	cmp	r7, r6
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	d135      	bne.n	80075b6 <_dtoa_r+0x6e6>
 800754a:	f7f8 fec7 	bl	80002dc <__adddf3>
 800754e:	4642      	mov	r2, r8
 8007550:	464b      	mov	r3, r9
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	f7f9 fb07 	bl	8000b68 <__aeabi_dcmpgt>
 800755a:	b9d0      	cbnz	r0, 8007592 <_dtoa_r+0x6c2>
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	4630      	mov	r0, r6
 8007562:	4639      	mov	r1, r7
 8007564:	f7f9 fad8 	bl	8000b18 <__aeabi_dcmpeq>
 8007568:	b110      	cbz	r0, 8007570 <_dtoa_r+0x6a0>
 800756a:	f01a 0f01 	tst.w	sl, #1
 800756e:	d110      	bne.n	8007592 <_dtoa_r+0x6c2>
 8007570:	4620      	mov	r0, r4
 8007572:	ee18 1a10 	vmov	r1, s16
 8007576:	f001 f885 	bl	8008684 <_Bfree>
 800757a:	2300      	movs	r3, #0
 800757c:	9800      	ldr	r0, [sp, #0]
 800757e:	702b      	strb	r3, [r5, #0]
 8007580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007582:	3001      	adds	r0, #1
 8007584:	6018      	str	r0, [r3, #0]
 8007586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007588:	2b00      	cmp	r3, #0
 800758a:	f43f acf1 	beq.w	8006f70 <_dtoa_r+0xa0>
 800758e:	601d      	str	r5, [r3, #0]
 8007590:	e4ee      	b.n	8006f70 <_dtoa_r+0xa0>
 8007592:	9f00      	ldr	r7, [sp, #0]
 8007594:	462b      	mov	r3, r5
 8007596:	461d      	mov	r5, r3
 8007598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800759c:	2a39      	cmp	r2, #57	; 0x39
 800759e:	d106      	bne.n	80075ae <_dtoa_r+0x6de>
 80075a0:	9a01      	ldr	r2, [sp, #4]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d1f7      	bne.n	8007596 <_dtoa_r+0x6c6>
 80075a6:	9901      	ldr	r1, [sp, #4]
 80075a8:	2230      	movs	r2, #48	; 0x30
 80075aa:	3701      	adds	r7, #1
 80075ac:	700a      	strb	r2, [r1, #0]
 80075ae:	781a      	ldrb	r2, [r3, #0]
 80075b0:	3201      	adds	r2, #1
 80075b2:	701a      	strb	r2, [r3, #0]
 80075b4:	e790      	b.n	80074d8 <_dtoa_r+0x608>
 80075b6:	4ba6      	ldr	r3, [pc, #664]	; (8007850 <_dtoa_r+0x980>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	f7f9 f845 	bl	8000648 <__aeabi_dmul>
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4606      	mov	r6, r0
 80075c4:	460f      	mov	r7, r1
 80075c6:	f7f9 faa7 	bl	8000b18 <__aeabi_dcmpeq>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d09d      	beq.n	800750a <_dtoa_r+0x63a>
 80075ce:	e7cf      	b.n	8007570 <_dtoa_r+0x6a0>
 80075d0:	9a08      	ldr	r2, [sp, #32]
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	f000 80d7 	beq.w	8007786 <_dtoa_r+0x8b6>
 80075d8:	9a06      	ldr	r2, [sp, #24]
 80075da:	2a01      	cmp	r2, #1
 80075dc:	f300 80ba 	bgt.w	8007754 <_dtoa_r+0x884>
 80075e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	f000 80b2 	beq.w	800774c <_dtoa_r+0x87c>
 80075e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80075ec:	9e07      	ldr	r6, [sp, #28]
 80075ee:	9d04      	ldr	r5, [sp, #16]
 80075f0:	9a04      	ldr	r2, [sp, #16]
 80075f2:	441a      	add	r2, r3
 80075f4:	9204      	str	r2, [sp, #16]
 80075f6:	9a05      	ldr	r2, [sp, #20]
 80075f8:	2101      	movs	r1, #1
 80075fa:	441a      	add	r2, r3
 80075fc:	4620      	mov	r0, r4
 80075fe:	9205      	str	r2, [sp, #20]
 8007600:	f001 f942 	bl	8008888 <__i2b>
 8007604:	4607      	mov	r7, r0
 8007606:	2d00      	cmp	r5, #0
 8007608:	dd0c      	ble.n	8007624 <_dtoa_r+0x754>
 800760a:	9b05      	ldr	r3, [sp, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dd09      	ble.n	8007624 <_dtoa_r+0x754>
 8007610:	42ab      	cmp	r3, r5
 8007612:	9a04      	ldr	r2, [sp, #16]
 8007614:	bfa8      	it	ge
 8007616:	462b      	movge	r3, r5
 8007618:	1ad2      	subs	r2, r2, r3
 800761a:	9204      	str	r2, [sp, #16]
 800761c:	9a05      	ldr	r2, [sp, #20]
 800761e:	1aed      	subs	r5, r5, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	9305      	str	r3, [sp, #20]
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	b31b      	cbz	r3, 8007670 <_dtoa_r+0x7a0>
 8007628:	9b08      	ldr	r3, [sp, #32]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80af 	beq.w	800778e <_dtoa_r+0x8be>
 8007630:	2e00      	cmp	r6, #0
 8007632:	dd13      	ble.n	800765c <_dtoa_r+0x78c>
 8007634:	4639      	mov	r1, r7
 8007636:	4632      	mov	r2, r6
 8007638:	4620      	mov	r0, r4
 800763a:	f001 f9e5 	bl	8008a08 <__pow5mult>
 800763e:	ee18 2a10 	vmov	r2, s16
 8007642:	4601      	mov	r1, r0
 8007644:	4607      	mov	r7, r0
 8007646:	4620      	mov	r0, r4
 8007648:	f001 f934 	bl	80088b4 <__multiply>
 800764c:	ee18 1a10 	vmov	r1, s16
 8007650:	4680      	mov	r8, r0
 8007652:	4620      	mov	r0, r4
 8007654:	f001 f816 	bl	8008684 <_Bfree>
 8007658:	ee08 8a10 	vmov	s16, r8
 800765c:	9b07      	ldr	r3, [sp, #28]
 800765e:	1b9a      	subs	r2, r3, r6
 8007660:	d006      	beq.n	8007670 <_dtoa_r+0x7a0>
 8007662:	ee18 1a10 	vmov	r1, s16
 8007666:	4620      	mov	r0, r4
 8007668:	f001 f9ce 	bl	8008a08 <__pow5mult>
 800766c:	ee08 0a10 	vmov	s16, r0
 8007670:	2101      	movs	r1, #1
 8007672:	4620      	mov	r0, r4
 8007674:	f001 f908 	bl	8008888 <__i2b>
 8007678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800767a:	2b00      	cmp	r3, #0
 800767c:	4606      	mov	r6, r0
 800767e:	f340 8088 	ble.w	8007792 <_dtoa_r+0x8c2>
 8007682:	461a      	mov	r2, r3
 8007684:	4601      	mov	r1, r0
 8007686:	4620      	mov	r0, r4
 8007688:	f001 f9be 	bl	8008a08 <__pow5mult>
 800768c:	9b06      	ldr	r3, [sp, #24]
 800768e:	2b01      	cmp	r3, #1
 8007690:	4606      	mov	r6, r0
 8007692:	f340 8081 	ble.w	8007798 <_dtoa_r+0x8c8>
 8007696:	f04f 0800 	mov.w	r8, #0
 800769a:	6933      	ldr	r3, [r6, #16]
 800769c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80076a0:	6918      	ldr	r0, [r3, #16]
 80076a2:	f001 f8a1 	bl	80087e8 <__hi0bits>
 80076a6:	f1c0 0020 	rsb	r0, r0, #32
 80076aa:	9b05      	ldr	r3, [sp, #20]
 80076ac:	4418      	add	r0, r3
 80076ae:	f010 001f 	ands.w	r0, r0, #31
 80076b2:	f000 8092 	beq.w	80077da <_dtoa_r+0x90a>
 80076b6:	f1c0 0320 	rsb	r3, r0, #32
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	f340 808a 	ble.w	80077d4 <_dtoa_r+0x904>
 80076c0:	f1c0 001c 	rsb	r0, r0, #28
 80076c4:	9b04      	ldr	r3, [sp, #16]
 80076c6:	4403      	add	r3, r0
 80076c8:	9304      	str	r3, [sp, #16]
 80076ca:	9b05      	ldr	r3, [sp, #20]
 80076cc:	4403      	add	r3, r0
 80076ce:	4405      	add	r5, r0
 80076d0:	9305      	str	r3, [sp, #20]
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd07      	ble.n	80076e8 <_dtoa_r+0x818>
 80076d8:	ee18 1a10 	vmov	r1, s16
 80076dc:	461a      	mov	r2, r3
 80076de:	4620      	mov	r0, r4
 80076e0:	f001 f9ec 	bl	8008abc <__lshift>
 80076e4:	ee08 0a10 	vmov	s16, r0
 80076e8:	9b05      	ldr	r3, [sp, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd05      	ble.n	80076fa <_dtoa_r+0x82a>
 80076ee:	4631      	mov	r1, r6
 80076f0:	461a      	mov	r2, r3
 80076f2:	4620      	mov	r0, r4
 80076f4:	f001 f9e2 	bl	8008abc <__lshift>
 80076f8:	4606      	mov	r6, r0
 80076fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d06e      	beq.n	80077de <_dtoa_r+0x90e>
 8007700:	ee18 0a10 	vmov	r0, s16
 8007704:	4631      	mov	r1, r6
 8007706:	f001 fa49 	bl	8008b9c <__mcmp>
 800770a:	2800      	cmp	r0, #0
 800770c:	da67      	bge.n	80077de <_dtoa_r+0x90e>
 800770e:	9b00      	ldr	r3, [sp, #0]
 8007710:	3b01      	subs	r3, #1
 8007712:	ee18 1a10 	vmov	r1, s16
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	220a      	movs	r2, #10
 800771a:	2300      	movs	r3, #0
 800771c:	4620      	mov	r0, r4
 800771e:	f000 ffd3 	bl	80086c8 <__multadd>
 8007722:	9b08      	ldr	r3, [sp, #32]
 8007724:	ee08 0a10 	vmov	s16, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 81b1 	beq.w	8007a90 <_dtoa_r+0xbc0>
 800772e:	2300      	movs	r3, #0
 8007730:	4639      	mov	r1, r7
 8007732:	220a      	movs	r2, #10
 8007734:	4620      	mov	r0, r4
 8007736:	f000 ffc7 	bl	80086c8 <__multadd>
 800773a:	9b02      	ldr	r3, [sp, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	4607      	mov	r7, r0
 8007740:	f300 808e 	bgt.w	8007860 <_dtoa_r+0x990>
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	2b02      	cmp	r3, #2
 8007748:	dc51      	bgt.n	80077ee <_dtoa_r+0x91e>
 800774a:	e089      	b.n	8007860 <_dtoa_r+0x990>
 800774c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800774e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007752:	e74b      	b.n	80075ec <_dtoa_r+0x71c>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	1e5e      	subs	r6, r3, #1
 8007758:	9b07      	ldr	r3, [sp, #28]
 800775a:	42b3      	cmp	r3, r6
 800775c:	bfbf      	itttt	lt
 800775e:	9b07      	ldrlt	r3, [sp, #28]
 8007760:	9607      	strlt	r6, [sp, #28]
 8007762:	1af2      	sublt	r2, r6, r3
 8007764:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007766:	bfb6      	itet	lt
 8007768:	189b      	addlt	r3, r3, r2
 800776a:	1b9e      	subge	r6, r3, r6
 800776c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800776e:	9b03      	ldr	r3, [sp, #12]
 8007770:	bfb8      	it	lt
 8007772:	2600      	movlt	r6, #0
 8007774:	2b00      	cmp	r3, #0
 8007776:	bfb7      	itett	lt
 8007778:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800777c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007780:	1a9d      	sublt	r5, r3, r2
 8007782:	2300      	movlt	r3, #0
 8007784:	e734      	b.n	80075f0 <_dtoa_r+0x720>
 8007786:	9e07      	ldr	r6, [sp, #28]
 8007788:	9d04      	ldr	r5, [sp, #16]
 800778a:	9f08      	ldr	r7, [sp, #32]
 800778c:	e73b      	b.n	8007606 <_dtoa_r+0x736>
 800778e:	9a07      	ldr	r2, [sp, #28]
 8007790:	e767      	b.n	8007662 <_dtoa_r+0x792>
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	2b01      	cmp	r3, #1
 8007796:	dc18      	bgt.n	80077ca <_dtoa_r+0x8fa>
 8007798:	f1ba 0f00 	cmp.w	sl, #0
 800779c:	d115      	bne.n	80077ca <_dtoa_r+0x8fa>
 800779e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077a2:	b993      	cbnz	r3, 80077ca <_dtoa_r+0x8fa>
 80077a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80077a8:	0d1b      	lsrs	r3, r3, #20
 80077aa:	051b      	lsls	r3, r3, #20
 80077ac:	b183      	cbz	r3, 80077d0 <_dtoa_r+0x900>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	3301      	adds	r3, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9b05      	ldr	r3, [sp, #20]
 80077b6:	3301      	adds	r3, #1
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f04f 0801 	mov.w	r8, #1
 80077be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f47f af6a 	bne.w	800769a <_dtoa_r+0x7ca>
 80077c6:	2001      	movs	r0, #1
 80077c8:	e76f      	b.n	80076aa <_dtoa_r+0x7da>
 80077ca:	f04f 0800 	mov.w	r8, #0
 80077ce:	e7f6      	b.n	80077be <_dtoa_r+0x8ee>
 80077d0:	4698      	mov	r8, r3
 80077d2:	e7f4      	b.n	80077be <_dtoa_r+0x8ee>
 80077d4:	f43f af7d 	beq.w	80076d2 <_dtoa_r+0x802>
 80077d8:	4618      	mov	r0, r3
 80077da:	301c      	adds	r0, #28
 80077dc:	e772      	b.n	80076c4 <_dtoa_r+0x7f4>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dc37      	bgt.n	8007854 <_dtoa_r+0x984>
 80077e4:	9b06      	ldr	r3, [sp, #24]
 80077e6:	2b02      	cmp	r3, #2
 80077e8:	dd34      	ble.n	8007854 <_dtoa_r+0x984>
 80077ea:	9b03      	ldr	r3, [sp, #12]
 80077ec:	9302      	str	r3, [sp, #8]
 80077ee:	9b02      	ldr	r3, [sp, #8]
 80077f0:	b96b      	cbnz	r3, 800780e <_dtoa_r+0x93e>
 80077f2:	4631      	mov	r1, r6
 80077f4:	2205      	movs	r2, #5
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 ff66 	bl	80086c8 <__multadd>
 80077fc:	4601      	mov	r1, r0
 80077fe:	4606      	mov	r6, r0
 8007800:	ee18 0a10 	vmov	r0, s16
 8007804:	f001 f9ca 	bl	8008b9c <__mcmp>
 8007808:	2800      	cmp	r0, #0
 800780a:	f73f adbb 	bgt.w	8007384 <_dtoa_r+0x4b4>
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	9d01      	ldr	r5, [sp, #4]
 8007812:	43db      	mvns	r3, r3
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	4631      	mov	r1, r6
 800781c:	4620      	mov	r0, r4
 800781e:	f000 ff31 	bl	8008684 <_Bfree>
 8007822:	2f00      	cmp	r7, #0
 8007824:	f43f aea4 	beq.w	8007570 <_dtoa_r+0x6a0>
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	d005      	beq.n	800783a <_dtoa_r+0x96a>
 800782e:	45b8      	cmp	r8, r7
 8007830:	d003      	beq.n	800783a <_dtoa_r+0x96a>
 8007832:	4641      	mov	r1, r8
 8007834:	4620      	mov	r0, r4
 8007836:	f000 ff25 	bl	8008684 <_Bfree>
 800783a:	4639      	mov	r1, r7
 800783c:	4620      	mov	r0, r4
 800783e:	f000 ff21 	bl	8008684 <_Bfree>
 8007842:	e695      	b.n	8007570 <_dtoa_r+0x6a0>
 8007844:	2600      	movs	r6, #0
 8007846:	4637      	mov	r7, r6
 8007848:	e7e1      	b.n	800780e <_dtoa_r+0x93e>
 800784a:	9700      	str	r7, [sp, #0]
 800784c:	4637      	mov	r7, r6
 800784e:	e599      	b.n	8007384 <_dtoa_r+0x4b4>
 8007850:	40240000 	.word	0x40240000
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80ca 	beq.w	80079f0 <_dtoa_r+0xb20>
 800785c:	9b03      	ldr	r3, [sp, #12]
 800785e:	9302      	str	r3, [sp, #8]
 8007860:	2d00      	cmp	r5, #0
 8007862:	dd05      	ble.n	8007870 <_dtoa_r+0x9a0>
 8007864:	4639      	mov	r1, r7
 8007866:	462a      	mov	r2, r5
 8007868:	4620      	mov	r0, r4
 800786a:	f001 f927 	bl	8008abc <__lshift>
 800786e:	4607      	mov	r7, r0
 8007870:	f1b8 0f00 	cmp.w	r8, #0
 8007874:	d05b      	beq.n	800792e <_dtoa_r+0xa5e>
 8007876:	6879      	ldr	r1, [r7, #4]
 8007878:	4620      	mov	r0, r4
 800787a:	f000 fec3 	bl	8008604 <_Balloc>
 800787e:	4605      	mov	r5, r0
 8007880:	b928      	cbnz	r0, 800788e <_dtoa_r+0x9be>
 8007882:	4b87      	ldr	r3, [pc, #540]	; (8007aa0 <_dtoa_r+0xbd0>)
 8007884:	4602      	mov	r2, r0
 8007886:	f240 21ea 	movw	r1, #746	; 0x2ea
 800788a:	f7ff bb3b 	b.w	8006f04 <_dtoa_r+0x34>
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	3202      	adds	r2, #2
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	f107 010c 	add.w	r1, r7, #12
 8007898:	300c      	adds	r0, #12
 800789a:	f7fd fbdd 	bl	8005058 <memcpy>
 800789e:	2201      	movs	r2, #1
 80078a0:	4629      	mov	r1, r5
 80078a2:	4620      	mov	r0, r4
 80078a4:	f001 f90a 	bl	8008abc <__lshift>
 80078a8:	9b01      	ldr	r3, [sp, #4]
 80078aa:	f103 0901 	add.w	r9, r3, #1
 80078ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	9305      	str	r3, [sp, #20]
 80078b6:	f00a 0301 	and.w	r3, sl, #1
 80078ba:	46b8      	mov	r8, r7
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	4607      	mov	r7, r0
 80078c0:	4631      	mov	r1, r6
 80078c2:	ee18 0a10 	vmov	r0, s16
 80078c6:	f7ff fa77 	bl	8006db8 <quorem>
 80078ca:	4641      	mov	r1, r8
 80078cc:	9002      	str	r0, [sp, #8]
 80078ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078d2:	ee18 0a10 	vmov	r0, s16
 80078d6:	f001 f961 	bl	8008b9c <__mcmp>
 80078da:	463a      	mov	r2, r7
 80078dc:	9003      	str	r0, [sp, #12]
 80078de:	4631      	mov	r1, r6
 80078e0:	4620      	mov	r0, r4
 80078e2:	f001 f977 	bl	8008bd4 <__mdiff>
 80078e6:	68c2      	ldr	r2, [r0, #12]
 80078e8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80078ec:	4605      	mov	r5, r0
 80078ee:	bb02      	cbnz	r2, 8007932 <_dtoa_r+0xa62>
 80078f0:	4601      	mov	r1, r0
 80078f2:	ee18 0a10 	vmov	r0, s16
 80078f6:	f001 f951 	bl	8008b9c <__mcmp>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4629      	mov	r1, r5
 80078fe:	4620      	mov	r0, r4
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	f000 febf 	bl	8008684 <_Bfree>
 8007906:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800790a:	ea43 0102 	orr.w	r1, r3, r2
 800790e:	9b04      	ldr	r3, [sp, #16]
 8007910:	430b      	orrs	r3, r1
 8007912:	464d      	mov	r5, r9
 8007914:	d10f      	bne.n	8007936 <_dtoa_r+0xa66>
 8007916:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800791a:	d02a      	beq.n	8007972 <_dtoa_r+0xaa2>
 800791c:	9b03      	ldr	r3, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	dd02      	ble.n	8007928 <_dtoa_r+0xa58>
 8007922:	9b02      	ldr	r3, [sp, #8]
 8007924:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007928:	f88b a000 	strb.w	sl, [fp]
 800792c:	e775      	b.n	800781a <_dtoa_r+0x94a>
 800792e:	4638      	mov	r0, r7
 8007930:	e7ba      	b.n	80078a8 <_dtoa_r+0x9d8>
 8007932:	2201      	movs	r2, #1
 8007934:	e7e2      	b.n	80078fc <_dtoa_r+0xa2c>
 8007936:	9b03      	ldr	r3, [sp, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db04      	blt.n	8007946 <_dtoa_r+0xa76>
 800793c:	9906      	ldr	r1, [sp, #24]
 800793e:	430b      	orrs	r3, r1
 8007940:	9904      	ldr	r1, [sp, #16]
 8007942:	430b      	orrs	r3, r1
 8007944:	d122      	bne.n	800798c <_dtoa_r+0xabc>
 8007946:	2a00      	cmp	r2, #0
 8007948:	ddee      	ble.n	8007928 <_dtoa_r+0xa58>
 800794a:	ee18 1a10 	vmov	r1, s16
 800794e:	2201      	movs	r2, #1
 8007950:	4620      	mov	r0, r4
 8007952:	f001 f8b3 	bl	8008abc <__lshift>
 8007956:	4631      	mov	r1, r6
 8007958:	ee08 0a10 	vmov	s16, r0
 800795c:	f001 f91e 	bl	8008b9c <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	dc03      	bgt.n	800796c <_dtoa_r+0xa9c>
 8007964:	d1e0      	bne.n	8007928 <_dtoa_r+0xa58>
 8007966:	f01a 0f01 	tst.w	sl, #1
 800796a:	d0dd      	beq.n	8007928 <_dtoa_r+0xa58>
 800796c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007970:	d1d7      	bne.n	8007922 <_dtoa_r+0xa52>
 8007972:	2339      	movs	r3, #57	; 0x39
 8007974:	f88b 3000 	strb.w	r3, [fp]
 8007978:	462b      	mov	r3, r5
 800797a:	461d      	mov	r5, r3
 800797c:	3b01      	subs	r3, #1
 800797e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007982:	2a39      	cmp	r2, #57	; 0x39
 8007984:	d071      	beq.n	8007a6a <_dtoa_r+0xb9a>
 8007986:	3201      	adds	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e746      	b.n	800781a <_dtoa_r+0x94a>
 800798c:	2a00      	cmp	r2, #0
 800798e:	dd07      	ble.n	80079a0 <_dtoa_r+0xad0>
 8007990:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007994:	d0ed      	beq.n	8007972 <_dtoa_r+0xaa2>
 8007996:	f10a 0301 	add.w	r3, sl, #1
 800799a:	f88b 3000 	strb.w	r3, [fp]
 800799e:	e73c      	b.n	800781a <_dtoa_r+0x94a>
 80079a0:	9b05      	ldr	r3, [sp, #20]
 80079a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80079a6:	4599      	cmp	r9, r3
 80079a8:	d047      	beq.n	8007a3a <_dtoa_r+0xb6a>
 80079aa:	ee18 1a10 	vmov	r1, s16
 80079ae:	2300      	movs	r3, #0
 80079b0:	220a      	movs	r2, #10
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 fe88 	bl	80086c8 <__multadd>
 80079b8:	45b8      	cmp	r8, r7
 80079ba:	ee08 0a10 	vmov	s16, r0
 80079be:	f04f 0300 	mov.w	r3, #0
 80079c2:	f04f 020a 	mov.w	r2, #10
 80079c6:	4641      	mov	r1, r8
 80079c8:	4620      	mov	r0, r4
 80079ca:	d106      	bne.n	80079da <_dtoa_r+0xb0a>
 80079cc:	f000 fe7c 	bl	80086c8 <__multadd>
 80079d0:	4680      	mov	r8, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	f109 0901 	add.w	r9, r9, #1
 80079d8:	e772      	b.n	80078c0 <_dtoa_r+0x9f0>
 80079da:	f000 fe75 	bl	80086c8 <__multadd>
 80079de:	4639      	mov	r1, r7
 80079e0:	4680      	mov	r8, r0
 80079e2:	2300      	movs	r3, #0
 80079e4:	220a      	movs	r2, #10
 80079e6:	4620      	mov	r0, r4
 80079e8:	f000 fe6e 	bl	80086c8 <__multadd>
 80079ec:	4607      	mov	r7, r0
 80079ee:	e7f1      	b.n	80079d4 <_dtoa_r+0xb04>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	9302      	str	r3, [sp, #8]
 80079f4:	9d01      	ldr	r5, [sp, #4]
 80079f6:	ee18 0a10 	vmov	r0, s16
 80079fa:	4631      	mov	r1, r6
 80079fc:	f7ff f9dc 	bl	8006db8 <quorem>
 8007a00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007a04:	9b01      	ldr	r3, [sp, #4]
 8007a06:	f805 ab01 	strb.w	sl, [r5], #1
 8007a0a:	1aea      	subs	r2, r5, r3
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	dd09      	ble.n	8007a26 <_dtoa_r+0xb56>
 8007a12:	ee18 1a10 	vmov	r1, s16
 8007a16:	2300      	movs	r3, #0
 8007a18:	220a      	movs	r2, #10
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fe54 	bl	80086c8 <__multadd>
 8007a20:	ee08 0a10 	vmov	s16, r0
 8007a24:	e7e7      	b.n	80079f6 <_dtoa_r+0xb26>
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bfc8      	it	gt
 8007a2c:	461d      	movgt	r5, r3
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	bfd8      	it	le
 8007a32:	2501      	movle	r5, #1
 8007a34:	441d      	add	r5, r3
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	ee18 1a10 	vmov	r1, s16
 8007a3e:	2201      	movs	r2, #1
 8007a40:	4620      	mov	r0, r4
 8007a42:	f001 f83b 	bl	8008abc <__lshift>
 8007a46:	4631      	mov	r1, r6
 8007a48:	ee08 0a10 	vmov	s16, r0
 8007a4c:	f001 f8a6 	bl	8008b9c <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	dc91      	bgt.n	8007978 <_dtoa_r+0xaa8>
 8007a54:	d102      	bne.n	8007a5c <_dtoa_r+0xb8c>
 8007a56:	f01a 0f01 	tst.w	sl, #1
 8007a5a:	d18d      	bne.n	8007978 <_dtoa_r+0xaa8>
 8007a5c:	462b      	mov	r3, r5
 8007a5e:	461d      	mov	r5, r3
 8007a60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a64:	2a30      	cmp	r2, #48	; 0x30
 8007a66:	d0fa      	beq.n	8007a5e <_dtoa_r+0xb8e>
 8007a68:	e6d7      	b.n	800781a <_dtoa_r+0x94a>
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d184      	bne.n	800797a <_dtoa_r+0xaaa>
 8007a70:	9b00      	ldr	r3, [sp, #0]
 8007a72:	3301      	adds	r3, #1
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	2331      	movs	r3, #49	; 0x31
 8007a78:	7013      	strb	r3, [r2, #0]
 8007a7a:	e6ce      	b.n	800781a <_dtoa_r+0x94a>
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <_dtoa_r+0xbd4>)
 8007a7e:	f7ff ba95 	b.w	8006fac <_dtoa_r+0xdc>
 8007a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f aa6e 	bne.w	8006f66 <_dtoa_r+0x96>
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <_dtoa_r+0xbd8>)
 8007a8c:	f7ff ba8e 	b.w	8006fac <_dtoa_r+0xdc>
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dcae      	bgt.n	80079f4 <_dtoa_r+0xb24>
 8007a96:	9b06      	ldr	r3, [sp, #24]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	f73f aea8 	bgt.w	80077ee <_dtoa_r+0x91e>
 8007a9e:	e7a9      	b.n	80079f4 <_dtoa_r+0xb24>
 8007aa0:	08009f28 	.word	0x08009f28
 8007aa4:	08009d28 	.word	0x08009d28
 8007aa8:	08009ea9 	.word	0x08009ea9

08007aac <__sflush_r>:
 8007aac:	898a      	ldrh	r2, [r1, #12]
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	0710      	lsls	r0, r2, #28
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	d458      	bmi.n	8007b6c <__sflush_r+0xc0>
 8007aba:	684b      	ldr	r3, [r1, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dc05      	bgt.n	8007acc <__sflush_r+0x20>
 8007ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	dc02      	bgt.n	8007acc <__sflush_r+0x20>
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	d0f9      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ad8:	682f      	ldr	r7, [r5, #0]
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	d032      	beq.n	8007b44 <__sflush_r+0x98>
 8007ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	075a      	lsls	r2, r3, #29
 8007ae4:	d505      	bpl.n	8007af2 <__sflush_r+0x46>
 8007ae6:	6863      	ldr	r3, [r4, #4]
 8007ae8:	1ac0      	subs	r0, r0, r3
 8007aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007aec:	b10b      	cbz	r3, 8007af2 <__sflush_r+0x46>
 8007aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007af0:	1ac0      	subs	r0, r0, r3
 8007af2:	2300      	movs	r3, #0
 8007af4:	4602      	mov	r2, r0
 8007af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af8:	6a21      	ldr	r1, [r4, #32]
 8007afa:	4628      	mov	r0, r5
 8007afc:	47b0      	blx	r6
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	d106      	bne.n	8007b12 <__sflush_r+0x66>
 8007b04:	6829      	ldr	r1, [r5, #0]
 8007b06:	291d      	cmp	r1, #29
 8007b08:	d82c      	bhi.n	8007b64 <__sflush_r+0xb8>
 8007b0a:	4a2a      	ldr	r2, [pc, #168]	; (8007bb4 <__sflush_r+0x108>)
 8007b0c:	40ca      	lsrs	r2, r1
 8007b0e:	07d6      	lsls	r6, r2, #31
 8007b10:	d528      	bpl.n	8007b64 <__sflush_r+0xb8>
 8007b12:	2200      	movs	r2, #0
 8007b14:	6062      	str	r2, [r4, #4]
 8007b16:	04d9      	lsls	r1, r3, #19
 8007b18:	6922      	ldr	r2, [r4, #16]
 8007b1a:	6022      	str	r2, [r4, #0]
 8007b1c:	d504      	bpl.n	8007b28 <__sflush_r+0x7c>
 8007b1e:	1c42      	adds	r2, r0, #1
 8007b20:	d101      	bne.n	8007b26 <__sflush_r+0x7a>
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	b903      	cbnz	r3, 8007b28 <__sflush_r+0x7c>
 8007b26:	6560      	str	r0, [r4, #84]	; 0x54
 8007b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2a:	602f      	str	r7, [r5, #0]
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d0ca      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b34:	4299      	cmp	r1, r3
 8007b36:	d002      	beq.n	8007b3e <__sflush_r+0x92>
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f001 fa3b 	bl	8008fb4 <_free_r>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	6360      	str	r0, [r4, #52]	; 0x34
 8007b42:	e7c1      	b.n	8007ac8 <__sflush_r+0x1c>
 8007b44:	6a21      	ldr	r1, [r4, #32]
 8007b46:	2301      	movs	r3, #1
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b0      	blx	r6
 8007b4c:	1c41      	adds	r1, r0, #1
 8007b4e:	d1c7      	bne.n	8007ae0 <__sflush_r+0x34>
 8007b50:	682b      	ldr	r3, [r5, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0c4      	beq.n	8007ae0 <__sflush_r+0x34>
 8007b56:	2b1d      	cmp	r3, #29
 8007b58:	d001      	beq.n	8007b5e <__sflush_r+0xb2>
 8007b5a:	2b16      	cmp	r3, #22
 8007b5c:	d101      	bne.n	8007b62 <__sflush_r+0xb6>
 8007b5e:	602f      	str	r7, [r5, #0]
 8007b60:	e7b1      	b.n	8007ac6 <__sflush_r+0x1a>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	e7ad      	b.n	8007ac8 <__sflush_r+0x1c>
 8007b6c:	690f      	ldr	r7, [r1, #16]
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	d0a9      	beq.n	8007ac6 <__sflush_r+0x1a>
 8007b72:	0793      	lsls	r3, r2, #30
 8007b74:	680e      	ldr	r6, [r1, #0]
 8007b76:	bf08      	it	eq
 8007b78:	694b      	ldreq	r3, [r1, #20]
 8007b7a:	600f      	str	r7, [r1, #0]
 8007b7c:	bf18      	it	ne
 8007b7e:	2300      	movne	r3, #0
 8007b80:	eba6 0807 	sub.w	r8, r6, r7
 8007b84:	608b      	str	r3, [r1, #8]
 8007b86:	f1b8 0f00 	cmp.w	r8, #0
 8007b8a:	dd9c      	ble.n	8007ac6 <__sflush_r+0x1a>
 8007b8c:	6a21      	ldr	r1, [r4, #32]
 8007b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b90:	4643      	mov	r3, r8
 8007b92:	463a      	mov	r2, r7
 8007b94:	4628      	mov	r0, r5
 8007b96:	47b0      	blx	r6
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	dc06      	bgt.n	8007baa <__sflush_r+0xfe>
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ba8:	e78e      	b.n	8007ac8 <__sflush_r+0x1c>
 8007baa:	4407      	add	r7, r0
 8007bac:	eba8 0800 	sub.w	r8, r8, r0
 8007bb0:	e7e9      	b.n	8007b86 <__sflush_r+0xda>
 8007bb2:	bf00      	nop
 8007bb4:	20400001 	.word	0x20400001

08007bb8 <_fflush_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	690b      	ldr	r3, [r1, #16]
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	b913      	cbnz	r3, 8007bc8 <_fflush_r+0x10>
 8007bc2:	2500      	movs	r5, #0
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	b118      	cbz	r0, 8007bd2 <_fflush_r+0x1a>
 8007bca:	6983      	ldr	r3, [r0, #24]
 8007bcc:	b90b      	cbnz	r3, 8007bd2 <_fflush_r+0x1a>
 8007bce:	f000 f887 	bl	8007ce0 <__sinit>
 8007bd2:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <_fflush_r+0x6c>)
 8007bd4:	429c      	cmp	r4, r3
 8007bd6:	d11b      	bne.n	8007c10 <_fflush_r+0x58>
 8007bd8:	686c      	ldr	r4, [r5, #4]
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ef      	beq.n	8007bc2 <_fflush_r+0xa>
 8007be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007be4:	07d0      	lsls	r0, r2, #31
 8007be6:	d404      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007be8:	0599      	lsls	r1, r3, #22
 8007bea:	d402      	bmi.n	8007bf2 <_fflush_r+0x3a>
 8007bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bee:	f000 fc88 	bl	8008502 <__retarget_lock_acquire_recursive>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f7ff ff59 	bl	8007aac <__sflush_r>
 8007bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bfc:	07da      	lsls	r2, r3, #31
 8007bfe:	4605      	mov	r5, r0
 8007c00:	d4e0      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	d4dd      	bmi.n	8007bc4 <_fflush_r+0xc>
 8007c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c0a:	f000 fc7b 	bl	8008504 <__retarget_lock_release_recursive>
 8007c0e:	e7d9      	b.n	8007bc4 <_fflush_r+0xc>
 8007c10:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <_fflush_r+0x70>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <_fflush_r+0x62>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7df      	b.n	8007bda <_fflush_r+0x22>
 8007c1a:	4b04      	ldr	r3, [pc, #16]	; (8007c2c <_fflush_r+0x74>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7da      	b.n	8007bda <_fflush_r+0x22>
 8007c24:	08009f5c 	.word	0x08009f5c
 8007c28:	08009f7c 	.word	0x08009f7c
 8007c2c:	08009f3c 	.word	0x08009f3c

08007c30 <std>:
 8007c30:	2300      	movs	r3, #0
 8007c32:	b510      	push	{r4, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	e9c0 3300 	strd	r3, r3, [r0]
 8007c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c3e:	6083      	str	r3, [r0, #8]
 8007c40:	8181      	strh	r1, [r0, #12]
 8007c42:	6643      	str	r3, [r0, #100]	; 0x64
 8007c44:	81c2      	strh	r2, [r0, #14]
 8007c46:	6183      	str	r3, [r0, #24]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	305c      	adds	r0, #92	; 0x5c
 8007c4e:	f7fd fa11 	bl	8005074 <memset>
 8007c52:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <std+0x38>)
 8007c54:	6263      	str	r3, [r4, #36]	; 0x24
 8007c56:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <std+0x3c>)
 8007c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c5a:	4b05      	ldr	r3, [pc, #20]	; (8007c70 <std+0x40>)
 8007c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <std+0x44>)
 8007c60:	6224      	str	r4, [r4, #32]
 8007c62:	6323      	str	r3, [r4, #48]	; 0x30
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	bf00      	nop
 8007c68:	08009711 	.word	0x08009711
 8007c6c:	08009733 	.word	0x08009733
 8007c70:	0800976b 	.word	0x0800976b
 8007c74:	0800978f 	.word	0x0800978f

08007c78 <_cleanup_r>:
 8007c78:	4901      	ldr	r1, [pc, #4]	; (8007c80 <_cleanup_r+0x8>)
 8007c7a:	f000 b8af 	b.w	8007ddc <_fwalk_reent>
 8007c7e:	bf00      	nop
 8007c80:	08007bb9 	.word	0x08007bb9

08007c84 <__sfmoreglue>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	2268      	movs	r2, #104	; 0x68
 8007c88:	1e4d      	subs	r5, r1, #1
 8007c8a:	4355      	muls	r5, r2
 8007c8c:	460e      	mov	r6, r1
 8007c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c92:	f001 f9fb 	bl	800908c <_malloc_r>
 8007c96:	4604      	mov	r4, r0
 8007c98:	b140      	cbz	r0, 8007cac <__sfmoreglue+0x28>
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8007ca0:	300c      	adds	r0, #12
 8007ca2:	60a0      	str	r0, [r4, #8]
 8007ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ca8:	f7fd f9e4 	bl	8005074 <memset>
 8007cac:	4620      	mov	r0, r4
 8007cae:	bd70      	pop	{r4, r5, r6, pc}

08007cb0 <__sfp_lock_acquire>:
 8007cb0:	4801      	ldr	r0, [pc, #4]	; (8007cb8 <__sfp_lock_acquire+0x8>)
 8007cb2:	f000 bc26 	b.w	8008502 <__retarget_lock_acquire_recursive>
 8007cb6:	bf00      	nop
 8007cb8:	200003b1 	.word	0x200003b1

08007cbc <__sfp_lock_release>:
 8007cbc:	4801      	ldr	r0, [pc, #4]	; (8007cc4 <__sfp_lock_release+0x8>)
 8007cbe:	f000 bc21 	b.w	8008504 <__retarget_lock_release_recursive>
 8007cc2:	bf00      	nop
 8007cc4:	200003b1 	.word	0x200003b1

08007cc8 <__sinit_lock_acquire>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	; (8007cd0 <__sinit_lock_acquire+0x8>)
 8007cca:	f000 bc1a 	b.w	8008502 <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	200003b2 	.word	0x200003b2

08007cd4 <__sinit_lock_release>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sinit_lock_release+0x8>)
 8007cd6:	f000 bc15 	b.w	8008504 <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	200003b2 	.word	0x200003b2

08007ce0 <__sinit>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	f7ff fff0 	bl	8007cc8 <__sinit_lock_acquire>
 8007ce8:	69a3      	ldr	r3, [r4, #24]
 8007cea:	b11b      	cbz	r3, 8007cf4 <__sinit+0x14>
 8007cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf0:	f7ff bff0 	b.w	8007cd4 <__sinit_lock_release>
 8007cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <__sinit+0x68>)
 8007cfc:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <__sinit+0x6c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d02:	42a3      	cmp	r3, r4
 8007d04:	bf04      	itt	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	61a3      	streq	r3, [r4, #24]
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 f820 	bl	8007d50 <__sfp>
 8007d10:	6060      	str	r0, [r4, #4]
 8007d12:	4620      	mov	r0, r4
 8007d14:	f000 f81c 	bl	8007d50 <__sfp>
 8007d18:	60a0      	str	r0, [r4, #8]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 f818 	bl	8007d50 <__sfp>
 8007d20:	2200      	movs	r2, #0
 8007d22:	60e0      	str	r0, [r4, #12]
 8007d24:	2104      	movs	r1, #4
 8007d26:	6860      	ldr	r0, [r4, #4]
 8007d28:	f7ff ff82 	bl	8007c30 <std>
 8007d2c:	68a0      	ldr	r0, [r4, #8]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	2109      	movs	r1, #9
 8007d32:	f7ff ff7d 	bl	8007c30 <std>
 8007d36:	68e0      	ldr	r0, [r4, #12]
 8007d38:	2202      	movs	r2, #2
 8007d3a:	2112      	movs	r1, #18
 8007d3c:	f7ff ff78 	bl	8007c30 <std>
 8007d40:	2301      	movs	r3, #1
 8007d42:	61a3      	str	r3, [r4, #24]
 8007d44:	e7d2      	b.n	8007cec <__sinit+0xc>
 8007d46:	bf00      	nop
 8007d48:	08009d14 	.word	0x08009d14
 8007d4c:	08007c79 	.word	0x08007c79

08007d50 <__sfp>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	4607      	mov	r7, r0
 8007d54:	f7ff ffac 	bl	8007cb0 <__sfp_lock_acquire>
 8007d58:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <__sfp+0x84>)
 8007d5a:	681e      	ldr	r6, [r3, #0]
 8007d5c:	69b3      	ldr	r3, [r6, #24]
 8007d5e:	b913      	cbnz	r3, 8007d66 <__sfp+0x16>
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ffbd 	bl	8007ce0 <__sinit>
 8007d66:	3648      	adds	r6, #72	; 0x48
 8007d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	d503      	bpl.n	8007d78 <__sfp+0x28>
 8007d70:	6833      	ldr	r3, [r6, #0]
 8007d72:	b30b      	cbz	r3, 8007db8 <__sfp+0x68>
 8007d74:	6836      	ldr	r6, [r6, #0]
 8007d76:	e7f7      	b.n	8007d68 <__sfp+0x18>
 8007d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d7c:	b9d5      	cbnz	r5, 8007db4 <__sfp+0x64>
 8007d7e:	4b16      	ldr	r3, [pc, #88]	; (8007dd8 <__sfp+0x88>)
 8007d80:	60e3      	str	r3, [r4, #12]
 8007d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d86:	6665      	str	r5, [r4, #100]	; 0x64
 8007d88:	f000 fbba 	bl	8008500 <__retarget_lock_init_recursive>
 8007d8c:	f7ff ff96 	bl	8007cbc <__sfp_lock_release>
 8007d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d98:	6025      	str	r5, [r4, #0]
 8007d9a:	61a5      	str	r5, [r4, #24]
 8007d9c:	2208      	movs	r2, #8
 8007d9e:	4629      	mov	r1, r5
 8007da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007da4:	f7fd f966 	bl	8005074 <memset>
 8007da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db0:	4620      	mov	r0, r4
 8007db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007db4:	3468      	adds	r4, #104	; 0x68
 8007db6:	e7d9      	b.n	8007d6c <__sfp+0x1c>
 8007db8:	2104      	movs	r1, #4
 8007dba:	4638      	mov	r0, r7
 8007dbc:	f7ff ff62 	bl	8007c84 <__sfmoreglue>
 8007dc0:	4604      	mov	r4, r0
 8007dc2:	6030      	str	r0, [r6, #0]
 8007dc4:	2800      	cmp	r0, #0
 8007dc6:	d1d5      	bne.n	8007d74 <__sfp+0x24>
 8007dc8:	f7ff ff78 	bl	8007cbc <__sfp_lock_release>
 8007dcc:	230c      	movs	r3, #12
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	e7ee      	b.n	8007db0 <__sfp+0x60>
 8007dd2:	bf00      	nop
 8007dd4:	08009d14 	.word	0x08009d14
 8007dd8:	ffff0001 	.word	0xffff0001

08007ddc <_fwalk_reent>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	4606      	mov	r6, r0
 8007de2:	4688      	mov	r8, r1
 8007de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007de8:	2700      	movs	r7, #0
 8007dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007dee:	f1b9 0901 	subs.w	r9, r9, #1
 8007df2:	d505      	bpl.n	8007e00 <_fwalk_reent+0x24>
 8007df4:	6824      	ldr	r4, [r4, #0]
 8007df6:	2c00      	cmp	r4, #0
 8007df8:	d1f7      	bne.n	8007dea <_fwalk_reent+0xe>
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e00:	89ab      	ldrh	r3, [r5, #12]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d907      	bls.n	8007e16 <_fwalk_reent+0x3a>
 8007e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	d003      	beq.n	8007e16 <_fwalk_reent+0x3a>
 8007e0e:	4629      	mov	r1, r5
 8007e10:	4630      	mov	r0, r6
 8007e12:	47c0      	blx	r8
 8007e14:	4307      	orrs	r7, r0
 8007e16:	3568      	adds	r5, #104	; 0x68
 8007e18:	e7e9      	b.n	8007dee <_fwalk_reent+0x12>

08007e1a <rshift>:
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e24:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e28:	f100 0414 	add.w	r4, r0, #20
 8007e2c:	dd45      	ble.n	8007eba <rshift+0xa0>
 8007e2e:	f011 011f 	ands.w	r1, r1, #31
 8007e32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e3a:	d10c      	bne.n	8007e56 <rshift+0x3c>
 8007e3c:	f100 0710 	add.w	r7, r0, #16
 8007e40:	4629      	mov	r1, r5
 8007e42:	42b1      	cmp	r1, r6
 8007e44:	d334      	bcc.n	8007eb0 <rshift+0x96>
 8007e46:	1a9b      	subs	r3, r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	1eea      	subs	r2, r5, #3
 8007e4c:	4296      	cmp	r6, r2
 8007e4e:	bf38      	it	cc
 8007e50:	2300      	movcc	r3, #0
 8007e52:	4423      	add	r3, r4
 8007e54:	e015      	b.n	8007e82 <rshift+0x68>
 8007e56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e5a:	f1c1 0820 	rsb	r8, r1, #32
 8007e5e:	40cf      	lsrs	r7, r1
 8007e60:	f105 0e04 	add.w	lr, r5, #4
 8007e64:	46a1      	mov	r9, r4
 8007e66:	4576      	cmp	r6, lr
 8007e68:	46f4      	mov	ip, lr
 8007e6a:	d815      	bhi.n	8007e98 <rshift+0x7e>
 8007e6c:	1a9a      	subs	r2, r3, r2
 8007e6e:	0092      	lsls	r2, r2, #2
 8007e70:	3a04      	subs	r2, #4
 8007e72:	3501      	adds	r5, #1
 8007e74:	42ae      	cmp	r6, r5
 8007e76:	bf38      	it	cc
 8007e78:	2200      	movcc	r2, #0
 8007e7a:	18a3      	adds	r3, r4, r2
 8007e7c:	50a7      	str	r7, [r4, r2]
 8007e7e:	b107      	cbz	r7, 8007e82 <rshift+0x68>
 8007e80:	3304      	adds	r3, #4
 8007e82:	1b1a      	subs	r2, r3, r4
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e8a:	bf08      	it	eq
 8007e8c:	2300      	moveq	r3, #0
 8007e8e:	6102      	str	r2, [r0, #16]
 8007e90:	bf08      	it	eq
 8007e92:	6143      	streq	r3, [r0, #20]
 8007e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e98:	f8dc c000 	ldr.w	ip, [ip]
 8007e9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ea0:	ea4c 0707 	orr.w	r7, ip, r7
 8007ea4:	f849 7b04 	str.w	r7, [r9], #4
 8007ea8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007eac:	40cf      	lsrs	r7, r1
 8007eae:	e7da      	b.n	8007e66 <rshift+0x4c>
 8007eb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eb4:	f847 cf04 	str.w	ip, [r7, #4]!
 8007eb8:	e7c3      	b.n	8007e42 <rshift+0x28>
 8007eba:	4623      	mov	r3, r4
 8007ebc:	e7e1      	b.n	8007e82 <rshift+0x68>

08007ebe <__hexdig_fun>:
 8007ebe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007ec2:	2b09      	cmp	r3, #9
 8007ec4:	d802      	bhi.n	8007ecc <__hexdig_fun+0xe>
 8007ec6:	3820      	subs	r0, #32
 8007ec8:	b2c0      	uxtb	r0, r0
 8007eca:	4770      	bx	lr
 8007ecc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d801      	bhi.n	8007ed8 <__hexdig_fun+0x1a>
 8007ed4:	3847      	subs	r0, #71	; 0x47
 8007ed6:	e7f7      	b.n	8007ec8 <__hexdig_fun+0xa>
 8007ed8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007edc:	2b05      	cmp	r3, #5
 8007ede:	d801      	bhi.n	8007ee4 <__hexdig_fun+0x26>
 8007ee0:	3827      	subs	r0, #39	; 0x27
 8007ee2:	e7f1      	b.n	8007ec8 <__hexdig_fun+0xa>
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	4770      	bx	lr

08007ee8 <__gethex>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	ed2d 8b02 	vpush	{d8}
 8007ef0:	b089      	sub	sp, #36	; 0x24
 8007ef2:	ee08 0a10 	vmov	s16, r0
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	4bb4      	ldr	r3, [pc, #720]	; (80081cc <__gethex+0x2e4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	4618      	mov	r0, r3
 8007f00:	468b      	mov	fp, r1
 8007f02:	4690      	mov	r8, r2
 8007f04:	f7f8 f98c 	bl	8000220 <strlen>
 8007f08:	9b01      	ldr	r3, [sp, #4]
 8007f0a:	f8db 2000 	ldr.w	r2, [fp]
 8007f0e:	4403      	add	r3, r0
 8007f10:	4682      	mov	sl, r0
 8007f12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f16:	9305      	str	r3, [sp, #20]
 8007f18:	1c93      	adds	r3, r2, #2
 8007f1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f22:	32fe      	adds	r2, #254	; 0xfe
 8007f24:	18d1      	adds	r1, r2, r3
 8007f26:	461f      	mov	r7, r3
 8007f28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f2c:	9100      	str	r1, [sp, #0]
 8007f2e:	2830      	cmp	r0, #48	; 0x30
 8007f30:	d0f8      	beq.n	8007f24 <__gethex+0x3c>
 8007f32:	f7ff ffc4 	bl	8007ebe <__hexdig_fun>
 8007f36:	4604      	mov	r4, r0
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d13a      	bne.n	8007fb2 <__gethex+0xca>
 8007f3c:	9901      	ldr	r1, [sp, #4]
 8007f3e:	4652      	mov	r2, sl
 8007f40:	4638      	mov	r0, r7
 8007f42:	f001 fc28 	bl	8009796 <strncmp>
 8007f46:	4605      	mov	r5, r0
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d168      	bne.n	800801e <__gethex+0x136>
 8007f4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007f50:	eb07 060a 	add.w	r6, r7, sl
 8007f54:	f7ff ffb3 	bl	8007ebe <__hexdig_fun>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d062      	beq.n	8008022 <__gethex+0x13a>
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	7818      	ldrb	r0, [r3, #0]
 8007f60:	2830      	cmp	r0, #48	; 0x30
 8007f62:	461f      	mov	r7, r3
 8007f64:	f103 0301 	add.w	r3, r3, #1
 8007f68:	d0f9      	beq.n	8007f5e <__gethex+0x76>
 8007f6a:	f7ff ffa8 	bl	8007ebe <__hexdig_fun>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	fab0 f480 	clz	r4, r0
 8007f74:	0964      	lsrs	r4, r4, #5
 8007f76:	4635      	mov	r5, r6
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	4616      	mov	r6, r2
 8007f7e:	3201      	adds	r2, #1
 8007f80:	7830      	ldrb	r0, [r6, #0]
 8007f82:	f7ff ff9c 	bl	8007ebe <__hexdig_fun>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1f8      	bne.n	8007f7c <__gethex+0x94>
 8007f8a:	9901      	ldr	r1, [sp, #4]
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	4630      	mov	r0, r6
 8007f90:	f001 fc01 	bl	8009796 <strncmp>
 8007f94:	b980      	cbnz	r0, 8007fb8 <__gethex+0xd0>
 8007f96:	b94d      	cbnz	r5, 8007fac <__gethex+0xc4>
 8007f98:	eb06 050a 	add.w	r5, r6, sl
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	4616      	mov	r6, r2
 8007fa0:	3201      	adds	r2, #1
 8007fa2:	7830      	ldrb	r0, [r6, #0]
 8007fa4:	f7ff ff8b 	bl	8007ebe <__hexdig_fun>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d1f8      	bne.n	8007f9e <__gethex+0xb6>
 8007fac:	1bad      	subs	r5, r5, r6
 8007fae:	00ad      	lsls	r5, r5, #2
 8007fb0:	e004      	b.n	8007fbc <__gethex+0xd4>
 8007fb2:	2400      	movs	r4, #0
 8007fb4:	4625      	mov	r5, r4
 8007fb6:	e7e0      	b.n	8007f7a <__gethex+0x92>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	d1f7      	bne.n	8007fac <__gethex+0xc4>
 8007fbc:	7833      	ldrb	r3, [r6, #0]
 8007fbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fc2:	2b50      	cmp	r3, #80	; 0x50
 8007fc4:	d13b      	bne.n	800803e <__gethex+0x156>
 8007fc6:	7873      	ldrb	r3, [r6, #1]
 8007fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8007fca:	d02c      	beq.n	8008026 <__gethex+0x13e>
 8007fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8007fce:	d02e      	beq.n	800802e <__gethex+0x146>
 8007fd0:	1c71      	adds	r1, r6, #1
 8007fd2:	f04f 0900 	mov.w	r9, #0
 8007fd6:	7808      	ldrb	r0, [r1, #0]
 8007fd8:	f7ff ff71 	bl	8007ebe <__hexdig_fun>
 8007fdc:	1e43      	subs	r3, r0, #1
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b18      	cmp	r3, #24
 8007fe2:	d82c      	bhi.n	800803e <__gethex+0x156>
 8007fe4:	f1a0 0210 	sub.w	r2, r0, #16
 8007fe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fec:	f7ff ff67 	bl	8007ebe <__hexdig_fun>
 8007ff0:	1e43      	subs	r3, r0, #1
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b18      	cmp	r3, #24
 8007ff6:	d91d      	bls.n	8008034 <__gethex+0x14c>
 8007ff8:	f1b9 0f00 	cmp.w	r9, #0
 8007ffc:	d000      	beq.n	8008000 <__gethex+0x118>
 8007ffe:	4252      	negs	r2, r2
 8008000:	4415      	add	r5, r2
 8008002:	f8cb 1000 	str.w	r1, [fp]
 8008006:	b1e4      	cbz	r4, 8008042 <__gethex+0x15a>
 8008008:	9b00      	ldr	r3, [sp, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	bf14      	ite	ne
 800800e:	2700      	movne	r7, #0
 8008010:	2706      	moveq	r7, #6
 8008012:	4638      	mov	r0, r7
 8008014:	b009      	add	sp, #36	; 0x24
 8008016:	ecbd 8b02 	vpop	{d8}
 800801a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801e:	463e      	mov	r6, r7
 8008020:	4625      	mov	r5, r4
 8008022:	2401      	movs	r4, #1
 8008024:	e7ca      	b.n	8007fbc <__gethex+0xd4>
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	1cb1      	adds	r1, r6, #2
 800802c:	e7d3      	b.n	8007fd6 <__gethex+0xee>
 800802e:	f04f 0901 	mov.w	r9, #1
 8008032:	e7fa      	b.n	800802a <__gethex+0x142>
 8008034:	230a      	movs	r3, #10
 8008036:	fb03 0202 	mla	r2, r3, r2, r0
 800803a:	3a10      	subs	r2, #16
 800803c:	e7d4      	b.n	8007fe8 <__gethex+0x100>
 800803e:	4631      	mov	r1, r6
 8008040:	e7df      	b.n	8008002 <__gethex+0x11a>
 8008042:	1bf3      	subs	r3, r6, r7
 8008044:	3b01      	subs	r3, #1
 8008046:	4621      	mov	r1, r4
 8008048:	2b07      	cmp	r3, #7
 800804a:	dc0b      	bgt.n	8008064 <__gethex+0x17c>
 800804c:	ee18 0a10 	vmov	r0, s16
 8008050:	f000 fad8 	bl	8008604 <_Balloc>
 8008054:	4604      	mov	r4, r0
 8008056:	b940      	cbnz	r0, 800806a <__gethex+0x182>
 8008058:	4b5d      	ldr	r3, [pc, #372]	; (80081d0 <__gethex+0x2e8>)
 800805a:	4602      	mov	r2, r0
 800805c:	21de      	movs	r1, #222	; 0xde
 800805e:	485d      	ldr	r0, [pc, #372]	; (80081d4 <__gethex+0x2ec>)
 8008060:	f001 fbcc 	bl	80097fc <__assert_func>
 8008064:	3101      	adds	r1, #1
 8008066:	105b      	asrs	r3, r3, #1
 8008068:	e7ee      	b.n	8008048 <__gethex+0x160>
 800806a:	f100 0914 	add.w	r9, r0, #20
 800806e:	f04f 0b00 	mov.w	fp, #0
 8008072:	f1ca 0301 	rsb	r3, sl, #1
 8008076:	f8cd 9008 	str.w	r9, [sp, #8]
 800807a:	f8cd b000 	str.w	fp, [sp]
 800807e:	9306      	str	r3, [sp, #24]
 8008080:	42b7      	cmp	r7, r6
 8008082:	d340      	bcc.n	8008106 <__gethex+0x21e>
 8008084:	9802      	ldr	r0, [sp, #8]
 8008086:	9b00      	ldr	r3, [sp, #0]
 8008088:	f840 3b04 	str.w	r3, [r0], #4
 800808c:	eba0 0009 	sub.w	r0, r0, r9
 8008090:	1080      	asrs	r0, r0, #2
 8008092:	0146      	lsls	r6, r0, #5
 8008094:	6120      	str	r0, [r4, #16]
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fba6 	bl	80087e8 <__hi0bits>
 800809c:	1a30      	subs	r0, r6, r0
 800809e:	f8d8 6000 	ldr.w	r6, [r8]
 80080a2:	42b0      	cmp	r0, r6
 80080a4:	dd63      	ble.n	800816e <__gethex+0x286>
 80080a6:	1b87      	subs	r7, r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	4620      	mov	r0, r4
 80080ac:	f000 ff4a 	bl	8008f44 <__any_on>
 80080b0:	4682      	mov	sl, r0
 80080b2:	b1a8      	cbz	r0, 80080e0 <__gethex+0x1f8>
 80080b4:	1e7b      	subs	r3, r7, #1
 80080b6:	1159      	asrs	r1, r3, #5
 80080b8:	f003 021f 	and.w	r2, r3, #31
 80080bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80080c0:	f04f 0a01 	mov.w	sl, #1
 80080c4:	fa0a f202 	lsl.w	r2, sl, r2
 80080c8:	420a      	tst	r2, r1
 80080ca:	d009      	beq.n	80080e0 <__gethex+0x1f8>
 80080cc:	4553      	cmp	r3, sl
 80080ce:	dd05      	ble.n	80080dc <__gethex+0x1f4>
 80080d0:	1eb9      	subs	r1, r7, #2
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 ff36 	bl	8008f44 <__any_on>
 80080d8:	2800      	cmp	r0, #0
 80080da:	d145      	bne.n	8008168 <__gethex+0x280>
 80080dc:	f04f 0a02 	mov.w	sl, #2
 80080e0:	4639      	mov	r1, r7
 80080e2:	4620      	mov	r0, r4
 80080e4:	f7ff fe99 	bl	8007e1a <rshift>
 80080e8:	443d      	add	r5, r7
 80080ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080ee:	42ab      	cmp	r3, r5
 80080f0:	da4c      	bge.n	800818c <__gethex+0x2a4>
 80080f2:	ee18 0a10 	vmov	r0, s16
 80080f6:	4621      	mov	r1, r4
 80080f8:	f000 fac4 	bl	8008684 <_Bfree>
 80080fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80080fe:	2300      	movs	r3, #0
 8008100:	6013      	str	r3, [r2, #0]
 8008102:	27a3      	movs	r7, #163	; 0xa3
 8008104:	e785      	b.n	8008012 <__gethex+0x12a>
 8008106:	1e73      	subs	r3, r6, #1
 8008108:	9a05      	ldr	r2, [sp, #20]
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008110:	4293      	cmp	r3, r2
 8008112:	d019      	beq.n	8008148 <__gethex+0x260>
 8008114:	f1bb 0f20 	cmp.w	fp, #32
 8008118:	d107      	bne.n	800812a <__gethex+0x242>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	9a00      	ldr	r2, [sp, #0]
 800811e:	f843 2b04 	str.w	r2, [r3], #4
 8008122:	9302      	str	r3, [sp, #8]
 8008124:	2300      	movs	r3, #0
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	469b      	mov	fp, r3
 800812a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800812e:	f7ff fec6 	bl	8007ebe <__hexdig_fun>
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	f000 000f 	and.w	r0, r0, #15
 8008138:	fa00 f00b 	lsl.w	r0, r0, fp
 800813c:	4303      	orrs	r3, r0
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	f10b 0b04 	add.w	fp, fp, #4
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	e00d      	b.n	8008164 <__gethex+0x27c>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	9a06      	ldr	r2, [sp, #24]
 800814c:	4413      	add	r3, r2
 800814e:	42bb      	cmp	r3, r7
 8008150:	d3e0      	bcc.n	8008114 <__gethex+0x22c>
 8008152:	4618      	mov	r0, r3
 8008154:	9901      	ldr	r1, [sp, #4]
 8008156:	9307      	str	r3, [sp, #28]
 8008158:	4652      	mov	r2, sl
 800815a:	f001 fb1c 	bl	8009796 <strncmp>
 800815e:	9b07      	ldr	r3, [sp, #28]
 8008160:	2800      	cmp	r0, #0
 8008162:	d1d7      	bne.n	8008114 <__gethex+0x22c>
 8008164:	461e      	mov	r6, r3
 8008166:	e78b      	b.n	8008080 <__gethex+0x198>
 8008168:	f04f 0a03 	mov.w	sl, #3
 800816c:	e7b8      	b.n	80080e0 <__gethex+0x1f8>
 800816e:	da0a      	bge.n	8008186 <__gethex+0x29e>
 8008170:	1a37      	subs	r7, r6, r0
 8008172:	4621      	mov	r1, r4
 8008174:	ee18 0a10 	vmov	r0, s16
 8008178:	463a      	mov	r2, r7
 800817a:	f000 fc9f 	bl	8008abc <__lshift>
 800817e:	1bed      	subs	r5, r5, r7
 8008180:	4604      	mov	r4, r0
 8008182:	f100 0914 	add.w	r9, r0, #20
 8008186:	f04f 0a00 	mov.w	sl, #0
 800818a:	e7ae      	b.n	80080ea <__gethex+0x202>
 800818c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008190:	42a8      	cmp	r0, r5
 8008192:	dd72      	ble.n	800827a <__gethex+0x392>
 8008194:	1b45      	subs	r5, r0, r5
 8008196:	42ae      	cmp	r6, r5
 8008198:	dc36      	bgt.n	8008208 <__gethex+0x320>
 800819a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d02a      	beq.n	80081f8 <__gethex+0x310>
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d02c      	beq.n	8008200 <__gethex+0x318>
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d11c      	bne.n	80081e4 <__gethex+0x2fc>
 80081aa:	42ae      	cmp	r6, r5
 80081ac:	d11a      	bne.n	80081e4 <__gethex+0x2fc>
 80081ae:	2e01      	cmp	r6, #1
 80081b0:	d112      	bne.n	80081d8 <__gethex+0x2f0>
 80081b2:	9a04      	ldr	r2, [sp, #16]
 80081b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	2301      	movs	r3, #1
 80081bc:	6123      	str	r3, [r4, #16]
 80081be:	f8c9 3000 	str.w	r3, [r9]
 80081c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081c4:	2762      	movs	r7, #98	; 0x62
 80081c6:	601c      	str	r4, [r3, #0]
 80081c8:	e723      	b.n	8008012 <__gethex+0x12a>
 80081ca:	bf00      	nop
 80081cc:	0800a004 	.word	0x0800a004
 80081d0:	08009f28 	.word	0x08009f28
 80081d4:	08009f9c 	.word	0x08009f9c
 80081d8:	1e71      	subs	r1, r6, #1
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 feb2 	bl	8008f44 <__any_on>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d1e6      	bne.n	80081b2 <__gethex+0x2ca>
 80081e4:	ee18 0a10 	vmov	r0, s16
 80081e8:	4621      	mov	r1, r4
 80081ea:	f000 fa4b 	bl	8008684 <_Bfree>
 80081ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081f0:	2300      	movs	r3, #0
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	2750      	movs	r7, #80	; 0x50
 80081f6:	e70c      	b.n	8008012 <__gethex+0x12a>
 80081f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f2      	bne.n	80081e4 <__gethex+0x2fc>
 80081fe:	e7d8      	b.n	80081b2 <__gethex+0x2ca>
 8008200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d5      	bne.n	80081b2 <__gethex+0x2ca>
 8008206:	e7ed      	b.n	80081e4 <__gethex+0x2fc>
 8008208:	1e6f      	subs	r7, r5, #1
 800820a:	f1ba 0f00 	cmp.w	sl, #0
 800820e:	d131      	bne.n	8008274 <__gethex+0x38c>
 8008210:	b127      	cbz	r7, 800821c <__gethex+0x334>
 8008212:	4639      	mov	r1, r7
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fe95 	bl	8008f44 <__any_on>
 800821a:	4682      	mov	sl, r0
 800821c:	117b      	asrs	r3, r7, #5
 800821e:	2101      	movs	r1, #1
 8008220:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008224:	f007 071f 	and.w	r7, r7, #31
 8008228:	fa01 f707 	lsl.w	r7, r1, r7
 800822c:	421f      	tst	r7, r3
 800822e:	4629      	mov	r1, r5
 8008230:	4620      	mov	r0, r4
 8008232:	bf18      	it	ne
 8008234:	f04a 0a02 	orrne.w	sl, sl, #2
 8008238:	1b76      	subs	r6, r6, r5
 800823a:	f7ff fdee 	bl	8007e1a <rshift>
 800823e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008242:	2702      	movs	r7, #2
 8008244:	f1ba 0f00 	cmp.w	sl, #0
 8008248:	d048      	beq.n	80082dc <__gethex+0x3f4>
 800824a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d015      	beq.n	800827e <__gethex+0x396>
 8008252:	2b03      	cmp	r3, #3
 8008254:	d017      	beq.n	8008286 <__gethex+0x39e>
 8008256:	2b01      	cmp	r3, #1
 8008258:	d109      	bne.n	800826e <__gethex+0x386>
 800825a:	f01a 0f02 	tst.w	sl, #2
 800825e:	d006      	beq.n	800826e <__gethex+0x386>
 8008260:	f8d9 0000 	ldr.w	r0, [r9]
 8008264:	ea4a 0a00 	orr.w	sl, sl, r0
 8008268:	f01a 0f01 	tst.w	sl, #1
 800826c:	d10e      	bne.n	800828c <__gethex+0x3a4>
 800826e:	f047 0710 	orr.w	r7, r7, #16
 8008272:	e033      	b.n	80082dc <__gethex+0x3f4>
 8008274:	f04f 0a01 	mov.w	sl, #1
 8008278:	e7d0      	b.n	800821c <__gethex+0x334>
 800827a:	2701      	movs	r7, #1
 800827c:	e7e2      	b.n	8008244 <__gethex+0x35c>
 800827e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008280:	f1c3 0301 	rsb	r3, r3, #1
 8008284:	9315      	str	r3, [sp, #84]	; 0x54
 8008286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0f0      	beq.n	800826e <__gethex+0x386>
 800828c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008290:	f104 0314 	add.w	r3, r4, #20
 8008294:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008298:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800829c:	f04f 0c00 	mov.w	ip, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082a6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80082aa:	d01c      	beq.n	80082e6 <__gethex+0x3fe>
 80082ac:	3201      	adds	r2, #1
 80082ae:	6002      	str	r2, [r0, #0]
 80082b0:	2f02      	cmp	r7, #2
 80082b2:	f104 0314 	add.w	r3, r4, #20
 80082b6:	d13f      	bne.n	8008338 <__gethex+0x450>
 80082b8:	f8d8 2000 	ldr.w	r2, [r8]
 80082bc:	3a01      	subs	r2, #1
 80082be:	42b2      	cmp	r2, r6
 80082c0:	d10a      	bne.n	80082d8 <__gethex+0x3f0>
 80082c2:	1171      	asrs	r1, r6, #5
 80082c4:	2201      	movs	r2, #1
 80082c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082ca:	f006 061f 	and.w	r6, r6, #31
 80082ce:	fa02 f606 	lsl.w	r6, r2, r6
 80082d2:	421e      	tst	r6, r3
 80082d4:	bf18      	it	ne
 80082d6:	4617      	movne	r7, r2
 80082d8:	f047 0720 	orr.w	r7, r7, #32
 80082dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082de:	601c      	str	r4, [r3, #0]
 80082e0:	9b04      	ldr	r3, [sp, #16]
 80082e2:	601d      	str	r5, [r3, #0]
 80082e4:	e695      	b.n	8008012 <__gethex+0x12a>
 80082e6:	4299      	cmp	r1, r3
 80082e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80082ec:	d8d8      	bhi.n	80082a0 <__gethex+0x3b8>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	459b      	cmp	fp, r3
 80082f2:	db19      	blt.n	8008328 <__gethex+0x440>
 80082f4:	6861      	ldr	r1, [r4, #4]
 80082f6:	ee18 0a10 	vmov	r0, s16
 80082fa:	3101      	adds	r1, #1
 80082fc:	f000 f982 	bl	8008604 <_Balloc>
 8008300:	4681      	mov	r9, r0
 8008302:	b918      	cbnz	r0, 800830c <__gethex+0x424>
 8008304:	4b1a      	ldr	r3, [pc, #104]	; (8008370 <__gethex+0x488>)
 8008306:	4602      	mov	r2, r0
 8008308:	2184      	movs	r1, #132	; 0x84
 800830a:	e6a8      	b.n	800805e <__gethex+0x176>
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	3202      	adds	r2, #2
 8008310:	f104 010c 	add.w	r1, r4, #12
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	300c      	adds	r0, #12
 8008318:	f7fc fe9e 	bl	8005058 <memcpy>
 800831c:	4621      	mov	r1, r4
 800831e:	ee18 0a10 	vmov	r0, s16
 8008322:	f000 f9af 	bl	8008684 <_Bfree>
 8008326:	464c      	mov	r4, r9
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008330:	6122      	str	r2, [r4, #16]
 8008332:	2201      	movs	r2, #1
 8008334:	615a      	str	r2, [r3, #20]
 8008336:	e7bb      	b.n	80082b0 <__gethex+0x3c8>
 8008338:	6922      	ldr	r2, [r4, #16]
 800833a:	455a      	cmp	r2, fp
 800833c:	dd0b      	ble.n	8008356 <__gethex+0x46e>
 800833e:	2101      	movs	r1, #1
 8008340:	4620      	mov	r0, r4
 8008342:	f7ff fd6a 	bl	8007e1a <rshift>
 8008346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800834a:	3501      	adds	r5, #1
 800834c:	42ab      	cmp	r3, r5
 800834e:	f6ff aed0 	blt.w	80080f2 <__gethex+0x20a>
 8008352:	2701      	movs	r7, #1
 8008354:	e7c0      	b.n	80082d8 <__gethex+0x3f0>
 8008356:	f016 061f 	ands.w	r6, r6, #31
 800835a:	d0fa      	beq.n	8008352 <__gethex+0x46a>
 800835c:	4453      	add	r3, sl
 800835e:	f1c6 0620 	rsb	r6, r6, #32
 8008362:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008366:	f000 fa3f 	bl	80087e8 <__hi0bits>
 800836a:	42b0      	cmp	r0, r6
 800836c:	dbe7      	blt.n	800833e <__gethex+0x456>
 800836e:	e7f0      	b.n	8008352 <__gethex+0x46a>
 8008370:	08009f28 	.word	0x08009f28

08008374 <L_shift>:
 8008374:	f1c2 0208 	rsb	r2, r2, #8
 8008378:	0092      	lsls	r2, r2, #2
 800837a:	b570      	push	{r4, r5, r6, lr}
 800837c:	f1c2 0620 	rsb	r6, r2, #32
 8008380:	6843      	ldr	r3, [r0, #4]
 8008382:	6804      	ldr	r4, [r0, #0]
 8008384:	fa03 f506 	lsl.w	r5, r3, r6
 8008388:	432c      	orrs	r4, r5
 800838a:	40d3      	lsrs	r3, r2
 800838c:	6004      	str	r4, [r0, #0]
 800838e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008392:	4288      	cmp	r0, r1
 8008394:	d3f4      	bcc.n	8008380 <L_shift+0xc>
 8008396:	bd70      	pop	{r4, r5, r6, pc}

08008398 <__match>:
 8008398:	b530      	push	{r4, r5, lr}
 800839a:	6803      	ldr	r3, [r0, #0]
 800839c:	3301      	adds	r3, #1
 800839e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a2:	b914      	cbnz	r4, 80083aa <__match+0x12>
 80083a4:	6003      	str	r3, [r0, #0]
 80083a6:	2001      	movs	r0, #1
 80083a8:	bd30      	pop	{r4, r5, pc}
 80083aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083b2:	2d19      	cmp	r5, #25
 80083b4:	bf98      	it	ls
 80083b6:	3220      	addls	r2, #32
 80083b8:	42a2      	cmp	r2, r4
 80083ba:	d0f0      	beq.n	800839e <__match+0x6>
 80083bc:	2000      	movs	r0, #0
 80083be:	e7f3      	b.n	80083a8 <__match+0x10>

080083c0 <__hexnan>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	680b      	ldr	r3, [r1, #0]
 80083c6:	115e      	asrs	r6, r3, #5
 80083c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80083cc:	f013 031f 	ands.w	r3, r3, #31
 80083d0:	b087      	sub	sp, #28
 80083d2:	bf18      	it	ne
 80083d4:	3604      	addne	r6, #4
 80083d6:	2500      	movs	r5, #0
 80083d8:	1f37      	subs	r7, r6, #4
 80083da:	4690      	mov	r8, r2
 80083dc:	6802      	ldr	r2, [r0, #0]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	4682      	mov	sl, r0
 80083e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80083e6:	46b9      	mov	r9, r7
 80083e8:	463c      	mov	r4, r7
 80083ea:	9502      	str	r5, [sp, #8]
 80083ec:	46ab      	mov	fp, r5
 80083ee:	7851      	ldrb	r1, [r2, #1]
 80083f0:	1c53      	adds	r3, r2, #1
 80083f2:	9303      	str	r3, [sp, #12]
 80083f4:	b341      	cbz	r1, 8008448 <__hexnan+0x88>
 80083f6:	4608      	mov	r0, r1
 80083f8:	9205      	str	r2, [sp, #20]
 80083fa:	9104      	str	r1, [sp, #16]
 80083fc:	f7ff fd5f 	bl	8007ebe <__hexdig_fun>
 8008400:	2800      	cmp	r0, #0
 8008402:	d14f      	bne.n	80084a4 <__hexnan+0xe4>
 8008404:	9904      	ldr	r1, [sp, #16]
 8008406:	9a05      	ldr	r2, [sp, #20]
 8008408:	2920      	cmp	r1, #32
 800840a:	d818      	bhi.n	800843e <__hexnan+0x7e>
 800840c:	9b02      	ldr	r3, [sp, #8]
 800840e:	459b      	cmp	fp, r3
 8008410:	dd13      	ble.n	800843a <__hexnan+0x7a>
 8008412:	454c      	cmp	r4, r9
 8008414:	d206      	bcs.n	8008424 <__hexnan+0x64>
 8008416:	2d07      	cmp	r5, #7
 8008418:	dc04      	bgt.n	8008424 <__hexnan+0x64>
 800841a:	462a      	mov	r2, r5
 800841c:	4649      	mov	r1, r9
 800841e:	4620      	mov	r0, r4
 8008420:	f7ff ffa8 	bl	8008374 <L_shift>
 8008424:	4544      	cmp	r4, r8
 8008426:	d950      	bls.n	80084ca <__hexnan+0x10a>
 8008428:	2300      	movs	r3, #0
 800842a:	f1a4 0904 	sub.w	r9, r4, #4
 800842e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008432:	f8cd b008 	str.w	fp, [sp, #8]
 8008436:	464c      	mov	r4, r9
 8008438:	461d      	mov	r5, r3
 800843a:	9a03      	ldr	r2, [sp, #12]
 800843c:	e7d7      	b.n	80083ee <__hexnan+0x2e>
 800843e:	2929      	cmp	r1, #41	; 0x29
 8008440:	d156      	bne.n	80084f0 <__hexnan+0x130>
 8008442:	3202      	adds	r2, #2
 8008444:	f8ca 2000 	str.w	r2, [sl]
 8008448:	f1bb 0f00 	cmp.w	fp, #0
 800844c:	d050      	beq.n	80084f0 <__hexnan+0x130>
 800844e:	454c      	cmp	r4, r9
 8008450:	d206      	bcs.n	8008460 <__hexnan+0xa0>
 8008452:	2d07      	cmp	r5, #7
 8008454:	dc04      	bgt.n	8008460 <__hexnan+0xa0>
 8008456:	462a      	mov	r2, r5
 8008458:	4649      	mov	r1, r9
 800845a:	4620      	mov	r0, r4
 800845c:	f7ff ff8a 	bl	8008374 <L_shift>
 8008460:	4544      	cmp	r4, r8
 8008462:	d934      	bls.n	80084ce <__hexnan+0x10e>
 8008464:	f1a8 0204 	sub.w	r2, r8, #4
 8008468:	4623      	mov	r3, r4
 800846a:	f853 1b04 	ldr.w	r1, [r3], #4
 800846e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008472:	429f      	cmp	r7, r3
 8008474:	d2f9      	bcs.n	800846a <__hexnan+0xaa>
 8008476:	1b3b      	subs	r3, r7, r4
 8008478:	f023 0303 	bic.w	r3, r3, #3
 800847c:	3304      	adds	r3, #4
 800847e:	3401      	adds	r4, #1
 8008480:	3e03      	subs	r6, #3
 8008482:	42b4      	cmp	r4, r6
 8008484:	bf88      	it	hi
 8008486:	2304      	movhi	r3, #4
 8008488:	4443      	add	r3, r8
 800848a:	2200      	movs	r2, #0
 800848c:	f843 2b04 	str.w	r2, [r3], #4
 8008490:	429f      	cmp	r7, r3
 8008492:	d2fb      	bcs.n	800848c <__hexnan+0xcc>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	b91b      	cbnz	r3, 80084a0 <__hexnan+0xe0>
 8008498:	4547      	cmp	r7, r8
 800849a:	d127      	bne.n	80084ec <__hexnan+0x12c>
 800849c:	2301      	movs	r3, #1
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	2005      	movs	r0, #5
 80084a2:	e026      	b.n	80084f2 <__hexnan+0x132>
 80084a4:	3501      	adds	r5, #1
 80084a6:	2d08      	cmp	r5, #8
 80084a8:	f10b 0b01 	add.w	fp, fp, #1
 80084ac:	dd06      	ble.n	80084bc <__hexnan+0xfc>
 80084ae:	4544      	cmp	r4, r8
 80084b0:	d9c3      	bls.n	800843a <__hexnan+0x7a>
 80084b2:	2300      	movs	r3, #0
 80084b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80084b8:	2501      	movs	r5, #1
 80084ba:	3c04      	subs	r4, #4
 80084bc:	6822      	ldr	r2, [r4, #0]
 80084be:	f000 000f 	and.w	r0, r0, #15
 80084c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	e7b7      	b.n	800843a <__hexnan+0x7a>
 80084ca:	2508      	movs	r5, #8
 80084cc:	e7b5      	b.n	800843a <__hexnan+0x7a>
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d0df      	beq.n	8008494 <__hexnan+0xd4>
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084d8:	f1c3 0320 	rsb	r3, r3, #32
 80084dc:	fa22 f303 	lsr.w	r3, r2, r3
 80084e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80084e4:	401a      	ands	r2, r3
 80084e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80084ea:	e7d3      	b.n	8008494 <__hexnan+0xd4>
 80084ec:	3f04      	subs	r7, #4
 80084ee:	e7d1      	b.n	8008494 <__hexnan+0xd4>
 80084f0:	2004      	movs	r0, #4
 80084f2:	b007      	add	sp, #28
 80084f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084f8 <_localeconv_r>:
 80084f8:	4800      	ldr	r0, [pc, #0]	; (80084fc <_localeconv_r+0x4>)
 80084fa:	4770      	bx	lr
 80084fc:	20000170 	.word	0x20000170

08008500 <__retarget_lock_init_recursive>:
 8008500:	4770      	bx	lr

08008502 <__retarget_lock_acquire_recursive>:
 8008502:	4770      	bx	lr

08008504 <__retarget_lock_release_recursive>:
 8008504:	4770      	bx	lr

08008506 <__swhatbuf_r>:
 8008506:	b570      	push	{r4, r5, r6, lr}
 8008508:	460e      	mov	r6, r1
 800850a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800850e:	2900      	cmp	r1, #0
 8008510:	b096      	sub	sp, #88	; 0x58
 8008512:	4614      	mov	r4, r2
 8008514:	461d      	mov	r5, r3
 8008516:	da08      	bge.n	800852a <__swhatbuf_r+0x24>
 8008518:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	602a      	str	r2, [r5, #0]
 8008520:	061a      	lsls	r2, r3, #24
 8008522:	d410      	bmi.n	8008546 <__swhatbuf_r+0x40>
 8008524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008528:	e00e      	b.n	8008548 <__swhatbuf_r+0x42>
 800852a:	466a      	mov	r2, sp
 800852c:	f001 f9a6 	bl	800987c <_fstat_r>
 8008530:	2800      	cmp	r0, #0
 8008532:	dbf1      	blt.n	8008518 <__swhatbuf_r+0x12>
 8008534:	9a01      	ldr	r2, [sp, #4]
 8008536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800853a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800853e:	425a      	negs	r2, r3
 8008540:	415a      	adcs	r2, r3
 8008542:	602a      	str	r2, [r5, #0]
 8008544:	e7ee      	b.n	8008524 <__swhatbuf_r+0x1e>
 8008546:	2340      	movs	r3, #64	; 0x40
 8008548:	2000      	movs	r0, #0
 800854a:	6023      	str	r3, [r4, #0]
 800854c:	b016      	add	sp, #88	; 0x58
 800854e:	bd70      	pop	{r4, r5, r6, pc}

08008550 <__smakebuf_r>:
 8008550:	898b      	ldrh	r3, [r1, #12]
 8008552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008554:	079d      	lsls	r5, r3, #30
 8008556:	4606      	mov	r6, r0
 8008558:	460c      	mov	r4, r1
 800855a:	d507      	bpl.n	800856c <__smakebuf_r+0x1c>
 800855c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	6123      	str	r3, [r4, #16]
 8008564:	2301      	movs	r3, #1
 8008566:	6163      	str	r3, [r4, #20]
 8008568:	b002      	add	sp, #8
 800856a:	bd70      	pop	{r4, r5, r6, pc}
 800856c:	ab01      	add	r3, sp, #4
 800856e:	466a      	mov	r2, sp
 8008570:	f7ff ffc9 	bl	8008506 <__swhatbuf_r>
 8008574:	9900      	ldr	r1, [sp, #0]
 8008576:	4605      	mov	r5, r0
 8008578:	4630      	mov	r0, r6
 800857a:	f000 fd87 	bl	800908c <_malloc_r>
 800857e:	b948      	cbnz	r0, 8008594 <__smakebuf_r+0x44>
 8008580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008584:	059a      	lsls	r2, r3, #22
 8008586:	d4ef      	bmi.n	8008568 <__smakebuf_r+0x18>
 8008588:	f023 0303 	bic.w	r3, r3, #3
 800858c:	f043 0302 	orr.w	r3, r3, #2
 8008590:	81a3      	strh	r3, [r4, #12]
 8008592:	e7e3      	b.n	800855c <__smakebuf_r+0xc>
 8008594:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <__smakebuf_r+0x7c>)
 8008596:	62b3      	str	r3, [r6, #40]	; 0x28
 8008598:	89a3      	ldrh	r3, [r4, #12]
 800859a:	6020      	str	r0, [r4, #0]
 800859c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	9b00      	ldr	r3, [sp, #0]
 80085a4:	6163      	str	r3, [r4, #20]
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	6120      	str	r0, [r4, #16]
 80085aa:	b15b      	cbz	r3, 80085c4 <__smakebuf_r+0x74>
 80085ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085b0:	4630      	mov	r0, r6
 80085b2:	f001 f975 	bl	80098a0 <_isatty_r>
 80085b6:	b128      	cbz	r0, 80085c4 <__smakebuf_r+0x74>
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	f023 0303 	bic.w	r3, r3, #3
 80085be:	f043 0301 	orr.w	r3, r3, #1
 80085c2:	81a3      	strh	r3, [r4, #12]
 80085c4:	89a0      	ldrh	r0, [r4, #12]
 80085c6:	4305      	orrs	r5, r0
 80085c8:	81a5      	strh	r5, [r4, #12]
 80085ca:	e7cd      	b.n	8008568 <__smakebuf_r+0x18>
 80085cc:	08007c79 	.word	0x08007c79

080085d0 <malloc>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <malloc+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f000 bd59 	b.w	800908c <_malloc_r>
 80085da:	bf00      	nop
 80085dc:	20000018 	.word	0x20000018

080085e0 <__ascii_mbtowc>:
 80085e0:	b082      	sub	sp, #8
 80085e2:	b901      	cbnz	r1, 80085e6 <__ascii_mbtowc+0x6>
 80085e4:	a901      	add	r1, sp, #4
 80085e6:	b142      	cbz	r2, 80085fa <__ascii_mbtowc+0x1a>
 80085e8:	b14b      	cbz	r3, 80085fe <__ascii_mbtowc+0x1e>
 80085ea:	7813      	ldrb	r3, [r2, #0]
 80085ec:	600b      	str	r3, [r1, #0]
 80085ee:	7812      	ldrb	r2, [r2, #0]
 80085f0:	1e10      	subs	r0, r2, #0
 80085f2:	bf18      	it	ne
 80085f4:	2001      	movne	r0, #1
 80085f6:	b002      	add	sp, #8
 80085f8:	4770      	bx	lr
 80085fa:	4610      	mov	r0, r2
 80085fc:	e7fb      	b.n	80085f6 <__ascii_mbtowc+0x16>
 80085fe:	f06f 0001 	mvn.w	r0, #1
 8008602:	e7f8      	b.n	80085f6 <__ascii_mbtowc+0x16>

08008604 <_Balloc>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008608:	4604      	mov	r4, r0
 800860a:	460d      	mov	r5, r1
 800860c:	b976      	cbnz	r6, 800862c <_Balloc+0x28>
 800860e:	2010      	movs	r0, #16
 8008610:	f7ff ffde 	bl	80085d0 <malloc>
 8008614:	4602      	mov	r2, r0
 8008616:	6260      	str	r0, [r4, #36]	; 0x24
 8008618:	b920      	cbnz	r0, 8008624 <_Balloc+0x20>
 800861a:	4b18      	ldr	r3, [pc, #96]	; (800867c <_Balloc+0x78>)
 800861c:	4818      	ldr	r0, [pc, #96]	; (8008680 <_Balloc+0x7c>)
 800861e:	2166      	movs	r1, #102	; 0x66
 8008620:	f001 f8ec 	bl	80097fc <__assert_func>
 8008624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008628:	6006      	str	r6, [r0, #0]
 800862a:	60c6      	str	r6, [r0, #12]
 800862c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800862e:	68f3      	ldr	r3, [r6, #12]
 8008630:	b183      	cbz	r3, 8008654 <_Balloc+0x50>
 8008632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800863a:	b9b8      	cbnz	r0, 800866c <_Balloc+0x68>
 800863c:	2101      	movs	r1, #1
 800863e:	fa01 f605 	lsl.w	r6, r1, r5
 8008642:	1d72      	adds	r2, r6, #5
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fc9d 	bl	8008f86 <_calloc_r>
 800864c:	b160      	cbz	r0, 8008668 <_Balloc+0x64>
 800864e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008652:	e00e      	b.n	8008672 <_Balloc+0x6e>
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	2104      	movs	r1, #4
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fc94 	bl	8008f86 <_calloc_r>
 800865e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008660:	60f0      	str	r0, [r6, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <_Balloc+0x2e>
 8008668:	2000      	movs	r0, #0
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	6802      	ldr	r2, [r0, #0]
 800866e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008672:	2300      	movs	r3, #0
 8008674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008678:	e7f7      	b.n	800866a <_Balloc+0x66>
 800867a:	bf00      	nop
 800867c:	08009eb6 	.word	0x08009eb6
 8008680:	0800a018 	.word	0x0800a018

08008684 <_Bfree>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008688:	4605      	mov	r5, r0
 800868a:	460c      	mov	r4, r1
 800868c:	b976      	cbnz	r6, 80086ac <_Bfree+0x28>
 800868e:	2010      	movs	r0, #16
 8008690:	f7ff ff9e 	bl	80085d0 <malloc>
 8008694:	4602      	mov	r2, r0
 8008696:	6268      	str	r0, [r5, #36]	; 0x24
 8008698:	b920      	cbnz	r0, 80086a4 <_Bfree+0x20>
 800869a:	4b09      	ldr	r3, [pc, #36]	; (80086c0 <_Bfree+0x3c>)
 800869c:	4809      	ldr	r0, [pc, #36]	; (80086c4 <_Bfree+0x40>)
 800869e:	218a      	movs	r1, #138	; 0x8a
 80086a0:	f001 f8ac 	bl	80097fc <__assert_func>
 80086a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086a8:	6006      	str	r6, [r0, #0]
 80086aa:	60c6      	str	r6, [r0, #12]
 80086ac:	b13c      	cbz	r4, 80086be <_Bfree+0x3a>
 80086ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086b0:	6862      	ldr	r2, [r4, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086b8:	6021      	str	r1, [r4, #0]
 80086ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	08009eb6 	.word	0x08009eb6
 80086c4:	0800a018 	.word	0x0800a018

080086c8 <__multadd>:
 80086c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086cc:	690d      	ldr	r5, [r1, #16]
 80086ce:	4607      	mov	r7, r0
 80086d0:	460c      	mov	r4, r1
 80086d2:	461e      	mov	r6, r3
 80086d4:	f101 0c14 	add.w	ip, r1, #20
 80086d8:	2000      	movs	r0, #0
 80086da:	f8dc 3000 	ldr.w	r3, [ip]
 80086de:	b299      	uxth	r1, r3
 80086e0:	fb02 6101 	mla	r1, r2, r1, r6
 80086e4:	0c1e      	lsrs	r6, r3, #16
 80086e6:	0c0b      	lsrs	r3, r1, #16
 80086e8:	fb02 3306 	mla	r3, r2, r6, r3
 80086ec:	b289      	uxth	r1, r1
 80086ee:	3001      	adds	r0, #1
 80086f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80086f4:	4285      	cmp	r5, r0
 80086f6:	f84c 1b04 	str.w	r1, [ip], #4
 80086fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80086fe:	dcec      	bgt.n	80086da <__multadd+0x12>
 8008700:	b30e      	cbz	r6, 8008746 <__multadd+0x7e>
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	42ab      	cmp	r3, r5
 8008706:	dc19      	bgt.n	800873c <__multadd+0x74>
 8008708:	6861      	ldr	r1, [r4, #4]
 800870a:	4638      	mov	r0, r7
 800870c:	3101      	adds	r1, #1
 800870e:	f7ff ff79 	bl	8008604 <_Balloc>
 8008712:	4680      	mov	r8, r0
 8008714:	b928      	cbnz	r0, 8008722 <__multadd+0x5a>
 8008716:	4602      	mov	r2, r0
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <__multadd+0x84>)
 800871a:	480d      	ldr	r0, [pc, #52]	; (8008750 <__multadd+0x88>)
 800871c:	21b5      	movs	r1, #181	; 0xb5
 800871e:	f001 f86d 	bl	80097fc <__assert_func>
 8008722:	6922      	ldr	r2, [r4, #16]
 8008724:	3202      	adds	r2, #2
 8008726:	f104 010c 	add.w	r1, r4, #12
 800872a:	0092      	lsls	r2, r2, #2
 800872c:	300c      	adds	r0, #12
 800872e:	f7fc fc93 	bl	8005058 <memcpy>
 8008732:	4621      	mov	r1, r4
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ffa5 	bl	8008684 <_Bfree>
 800873a:	4644      	mov	r4, r8
 800873c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008740:	3501      	adds	r5, #1
 8008742:	615e      	str	r6, [r3, #20]
 8008744:	6125      	str	r5, [r4, #16]
 8008746:	4620      	mov	r0, r4
 8008748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800874c:	08009f28 	.word	0x08009f28
 8008750:	0800a018 	.word	0x0800a018

08008754 <__s2b>:
 8008754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008758:	460c      	mov	r4, r1
 800875a:	4615      	mov	r5, r2
 800875c:	461f      	mov	r7, r3
 800875e:	2209      	movs	r2, #9
 8008760:	3308      	adds	r3, #8
 8008762:	4606      	mov	r6, r0
 8008764:	fb93 f3f2 	sdiv	r3, r3, r2
 8008768:	2100      	movs	r1, #0
 800876a:	2201      	movs	r2, #1
 800876c:	429a      	cmp	r2, r3
 800876e:	db09      	blt.n	8008784 <__s2b+0x30>
 8008770:	4630      	mov	r0, r6
 8008772:	f7ff ff47 	bl	8008604 <_Balloc>
 8008776:	b940      	cbnz	r0, 800878a <__s2b+0x36>
 8008778:	4602      	mov	r2, r0
 800877a:	4b19      	ldr	r3, [pc, #100]	; (80087e0 <__s2b+0x8c>)
 800877c:	4819      	ldr	r0, [pc, #100]	; (80087e4 <__s2b+0x90>)
 800877e:	21ce      	movs	r1, #206	; 0xce
 8008780:	f001 f83c 	bl	80097fc <__assert_func>
 8008784:	0052      	lsls	r2, r2, #1
 8008786:	3101      	adds	r1, #1
 8008788:	e7f0      	b.n	800876c <__s2b+0x18>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	6143      	str	r3, [r0, #20]
 800878e:	2d09      	cmp	r5, #9
 8008790:	f04f 0301 	mov.w	r3, #1
 8008794:	6103      	str	r3, [r0, #16]
 8008796:	dd16      	ble.n	80087c6 <__s2b+0x72>
 8008798:	f104 0909 	add.w	r9, r4, #9
 800879c:	46c8      	mov	r8, r9
 800879e:	442c      	add	r4, r5
 80087a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087a4:	4601      	mov	r1, r0
 80087a6:	3b30      	subs	r3, #48	; 0x30
 80087a8:	220a      	movs	r2, #10
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ff8c 	bl	80086c8 <__multadd>
 80087b0:	45a0      	cmp	r8, r4
 80087b2:	d1f5      	bne.n	80087a0 <__s2b+0x4c>
 80087b4:	f1a5 0408 	sub.w	r4, r5, #8
 80087b8:	444c      	add	r4, r9
 80087ba:	1b2d      	subs	r5, r5, r4
 80087bc:	1963      	adds	r3, r4, r5
 80087be:	42bb      	cmp	r3, r7
 80087c0:	db04      	blt.n	80087cc <__s2b+0x78>
 80087c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087c6:	340a      	adds	r4, #10
 80087c8:	2509      	movs	r5, #9
 80087ca:	e7f6      	b.n	80087ba <__s2b+0x66>
 80087cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087d0:	4601      	mov	r1, r0
 80087d2:	3b30      	subs	r3, #48	; 0x30
 80087d4:	220a      	movs	r2, #10
 80087d6:	4630      	mov	r0, r6
 80087d8:	f7ff ff76 	bl	80086c8 <__multadd>
 80087dc:	e7ee      	b.n	80087bc <__s2b+0x68>
 80087de:	bf00      	nop
 80087e0:	08009f28 	.word	0x08009f28
 80087e4:	0800a018 	.word	0x0800a018

080087e8 <__hi0bits>:
 80087e8:	0c03      	lsrs	r3, r0, #16
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	b9d3      	cbnz	r3, 8008824 <__hi0bits+0x3c>
 80087ee:	0400      	lsls	r0, r0, #16
 80087f0:	2310      	movs	r3, #16
 80087f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087f6:	bf04      	itt	eq
 80087f8:	0200      	lsleq	r0, r0, #8
 80087fa:	3308      	addeq	r3, #8
 80087fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008800:	bf04      	itt	eq
 8008802:	0100      	lsleq	r0, r0, #4
 8008804:	3304      	addeq	r3, #4
 8008806:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800880a:	bf04      	itt	eq
 800880c:	0080      	lsleq	r0, r0, #2
 800880e:	3302      	addeq	r3, #2
 8008810:	2800      	cmp	r0, #0
 8008812:	db05      	blt.n	8008820 <__hi0bits+0x38>
 8008814:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008818:	f103 0301 	add.w	r3, r3, #1
 800881c:	bf08      	it	eq
 800881e:	2320      	moveq	r3, #32
 8008820:	4618      	mov	r0, r3
 8008822:	4770      	bx	lr
 8008824:	2300      	movs	r3, #0
 8008826:	e7e4      	b.n	80087f2 <__hi0bits+0xa>

08008828 <__lo0bits>:
 8008828:	6803      	ldr	r3, [r0, #0]
 800882a:	f013 0207 	ands.w	r2, r3, #7
 800882e:	4601      	mov	r1, r0
 8008830:	d00b      	beq.n	800884a <__lo0bits+0x22>
 8008832:	07da      	lsls	r2, r3, #31
 8008834:	d423      	bmi.n	800887e <__lo0bits+0x56>
 8008836:	0798      	lsls	r0, r3, #30
 8008838:	bf49      	itett	mi
 800883a:	085b      	lsrmi	r3, r3, #1
 800883c:	089b      	lsrpl	r3, r3, #2
 800883e:	2001      	movmi	r0, #1
 8008840:	600b      	strmi	r3, [r1, #0]
 8008842:	bf5c      	itt	pl
 8008844:	600b      	strpl	r3, [r1, #0]
 8008846:	2002      	movpl	r0, #2
 8008848:	4770      	bx	lr
 800884a:	b298      	uxth	r0, r3
 800884c:	b9a8      	cbnz	r0, 800887a <__lo0bits+0x52>
 800884e:	0c1b      	lsrs	r3, r3, #16
 8008850:	2010      	movs	r0, #16
 8008852:	b2da      	uxtb	r2, r3
 8008854:	b90a      	cbnz	r2, 800885a <__lo0bits+0x32>
 8008856:	3008      	adds	r0, #8
 8008858:	0a1b      	lsrs	r3, r3, #8
 800885a:	071a      	lsls	r2, r3, #28
 800885c:	bf04      	itt	eq
 800885e:	091b      	lsreq	r3, r3, #4
 8008860:	3004      	addeq	r0, #4
 8008862:	079a      	lsls	r2, r3, #30
 8008864:	bf04      	itt	eq
 8008866:	089b      	lsreq	r3, r3, #2
 8008868:	3002      	addeq	r0, #2
 800886a:	07da      	lsls	r2, r3, #31
 800886c:	d403      	bmi.n	8008876 <__lo0bits+0x4e>
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	f100 0001 	add.w	r0, r0, #1
 8008874:	d005      	beq.n	8008882 <__lo0bits+0x5a>
 8008876:	600b      	str	r3, [r1, #0]
 8008878:	4770      	bx	lr
 800887a:	4610      	mov	r0, r2
 800887c:	e7e9      	b.n	8008852 <__lo0bits+0x2a>
 800887e:	2000      	movs	r0, #0
 8008880:	4770      	bx	lr
 8008882:	2020      	movs	r0, #32
 8008884:	4770      	bx	lr
	...

08008888 <__i2b>:
 8008888:	b510      	push	{r4, lr}
 800888a:	460c      	mov	r4, r1
 800888c:	2101      	movs	r1, #1
 800888e:	f7ff feb9 	bl	8008604 <_Balloc>
 8008892:	4602      	mov	r2, r0
 8008894:	b928      	cbnz	r0, 80088a2 <__i2b+0x1a>
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <__i2b+0x24>)
 8008898:	4805      	ldr	r0, [pc, #20]	; (80088b0 <__i2b+0x28>)
 800889a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800889e:	f000 ffad 	bl	80097fc <__assert_func>
 80088a2:	2301      	movs	r3, #1
 80088a4:	6144      	str	r4, [r0, #20]
 80088a6:	6103      	str	r3, [r0, #16]
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	bf00      	nop
 80088ac:	08009f28 	.word	0x08009f28
 80088b0:	0800a018 	.word	0x0800a018

080088b4 <__multiply>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	4691      	mov	r9, r2
 80088ba:	690a      	ldr	r2, [r1, #16]
 80088bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	bfb8      	it	lt
 80088c4:	460b      	movlt	r3, r1
 80088c6:	460c      	mov	r4, r1
 80088c8:	bfbc      	itt	lt
 80088ca:	464c      	movlt	r4, r9
 80088cc:	4699      	movlt	r9, r3
 80088ce:	6927      	ldr	r7, [r4, #16]
 80088d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088d4:	68a3      	ldr	r3, [r4, #8]
 80088d6:	6861      	ldr	r1, [r4, #4]
 80088d8:	eb07 060a 	add.w	r6, r7, sl
 80088dc:	42b3      	cmp	r3, r6
 80088de:	b085      	sub	sp, #20
 80088e0:	bfb8      	it	lt
 80088e2:	3101      	addlt	r1, #1
 80088e4:	f7ff fe8e 	bl	8008604 <_Balloc>
 80088e8:	b930      	cbnz	r0, 80088f8 <__multiply+0x44>
 80088ea:	4602      	mov	r2, r0
 80088ec:	4b44      	ldr	r3, [pc, #272]	; (8008a00 <__multiply+0x14c>)
 80088ee:	4845      	ldr	r0, [pc, #276]	; (8008a04 <__multiply+0x150>)
 80088f0:	f240 115d 	movw	r1, #349	; 0x15d
 80088f4:	f000 ff82 	bl	80097fc <__assert_func>
 80088f8:	f100 0514 	add.w	r5, r0, #20
 80088fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008900:	462b      	mov	r3, r5
 8008902:	2200      	movs	r2, #0
 8008904:	4543      	cmp	r3, r8
 8008906:	d321      	bcc.n	800894c <__multiply+0x98>
 8008908:	f104 0314 	add.w	r3, r4, #20
 800890c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008910:	f109 0314 	add.w	r3, r9, #20
 8008914:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008918:	9202      	str	r2, [sp, #8]
 800891a:	1b3a      	subs	r2, r7, r4
 800891c:	3a15      	subs	r2, #21
 800891e:	f022 0203 	bic.w	r2, r2, #3
 8008922:	3204      	adds	r2, #4
 8008924:	f104 0115 	add.w	r1, r4, #21
 8008928:	428f      	cmp	r7, r1
 800892a:	bf38      	it	cc
 800892c:	2204      	movcc	r2, #4
 800892e:	9201      	str	r2, [sp, #4]
 8008930:	9a02      	ldr	r2, [sp, #8]
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	429a      	cmp	r2, r3
 8008936:	d80c      	bhi.n	8008952 <__multiply+0x9e>
 8008938:	2e00      	cmp	r6, #0
 800893a:	dd03      	ble.n	8008944 <__multiply+0x90>
 800893c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008940:	2b00      	cmp	r3, #0
 8008942:	d05a      	beq.n	80089fa <__multiply+0x146>
 8008944:	6106      	str	r6, [r0, #16]
 8008946:	b005      	add	sp, #20
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	f843 2b04 	str.w	r2, [r3], #4
 8008950:	e7d8      	b.n	8008904 <__multiply+0x50>
 8008952:	f8b3 a000 	ldrh.w	sl, [r3]
 8008956:	f1ba 0f00 	cmp.w	sl, #0
 800895a:	d024      	beq.n	80089a6 <__multiply+0xf2>
 800895c:	f104 0e14 	add.w	lr, r4, #20
 8008960:	46a9      	mov	r9, r5
 8008962:	f04f 0c00 	mov.w	ip, #0
 8008966:	f85e 2b04 	ldr.w	r2, [lr], #4
 800896a:	f8d9 1000 	ldr.w	r1, [r9]
 800896e:	fa1f fb82 	uxth.w	fp, r2
 8008972:	b289      	uxth	r1, r1
 8008974:	fb0a 110b 	mla	r1, sl, fp, r1
 8008978:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800897c:	f8d9 2000 	ldr.w	r2, [r9]
 8008980:	4461      	add	r1, ip
 8008982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008986:	fb0a c20b 	mla	r2, sl, fp, ip
 800898a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800898e:	b289      	uxth	r1, r1
 8008990:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008994:	4577      	cmp	r7, lr
 8008996:	f849 1b04 	str.w	r1, [r9], #4
 800899a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800899e:	d8e2      	bhi.n	8008966 <__multiply+0xb2>
 80089a0:	9a01      	ldr	r2, [sp, #4]
 80089a2:	f845 c002 	str.w	ip, [r5, r2]
 80089a6:	9a03      	ldr	r2, [sp, #12]
 80089a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089ac:	3304      	adds	r3, #4
 80089ae:	f1b9 0f00 	cmp.w	r9, #0
 80089b2:	d020      	beq.n	80089f6 <__multiply+0x142>
 80089b4:	6829      	ldr	r1, [r5, #0]
 80089b6:	f104 0c14 	add.w	ip, r4, #20
 80089ba:	46ae      	mov	lr, r5
 80089bc:	f04f 0a00 	mov.w	sl, #0
 80089c0:	f8bc b000 	ldrh.w	fp, [ip]
 80089c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089c8:	fb09 220b 	mla	r2, r9, fp, r2
 80089cc:	4492      	add	sl, r2
 80089ce:	b289      	uxth	r1, r1
 80089d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089d4:	f84e 1b04 	str.w	r1, [lr], #4
 80089d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089dc:	f8be 1000 	ldrh.w	r1, [lr]
 80089e0:	0c12      	lsrs	r2, r2, #16
 80089e2:	fb09 1102 	mla	r1, r9, r2, r1
 80089e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089ea:	4567      	cmp	r7, ip
 80089ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089f0:	d8e6      	bhi.n	80089c0 <__multiply+0x10c>
 80089f2:	9a01      	ldr	r2, [sp, #4]
 80089f4:	50a9      	str	r1, [r5, r2]
 80089f6:	3504      	adds	r5, #4
 80089f8:	e79a      	b.n	8008930 <__multiply+0x7c>
 80089fa:	3e01      	subs	r6, #1
 80089fc:	e79c      	b.n	8008938 <__multiply+0x84>
 80089fe:	bf00      	nop
 8008a00:	08009f28 	.word	0x08009f28
 8008a04:	0800a018 	.word	0x0800a018

08008a08 <__pow5mult>:
 8008a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a0c:	4615      	mov	r5, r2
 8008a0e:	f012 0203 	ands.w	r2, r2, #3
 8008a12:	4606      	mov	r6, r0
 8008a14:	460f      	mov	r7, r1
 8008a16:	d007      	beq.n	8008a28 <__pow5mult+0x20>
 8008a18:	4c25      	ldr	r4, [pc, #148]	; (8008ab0 <__pow5mult+0xa8>)
 8008a1a:	3a01      	subs	r2, #1
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a22:	f7ff fe51 	bl	80086c8 <__multadd>
 8008a26:	4607      	mov	r7, r0
 8008a28:	10ad      	asrs	r5, r5, #2
 8008a2a:	d03d      	beq.n	8008aa8 <__pow5mult+0xa0>
 8008a2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a2e:	b97c      	cbnz	r4, 8008a50 <__pow5mult+0x48>
 8008a30:	2010      	movs	r0, #16
 8008a32:	f7ff fdcd 	bl	80085d0 <malloc>
 8008a36:	4602      	mov	r2, r0
 8008a38:	6270      	str	r0, [r6, #36]	; 0x24
 8008a3a:	b928      	cbnz	r0, 8008a48 <__pow5mult+0x40>
 8008a3c:	4b1d      	ldr	r3, [pc, #116]	; (8008ab4 <__pow5mult+0xac>)
 8008a3e:	481e      	ldr	r0, [pc, #120]	; (8008ab8 <__pow5mult+0xb0>)
 8008a40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a44:	f000 feda 	bl	80097fc <__assert_func>
 8008a48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a4c:	6004      	str	r4, [r0, #0]
 8008a4e:	60c4      	str	r4, [r0, #12]
 8008a50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a58:	b94c      	cbnz	r4, 8008a6e <__pow5mult+0x66>
 8008a5a:	f240 2171 	movw	r1, #625	; 0x271
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f7ff ff12 	bl	8008888 <__i2b>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	6003      	str	r3, [r0, #0]
 8008a6e:	f04f 0900 	mov.w	r9, #0
 8008a72:	07eb      	lsls	r3, r5, #31
 8008a74:	d50a      	bpl.n	8008a8c <__pow5mult+0x84>
 8008a76:	4639      	mov	r1, r7
 8008a78:	4622      	mov	r2, r4
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7ff ff1a 	bl	80088b4 <__multiply>
 8008a80:	4639      	mov	r1, r7
 8008a82:	4680      	mov	r8, r0
 8008a84:	4630      	mov	r0, r6
 8008a86:	f7ff fdfd 	bl	8008684 <_Bfree>
 8008a8a:	4647      	mov	r7, r8
 8008a8c:	106d      	asrs	r5, r5, #1
 8008a8e:	d00b      	beq.n	8008aa8 <__pow5mult+0xa0>
 8008a90:	6820      	ldr	r0, [r4, #0]
 8008a92:	b938      	cbnz	r0, 8008aa4 <__pow5mult+0x9c>
 8008a94:	4622      	mov	r2, r4
 8008a96:	4621      	mov	r1, r4
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ff0b 	bl	80088b4 <__multiply>
 8008a9e:	6020      	str	r0, [r4, #0]
 8008aa0:	f8c0 9000 	str.w	r9, [r0]
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	e7e4      	b.n	8008a72 <__pow5mult+0x6a>
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aae:	bf00      	nop
 8008ab0:	0800a168 	.word	0x0800a168
 8008ab4:	08009eb6 	.word	0x08009eb6
 8008ab8:	0800a018 	.word	0x0800a018

08008abc <__lshift>:
 8008abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	460c      	mov	r4, r1
 8008ac2:	6849      	ldr	r1, [r1, #4]
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aca:	68a3      	ldr	r3, [r4, #8]
 8008acc:	4607      	mov	r7, r0
 8008ace:	4691      	mov	r9, r2
 8008ad0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ad4:	f108 0601 	add.w	r6, r8, #1
 8008ad8:	42b3      	cmp	r3, r6
 8008ada:	db0b      	blt.n	8008af4 <__lshift+0x38>
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff fd91 	bl	8008604 <_Balloc>
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	b948      	cbnz	r0, 8008afa <__lshift+0x3e>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4b2a      	ldr	r3, [pc, #168]	; (8008b94 <__lshift+0xd8>)
 8008aea:	482b      	ldr	r0, [pc, #172]	; (8008b98 <__lshift+0xdc>)
 8008aec:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008af0:	f000 fe84 	bl	80097fc <__assert_func>
 8008af4:	3101      	adds	r1, #1
 8008af6:	005b      	lsls	r3, r3, #1
 8008af8:	e7ee      	b.n	8008ad8 <__lshift+0x1c>
 8008afa:	2300      	movs	r3, #0
 8008afc:	f100 0114 	add.w	r1, r0, #20
 8008b00:	f100 0210 	add.w	r2, r0, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	4553      	cmp	r3, sl
 8008b08:	db37      	blt.n	8008b7a <__lshift+0xbe>
 8008b0a:	6920      	ldr	r0, [r4, #16]
 8008b0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b10:	f104 0314 	add.w	r3, r4, #20
 8008b14:	f019 091f 	ands.w	r9, r9, #31
 8008b18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b20:	d02f      	beq.n	8008b82 <__lshift+0xc6>
 8008b22:	f1c9 0e20 	rsb	lr, r9, #32
 8008b26:	468a      	mov	sl, r1
 8008b28:	f04f 0c00 	mov.w	ip, #0
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b32:	ea42 020c 	orr.w	r2, r2, ip
 8008b36:	f84a 2b04 	str.w	r2, [sl], #4
 8008b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3e:	4298      	cmp	r0, r3
 8008b40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b44:	d8f2      	bhi.n	8008b2c <__lshift+0x70>
 8008b46:	1b03      	subs	r3, r0, r4
 8008b48:	3b15      	subs	r3, #21
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	3304      	adds	r3, #4
 8008b50:	f104 0215 	add.w	r2, r4, #21
 8008b54:	4290      	cmp	r0, r2
 8008b56:	bf38      	it	cc
 8008b58:	2304      	movcc	r3, #4
 8008b5a:	f841 c003 	str.w	ip, [r1, r3]
 8008b5e:	f1bc 0f00 	cmp.w	ip, #0
 8008b62:	d001      	beq.n	8008b68 <__lshift+0xac>
 8008b64:	f108 0602 	add.w	r6, r8, #2
 8008b68:	3e01      	subs	r6, #1
 8008b6a:	4638      	mov	r0, r7
 8008b6c:	612e      	str	r6, [r5, #16]
 8008b6e:	4621      	mov	r1, r4
 8008b70:	f7ff fd88 	bl	8008684 <_Bfree>
 8008b74:	4628      	mov	r0, r5
 8008b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b7e:	3301      	adds	r3, #1
 8008b80:	e7c1      	b.n	8008b06 <__lshift+0x4a>
 8008b82:	3904      	subs	r1, #4
 8008b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b88:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b8c:	4298      	cmp	r0, r3
 8008b8e:	d8f9      	bhi.n	8008b84 <__lshift+0xc8>
 8008b90:	e7ea      	b.n	8008b68 <__lshift+0xac>
 8008b92:	bf00      	nop
 8008b94:	08009f28 	.word	0x08009f28
 8008b98:	0800a018 	.word	0x0800a018

08008b9c <__mcmp>:
 8008b9c:	b530      	push	{r4, r5, lr}
 8008b9e:	6902      	ldr	r2, [r0, #16]
 8008ba0:	690c      	ldr	r4, [r1, #16]
 8008ba2:	1b12      	subs	r2, r2, r4
 8008ba4:	d10e      	bne.n	8008bc4 <__mcmp+0x28>
 8008ba6:	f100 0314 	add.w	r3, r0, #20
 8008baa:	3114      	adds	r1, #20
 8008bac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bbc:	42a5      	cmp	r5, r4
 8008bbe:	d003      	beq.n	8008bc8 <__mcmp+0x2c>
 8008bc0:	d305      	bcc.n	8008bce <__mcmp+0x32>
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	4283      	cmp	r3, r0
 8008bca:	d3f3      	bcc.n	8008bb4 <__mcmp+0x18>
 8008bcc:	e7fa      	b.n	8008bc4 <__mcmp+0x28>
 8008bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bd2:	e7f7      	b.n	8008bc4 <__mcmp+0x28>

08008bd4 <__mdiff>:
 8008bd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	4606      	mov	r6, r0
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4620      	mov	r0, r4
 8008be0:	4690      	mov	r8, r2
 8008be2:	f7ff ffdb 	bl	8008b9c <__mcmp>
 8008be6:	1e05      	subs	r5, r0, #0
 8008be8:	d110      	bne.n	8008c0c <__mdiff+0x38>
 8008bea:	4629      	mov	r1, r5
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7ff fd09 	bl	8008604 <_Balloc>
 8008bf2:	b930      	cbnz	r0, 8008c02 <__mdiff+0x2e>
 8008bf4:	4b3a      	ldr	r3, [pc, #232]	; (8008ce0 <__mdiff+0x10c>)
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	f240 2132 	movw	r1, #562	; 0x232
 8008bfc:	4839      	ldr	r0, [pc, #228]	; (8008ce4 <__mdiff+0x110>)
 8008bfe:	f000 fdfd 	bl	80097fc <__assert_func>
 8008c02:	2301      	movs	r3, #1
 8008c04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0c:	bfa4      	itt	ge
 8008c0e:	4643      	movge	r3, r8
 8008c10:	46a0      	movge	r8, r4
 8008c12:	4630      	mov	r0, r6
 8008c14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c18:	bfa6      	itte	ge
 8008c1a:	461c      	movge	r4, r3
 8008c1c:	2500      	movge	r5, #0
 8008c1e:	2501      	movlt	r5, #1
 8008c20:	f7ff fcf0 	bl	8008604 <_Balloc>
 8008c24:	b920      	cbnz	r0, 8008c30 <__mdiff+0x5c>
 8008c26:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <__mdiff+0x10c>)
 8008c28:	4602      	mov	r2, r0
 8008c2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c2e:	e7e5      	b.n	8008bfc <__mdiff+0x28>
 8008c30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c34:	6926      	ldr	r6, [r4, #16]
 8008c36:	60c5      	str	r5, [r0, #12]
 8008c38:	f104 0914 	add.w	r9, r4, #20
 8008c3c:	f108 0514 	add.w	r5, r8, #20
 8008c40:	f100 0e14 	add.w	lr, r0, #20
 8008c44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c4c:	f108 0210 	add.w	r2, r8, #16
 8008c50:	46f2      	mov	sl, lr
 8008c52:	2100      	movs	r1, #0
 8008c54:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c5c:	fa1f f883 	uxth.w	r8, r3
 8008c60:	fa11 f18b 	uxtah	r1, r1, fp
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	eba1 0808 	sub.w	r8, r1, r8
 8008c6a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c6e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c72:	fa1f f888 	uxth.w	r8, r8
 8008c76:	1419      	asrs	r1, r3, #16
 8008c78:	454e      	cmp	r6, r9
 8008c7a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c7e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c82:	d8e7      	bhi.n	8008c54 <__mdiff+0x80>
 8008c84:	1b33      	subs	r3, r6, r4
 8008c86:	3b15      	subs	r3, #21
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	3415      	adds	r4, #21
 8008c90:	42a6      	cmp	r6, r4
 8008c92:	bf38      	it	cc
 8008c94:	2304      	movcc	r3, #4
 8008c96:	441d      	add	r5, r3
 8008c98:	4473      	add	r3, lr
 8008c9a:	469e      	mov	lr, r3
 8008c9c:	462e      	mov	r6, r5
 8008c9e:	4566      	cmp	r6, ip
 8008ca0:	d30e      	bcc.n	8008cc0 <__mdiff+0xec>
 8008ca2:	f10c 0203 	add.w	r2, ip, #3
 8008ca6:	1b52      	subs	r2, r2, r5
 8008ca8:	f022 0203 	bic.w	r2, r2, #3
 8008cac:	3d03      	subs	r5, #3
 8008cae:	45ac      	cmp	ip, r5
 8008cb0:	bf38      	it	cc
 8008cb2:	2200      	movcc	r2, #0
 8008cb4:	441a      	add	r2, r3
 8008cb6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cba:	b17b      	cbz	r3, 8008cdc <__mdiff+0x108>
 8008cbc:	6107      	str	r7, [r0, #16]
 8008cbe:	e7a3      	b.n	8008c08 <__mdiff+0x34>
 8008cc0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cc4:	fa11 f288 	uxtah	r2, r1, r8
 8008cc8:	1414      	asrs	r4, r2, #16
 8008cca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cce:	b292      	uxth	r2, r2
 8008cd0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cd4:	f84e 2b04 	str.w	r2, [lr], #4
 8008cd8:	1421      	asrs	r1, r4, #16
 8008cda:	e7e0      	b.n	8008c9e <__mdiff+0xca>
 8008cdc:	3f01      	subs	r7, #1
 8008cde:	e7ea      	b.n	8008cb6 <__mdiff+0xe2>
 8008ce0:	08009f28 	.word	0x08009f28
 8008ce4:	0800a018 	.word	0x0800a018

08008ce8 <__ulp>:
 8008ce8:	b082      	sub	sp, #8
 8008cea:	ed8d 0b00 	vstr	d0, [sp]
 8008cee:	9b01      	ldr	r3, [sp, #4]
 8008cf0:	4912      	ldr	r1, [pc, #72]	; (8008d3c <__ulp+0x54>)
 8008cf2:	4019      	ands	r1, r3
 8008cf4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	dd05      	ble.n	8008d08 <__ulp+0x20>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	ec43 2b10 	vmov	d0, r2, r3
 8008d04:	b002      	add	sp, #8
 8008d06:	4770      	bx	lr
 8008d08:	4249      	negs	r1, r1
 8008d0a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008d0e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	da04      	bge.n	8008d26 <__ulp+0x3e>
 8008d1c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d20:	fa41 f300 	asr.w	r3, r1, r0
 8008d24:	e7ec      	b.n	8008d00 <__ulp+0x18>
 8008d26:	f1a0 0114 	sub.w	r1, r0, #20
 8008d2a:	291e      	cmp	r1, #30
 8008d2c:	bfda      	itte	le
 8008d2e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008d32:	fa20 f101 	lsrle.w	r1, r0, r1
 8008d36:	2101      	movgt	r1, #1
 8008d38:	460a      	mov	r2, r1
 8008d3a:	e7e1      	b.n	8008d00 <__ulp+0x18>
 8008d3c:	7ff00000 	.word	0x7ff00000

08008d40 <__b2d>:
 8008d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d42:	6905      	ldr	r5, [r0, #16]
 8008d44:	f100 0714 	add.w	r7, r0, #20
 8008d48:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008d4c:	1f2e      	subs	r6, r5, #4
 8008d4e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008d52:	4620      	mov	r0, r4
 8008d54:	f7ff fd48 	bl	80087e8 <__hi0bits>
 8008d58:	f1c0 0320 	rsb	r3, r0, #32
 8008d5c:	280a      	cmp	r0, #10
 8008d5e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008ddc <__b2d+0x9c>
 8008d62:	600b      	str	r3, [r1, #0]
 8008d64:	dc14      	bgt.n	8008d90 <__b2d+0x50>
 8008d66:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d6a:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d6e:	42b7      	cmp	r7, r6
 8008d70:	ea41 030c 	orr.w	r3, r1, ip
 8008d74:	bf34      	ite	cc
 8008d76:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d7a:	2100      	movcs	r1, #0
 8008d7c:	3015      	adds	r0, #21
 8008d7e:	fa04 f000 	lsl.w	r0, r4, r0
 8008d82:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d86:	ea40 0201 	orr.w	r2, r0, r1
 8008d8a:	ec43 2b10 	vmov	d0, r2, r3
 8008d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d90:	42b7      	cmp	r7, r6
 8008d92:	bf3a      	itte	cc
 8008d94:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d98:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d9c:	2100      	movcs	r1, #0
 8008d9e:	380b      	subs	r0, #11
 8008da0:	d017      	beq.n	8008dd2 <__b2d+0x92>
 8008da2:	f1c0 0c20 	rsb	ip, r0, #32
 8008da6:	fa04 f500 	lsl.w	r5, r4, r0
 8008daa:	42be      	cmp	r6, r7
 8008dac:	fa21 f40c 	lsr.w	r4, r1, ip
 8008db0:	ea45 0504 	orr.w	r5, r5, r4
 8008db4:	bf8c      	ite	hi
 8008db6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008dba:	2400      	movls	r4, #0
 8008dbc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008dc0:	fa01 f000 	lsl.w	r0, r1, r0
 8008dc4:	fa24 f40c 	lsr.w	r4, r4, ip
 8008dc8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dcc:	ea40 0204 	orr.w	r2, r0, r4
 8008dd0:	e7db      	b.n	8008d8a <__b2d+0x4a>
 8008dd2:	ea44 030c 	orr.w	r3, r4, ip
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	e7d7      	b.n	8008d8a <__b2d+0x4a>
 8008dda:	bf00      	nop
 8008ddc:	3ff00000 	.word	0x3ff00000

08008de0 <__d2b>:
 8008de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008de4:	4689      	mov	r9, r1
 8008de6:	2101      	movs	r1, #1
 8008de8:	ec57 6b10 	vmov	r6, r7, d0
 8008dec:	4690      	mov	r8, r2
 8008dee:	f7ff fc09 	bl	8008604 <_Balloc>
 8008df2:	4604      	mov	r4, r0
 8008df4:	b930      	cbnz	r0, 8008e04 <__d2b+0x24>
 8008df6:	4602      	mov	r2, r0
 8008df8:	4b25      	ldr	r3, [pc, #148]	; (8008e90 <__d2b+0xb0>)
 8008dfa:	4826      	ldr	r0, [pc, #152]	; (8008e94 <__d2b+0xb4>)
 8008dfc:	f240 310a 	movw	r1, #778	; 0x30a
 8008e00:	f000 fcfc 	bl	80097fc <__assert_func>
 8008e04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e0c:	bb35      	cbnz	r5, 8008e5c <__d2b+0x7c>
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	d028      	beq.n	8008e66 <__d2b+0x86>
 8008e14:	4668      	mov	r0, sp
 8008e16:	9600      	str	r6, [sp, #0]
 8008e18:	f7ff fd06 	bl	8008828 <__lo0bits>
 8008e1c:	9900      	ldr	r1, [sp, #0]
 8008e1e:	b300      	cbz	r0, 8008e62 <__d2b+0x82>
 8008e20:	9a01      	ldr	r2, [sp, #4]
 8008e22:	f1c0 0320 	rsb	r3, r0, #32
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	430b      	orrs	r3, r1
 8008e2c:	40c2      	lsrs	r2, r0
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	9201      	str	r2, [sp, #4]
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	61a3      	str	r3, [r4, #24]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bf14      	ite	ne
 8008e3a:	2202      	movne	r2, #2
 8008e3c:	2201      	moveq	r2, #1
 8008e3e:	6122      	str	r2, [r4, #16]
 8008e40:	b1d5      	cbz	r5, 8008e78 <__d2b+0x98>
 8008e42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008e46:	4405      	add	r5, r0
 8008e48:	f8c9 5000 	str.w	r5, [r9]
 8008e4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e50:	f8c8 0000 	str.w	r0, [r8]
 8008e54:	4620      	mov	r0, r4
 8008e56:	b003      	add	sp, #12
 8008e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e60:	e7d5      	b.n	8008e0e <__d2b+0x2e>
 8008e62:	6161      	str	r1, [r4, #20]
 8008e64:	e7e5      	b.n	8008e32 <__d2b+0x52>
 8008e66:	a801      	add	r0, sp, #4
 8008e68:	f7ff fcde 	bl	8008828 <__lo0bits>
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	6163      	str	r3, [r4, #20]
 8008e70:	2201      	movs	r2, #1
 8008e72:	6122      	str	r2, [r4, #16]
 8008e74:	3020      	adds	r0, #32
 8008e76:	e7e3      	b.n	8008e40 <__d2b+0x60>
 8008e78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e80:	f8c9 0000 	str.w	r0, [r9]
 8008e84:	6918      	ldr	r0, [r3, #16]
 8008e86:	f7ff fcaf 	bl	80087e8 <__hi0bits>
 8008e8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e8e:	e7df      	b.n	8008e50 <__d2b+0x70>
 8008e90:	08009f28 	.word	0x08009f28
 8008e94:	0800a018 	.word	0x0800a018

08008e98 <__ratio>:
 8008e98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	4688      	mov	r8, r1
 8008e9e:	4669      	mov	r1, sp
 8008ea0:	4681      	mov	r9, r0
 8008ea2:	f7ff ff4d 	bl	8008d40 <__b2d>
 8008ea6:	a901      	add	r1, sp, #4
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	ec55 4b10 	vmov	r4, r5, d0
 8008eae:	f7ff ff47 	bl	8008d40 <__b2d>
 8008eb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008eb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008eba:	eba3 0c02 	sub.w	ip, r3, r2
 8008ebe:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008ec2:	1a9b      	subs	r3, r3, r2
 8008ec4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008ec8:	ec51 0b10 	vmov	r0, r1, d0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfd6      	itet	le
 8008ed0:	460a      	movle	r2, r1
 8008ed2:	462a      	movgt	r2, r5
 8008ed4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ed8:	468b      	mov	fp, r1
 8008eda:	462f      	mov	r7, r5
 8008edc:	bfd4      	ite	le
 8008ede:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008ee2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	ee10 2a10 	vmov	r2, s0
 8008eec:	465b      	mov	r3, fp
 8008eee:	4639      	mov	r1, r7
 8008ef0:	f7f7 fcd4 	bl	800089c <__aeabi_ddiv>
 8008ef4:	ec41 0b10 	vmov	d0, r0, r1
 8008ef8:	b003      	add	sp, #12
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008efe <__copybits>:
 8008efe:	3901      	subs	r1, #1
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	1149      	asrs	r1, r1, #5
 8008f04:	6914      	ldr	r4, [r2, #16]
 8008f06:	3101      	adds	r1, #1
 8008f08:	f102 0314 	add.w	r3, r2, #20
 8008f0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f14:	1f05      	subs	r5, r0, #4
 8008f16:	42a3      	cmp	r3, r4
 8008f18:	d30c      	bcc.n	8008f34 <__copybits+0x36>
 8008f1a:	1aa3      	subs	r3, r4, r2
 8008f1c:	3b11      	subs	r3, #17
 8008f1e:	f023 0303 	bic.w	r3, r3, #3
 8008f22:	3211      	adds	r2, #17
 8008f24:	42a2      	cmp	r2, r4
 8008f26:	bf88      	it	hi
 8008f28:	2300      	movhi	r3, #0
 8008f2a:	4418      	add	r0, r3
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	4288      	cmp	r0, r1
 8008f30:	d305      	bcc.n	8008f3e <__copybits+0x40>
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f38:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f3c:	e7eb      	b.n	8008f16 <__copybits+0x18>
 8008f3e:	f840 3b04 	str.w	r3, [r0], #4
 8008f42:	e7f4      	b.n	8008f2e <__copybits+0x30>

08008f44 <__any_on>:
 8008f44:	f100 0214 	add.w	r2, r0, #20
 8008f48:	6900      	ldr	r0, [r0, #16]
 8008f4a:	114b      	asrs	r3, r1, #5
 8008f4c:	4298      	cmp	r0, r3
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	db11      	blt.n	8008f76 <__any_on+0x32>
 8008f52:	dd0a      	ble.n	8008f6a <__any_on+0x26>
 8008f54:	f011 011f 	ands.w	r1, r1, #31
 8008f58:	d007      	beq.n	8008f6a <__any_on+0x26>
 8008f5a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f5e:	fa24 f001 	lsr.w	r0, r4, r1
 8008f62:	fa00 f101 	lsl.w	r1, r0, r1
 8008f66:	428c      	cmp	r4, r1
 8008f68:	d10b      	bne.n	8008f82 <__any_on+0x3e>
 8008f6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d803      	bhi.n	8008f7a <__any_on+0x36>
 8008f72:	2000      	movs	r0, #0
 8008f74:	bd10      	pop	{r4, pc}
 8008f76:	4603      	mov	r3, r0
 8008f78:	e7f7      	b.n	8008f6a <__any_on+0x26>
 8008f7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f7e:	2900      	cmp	r1, #0
 8008f80:	d0f5      	beq.n	8008f6e <__any_on+0x2a>
 8008f82:	2001      	movs	r0, #1
 8008f84:	e7f6      	b.n	8008f74 <__any_on+0x30>

08008f86 <_calloc_r>:
 8008f86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f88:	fba1 2402 	umull	r2, r4, r1, r2
 8008f8c:	b94c      	cbnz	r4, 8008fa2 <_calloc_r+0x1c>
 8008f8e:	4611      	mov	r1, r2
 8008f90:	9201      	str	r2, [sp, #4]
 8008f92:	f000 f87b 	bl	800908c <_malloc_r>
 8008f96:	9a01      	ldr	r2, [sp, #4]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b930      	cbnz	r0, 8008faa <_calloc_r+0x24>
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	b003      	add	sp, #12
 8008fa0:	bd30      	pop	{r4, r5, pc}
 8008fa2:	220c      	movs	r2, #12
 8008fa4:	6002      	str	r2, [r0, #0]
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	e7f8      	b.n	8008f9c <_calloc_r+0x16>
 8008faa:	4621      	mov	r1, r4
 8008fac:	f7fc f862 	bl	8005074 <memset>
 8008fb0:	e7f4      	b.n	8008f9c <_calloc_r+0x16>
	...

08008fb4 <_free_r>:
 8008fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	d044      	beq.n	8009044 <_free_r+0x90>
 8008fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fbe:	9001      	str	r0, [sp, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8008fc6:	bfb8      	it	lt
 8008fc8:	18e4      	addlt	r4, r4, r3
 8008fca:	f000 fca5 	bl	8009918 <__malloc_lock>
 8008fce:	4a1e      	ldr	r2, [pc, #120]	; (8009048 <_free_r+0x94>)
 8008fd0:	9801      	ldr	r0, [sp, #4]
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_free_r+0x30>
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	b003      	add	sp, #12
 8008fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe0:	f000 bca0 	b.w	8009924 <__malloc_unlock>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d908      	bls.n	8008ffa <_free_r+0x46>
 8008fe8:	6825      	ldr	r5, [r4, #0]
 8008fea:	1961      	adds	r1, r4, r5
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf01      	itttt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	1949      	addeq	r1, r1, r5
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	e7ed      	b.n	8008fd6 <_free_r+0x22>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	b10b      	cbz	r3, 8009004 <_free_r+0x50>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x46>
 8009004:	6811      	ldr	r1, [r2, #0]
 8009006:	1855      	adds	r5, r2, r1
 8009008:	42a5      	cmp	r5, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x70>
 800900c:	6824      	ldr	r4, [r4, #0]
 800900e:	4421      	add	r1, r4
 8009010:	1854      	adds	r4, r2, r1
 8009012:	42a3      	cmp	r3, r4
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	d1e0      	bne.n	8008fda <_free_r+0x26>
 8009018:	681c      	ldr	r4, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	6053      	str	r3, [r2, #4]
 800901e:	4421      	add	r1, r4
 8009020:	6011      	str	r1, [r2, #0]
 8009022:	e7da      	b.n	8008fda <_free_r+0x26>
 8009024:	d902      	bls.n	800902c <_free_r+0x78>
 8009026:	230c      	movs	r3, #12
 8009028:	6003      	str	r3, [r0, #0]
 800902a:	e7d6      	b.n	8008fda <_free_r+0x26>
 800902c:	6825      	ldr	r5, [r4, #0]
 800902e:	1961      	adds	r1, r4, r5
 8009030:	428b      	cmp	r3, r1
 8009032:	bf04      	itt	eq
 8009034:	6819      	ldreq	r1, [r3, #0]
 8009036:	685b      	ldreq	r3, [r3, #4]
 8009038:	6063      	str	r3, [r4, #4]
 800903a:	bf04      	itt	eq
 800903c:	1949      	addeq	r1, r1, r5
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	6054      	str	r4, [r2, #4]
 8009042:	e7ca      	b.n	8008fda <_free_r+0x26>
 8009044:	b003      	add	sp, #12
 8009046:	bd30      	pop	{r4, r5, pc}
 8009048:	200003b4 	.word	0x200003b4

0800904c <sbrk_aligned>:
 800904c:	b570      	push	{r4, r5, r6, lr}
 800904e:	4e0e      	ldr	r6, [pc, #56]	; (8009088 <sbrk_aligned+0x3c>)
 8009050:	460c      	mov	r4, r1
 8009052:	6831      	ldr	r1, [r6, #0]
 8009054:	4605      	mov	r5, r0
 8009056:	b911      	cbnz	r1, 800905e <sbrk_aligned+0x12>
 8009058:	f000 fb4a 	bl	80096f0 <_sbrk_r>
 800905c:	6030      	str	r0, [r6, #0]
 800905e:	4621      	mov	r1, r4
 8009060:	4628      	mov	r0, r5
 8009062:	f000 fb45 	bl	80096f0 <_sbrk_r>
 8009066:	1c43      	adds	r3, r0, #1
 8009068:	d00a      	beq.n	8009080 <sbrk_aligned+0x34>
 800906a:	1cc4      	adds	r4, r0, #3
 800906c:	f024 0403 	bic.w	r4, r4, #3
 8009070:	42a0      	cmp	r0, r4
 8009072:	d007      	beq.n	8009084 <sbrk_aligned+0x38>
 8009074:	1a21      	subs	r1, r4, r0
 8009076:	4628      	mov	r0, r5
 8009078:	f000 fb3a 	bl	80096f0 <_sbrk_r>
 800907c:	3001      	adds	r0, #1
 800907e:	d101      	bne.n	8009084 <sbrk_aligned+0x38>
 8009080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009084:	4620      	mov	r0, r4
 8009086:	bd70      	pop	{r4, r5, r6, pc}
 8009088:	200003b8 	.word	0x200003b8

0800908c <_malloc_r>:
 800908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009090:	1ccd      	adds	r5, r1, #3
 8009092:	f025 0503 	bic.w	r5, r5, #3
 8009096:	3508      	adds	r5, #8
 8009098:	2d0c      	cmp	r5, #12
 800909a:	bf38      	it	cc
 800909c:	250c      	movcc	r5, #12
 800909e:	2d00      	cmp	r5, #0
 80090a0:	4607      	mov	r7, r0
 80090a2:	db01      	blt.n	80090a8 <_malloc_r+0x1c>
 80090a4:	42a9      	cmp	r1, r5
 80090a6:	d905      	bls.n	80090b4 <_malloc_r+0x28>
 80090a8:	230c      	movs	r3, #12
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	2600      	movs	r6, #0
 80090ae:	4630      	mov	r0, r6
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090b4:	4e2e      	ldr	r6, [pc, #184]	; (8009170 <_malloc_r+0xe4>)
 80090b6:	f000 fc2f 	bl	8009918 <__malloc_lock>
 80090ba:	6833      	ldr	r3, [r6, #0]
 80090bc:	461c      	mov	r4, r3
 80090be:	bb34      	cbnz	r4, 800910e <_malloc_r+0x82>
 80090c0:	4629      	mov	r1, r5
 80090c2:	4638      	mov	r0, r7
 80090c4:	f7ff ffc2 	bl	800904c <sbrk_aligned>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	4604      	mov	r4, r0
 80090cc:	d14d      	bne.n	800916a <_malloc_r+0xde>
 80090ce:	6834      	ldr	r4, [r6, #0]
 80090d0:	4626      	mov	r6, r4
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	d140      	bne.n	8009158 <_malloc_r+0xcc>
 80090d6:	6823      	ldr	r3, [r4, #0]
 80090d8:	4631      	mov	r1, r6
 80090da:	4638      	mov	r0, r7
 80090dc:	eb04 0803 	add.w	r8, r4, r3
 80090e0:	f000 fb06 	bl	80096f0 <_sbrk_r>
 80090e4:	4580      	cmp	r8, r0
 80090e6:	d13a      	bne.n	800915e <_malloc_r+0xd2>
 80090e8:	6821      	ldr	r1, [r4, #0]
 80090ea:	3503      	adds	r5, #3
 80090ec:	1a6d      	subs	r5, r5, r1
 80090ee:	f025 0503 	bic.w	r5, r5, #3
 80090f2:	3508      	adds	r5, #8
 80090f4:	2d0c      	cmp	r5, #12
 80090f6:	bf38      	it	cc
 80090f8:	250c      	movcc	r5, #12
 80090fa:	4629      	mov	r1, r5
 80090fc:	4638      	mov	r0, r7
 80090fe:	f7ff ffa5 	bl	800904c <sbrk_aligned>
 8009102:	3001      	adds	r0, #1
 8009104:	d02b      	beq.n	800915e <_malloc_r+0xd2>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	442b      	add	r3, r5
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	e00e      	b.n	800912c <_malloc_r+0xa0>
 800910e:	6822      	ldr	r2, [r4, #0]
 8009110:	1b52      	subs	r2, r2, r5
 8009112:	d41e      	bmi.n	8009152 <_malloc_r+0xc6>
 8009114:	2a0b      	cmp	r2, #11
 8009116:	d916      	bls.n	8009146 <_malloc_r+0xba>
 8009118:	1961      	adds	r1, r4, r5
 800911a:	42a3      	cmp	r3, r4
 800911c:	6025      	str	r5, [r4, #0]
 800911e:	bf18      	it	ne
 8009120:	6059      	strne	r1, [r3, #4]
 8009122:	6863      	ldr	r3, [r4, #4]
 8009124:	bf08      	it	eq
 8009126:	6031      	streq	r1, [r6, #0]
 8009128:	5162      	str	r2, [r4, r5]
 800912a:	604b      	str	r3, [r1, #4]
 800912c:	4638      	mov	r0, r7
 800912e:	f104 060b 	add.w	r6, r4, #11
 8009132:	f000 fbf7 	bl	8009924 <__malloc_unlock>
 8009136:	f026 0607 	bic.w	r6, r6, #7
 800913a:	1d23      	adds	r3, r4, #4
 800913c:	1af2      	subs	r2, r6, r3
 800913e:	d0b6      	beq.n	80090ae <_malloc_r+0x22>
 8009140:	1b9b      	subs	r3, r3, r6
 8009142:	50a3      	str	r3, [r4, r2]
 8009144:	e7b3      	b.n	80090ae <_malloc_r+0x22>
 8009146:	6862      	ldr	r2, [r4, #4]
 8009148:	42a3      	cmp	r3, r4
 800914a:	bf0c      	ite	eq
 800914c:	6032      	streq	r2, [r6, #0]
 800914e:	605a      	strne	r2, [r3, #4]
 8009150:	e7ec      	b.n	800912c <_malloc_r+0xa0>
 8009152:	4623      	mov	r3, r4
 8009154:	6864      	ldr	r4, [r4, #4]
 8009156:	e7b2      	b.n	80090be <_malloc_r+0x32>
 8009158:	4634      	mov	r4, r6
 800915a:	6876      	ldr	r6, [r6, #4]
 800915c:	e7b9      	b.n	80090d2 <_malloc_r+0x46>
 800915e:	230c      	movs	r3, #12
 8009160:	603b      	str	r3, [r7, #0]
 8009162:	4638      	mov	r0, r7
 8009164:	f000 fbde 	bl	8009924 <__malloc_unlock>
 8009168:	e7a1      	b.n	80090ae <_malloc_r+0x22>
 800916a:	6025      	str	r5, [r4, #0]
 800916c:	e7de      	b.n	800912c <_malloc_r+0xa0>
 800916e:	bf00      	nop
 8009170:	200003b4 	.word	0x200003b4

08009174 <__ssputs_r>:
 8009174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009178:	688e      	ldr	r6, [r1, #8]
 800917a:	429e      	cmp	r6, r3
 800917c:	4682      	mov	sl, r0
 800917e:	460c      	mov	r4, r1
 8009180:	4690      	mov	r8, r2
 8009182:	461f      	mov	r7, r3
 8009184:	d838      	bhi.n	80091f8 <__ssputs_r+0x84>
 8009186:	898a      	ldrh	r2, [r1, #12]
 8009188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800918c:	d032      	beq.n	80091f4 <__ssputs_r+0x80>
 800918e:	6825      	ldr	r5, [r4, #0]
 8009190:	6909      	ldr	r1, [r1, #16]
 8009192:	eba5 0901 	sub.w	r9, r5, r1
 8009196:	6965      	ldr	r5, [r4, #20]
 8009198:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800919c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80091a0:	3301      	adds	r3, #1
 80091a2:	444b      	add	r3, r9
 80091a4:	106d      	asrs	r5, r5, #1
 80091a6:	429d      	cmp	r5, r3
 80091a8:	bf38      	it	cc
 80091aa:	461d      	movcc	r5, r3
 80091ac:	0553      	lsls	r3, r2, #21
 80091ae:	d531      	bpl.n	8009214 <__ssputs_r+0xa0>
 80091b0:	4629      	mov	r1, r5
 80091b2:	f7ff ff6b 	bl	800908c <_malloc_r>
 80091b6:	4606      	mov	r6, r0
 80091b8:	b950      	cbnz	r0, 80091d0 <__ssputs_r+0x5c>
 80091ba:	230c      	movs	r3, #12
 80091bc:	f8ca 3000 	str.w	r3, [sl]
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c6:	81a3      	strh	r3, [r4, #12]
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d0:	6921      	ldr	r1, [r4, #16]
 80091d2:	464a      	mov	r2, r9
 80091d4:	f7fb ff40 	bl	8005058 <memcpy>
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e2:	81a3      	strh	r3, [r4, #12]
 80091e4:	6126      	str	r6, [r4, #16]
 80091e6:	6165      	str	r5, [r4, #20]
 80091e8:	444e      	add	r6, r9
 80091ea:	eba5 0509 	sub.w	r5, r5, r9
 80091ee:	6026      	str	r6, [r4, #0]
 80091f0:	60a5      	str	r5, [r4, #8]
 80091f2:	463e      	mov	r6, r7
 80091f4:	42be      	cmp	r6, r7
 80091f6:	d900      	bls.n	80091fa <__ssputs_r+0x86>
 80091f8:	463e      	mov	r6, r7
 80091fa:	6820      	ldr	r0, [r4, #0]
 80091fc:	4632      	mov	r2, r6
 80091fe:	4641      	mov	r1, r8
 8009200:	f000 fb70 	bl	80098e4 <memmove>
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	1b9b      	subs	r3, r3, r6
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	4433      	add	r3, r6
 800920e:	6023      	str	r3, [r4, #0]
 8009210:	2000      	movs	r0, #0
 8009212:	e7db      	b.n	80091cc <__ssputs_r+0x58>
 8009214:	462a      	mov	r2, r5
 8009216:	f000 fb8b 	bl	8009930 <_realloc_r>
 800921a:	4606      	mov	r6, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d1e1      	bne.n	80091e4 <__ssputs_r+0x70>
 8009220:	6921      	ldr	r1, [r4, #16]
 8009222:	4650      	mov	r0, sl
 8009224:	f7ff fec6 	bl	8008fb4 <_free_r>
 8009228:	e7c7      	b.n	80091ba <__ssputs_r+0x46>
	...

0800922c <_svfiprintf_r>:
 800922c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	4698      	mov	r8, r3
 8009232:	898b      	ldrh	r3, [r1, #12]
 8009234:	061b      	lsls	r3, r3, #24
 8009236:	b09d      	sub	sp, #116	; 0x74
 8009238:	4607      	mov	r7, r0
 800923a:	460d      	mov	r5, r1
 800923c:	4614      	mov	r4, r2
 800923e:	d50e      	bpl.n	800925e <_svfiprintf_r+0x32>
 8009240:	690b      	ldr	r3, [r1, #16]
 8009242:	b963      	cbnz	r3, 800925e <_svfiprintf_r+0x32>
 8009244:	2140      	movs	r1, #64	; 0x40
 8009246:	f7ff ff21 	bl	800908c <_malloc_r>
 800924a:	6028      	str	r0, [r5, #0]
 800924c:	6128      	str	r0, [r5, #16]
 800924e:	b920      	cbnz	r0, 800925a <_svfiprintf_r+0x2e>
 8009250:	230c      	movs	r3, #12
 8009252:	603b      	str	r3, [r7, #0]
 8009254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009258:	e0d1      	b.n	80093fe <_svfiprintf_r+0x1d2>
 800925a:	2340      	movs	r3, #64	; 0x40
 800925c:	616b      	str	r3, [r5, #20]
 800925e:	2300      	movs	r3, #0
 8009260:	9309      	str	r3, [sp, #36]	; 0x24
 8009262:	2320      	movs	r3, #32
 8009264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009268:	f8cd 800c 	str.w	r8, [sp, #12]
 800926c:	2330      	movs	r3, #48	; 0x30
 800926e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009418 <_svfiprintf_r+0x1ec>
 8009272:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009276:	f04f 0901 	mov.w	r9, #1
 800927a:	4623      	mov	r3, r4
 800927c:	469a      	mov	sl, r3
 800927e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009282:	b10a      	cbz	r2, 8009288 <_svfiprintf_r+0x5c>
 8009284:	2a25      	cmp	r2, #37	; 0x25
 8009286:	d1f9      	bne.n	800927c <_svfiprintf_r+0x50>
 8009288:	ebba 0b04 	subs.w	fp, sl, r4
 800928c:	d00b      	beq.n	80092a6 <_svfiprintf_r+0x7a>
 800928e:	465b      	mov	r3, fp
 8009290:	4622      	mov	r2, r4
 8009292:	4629      	mov	r1, r5
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ff6d 	bl	8009174 <__ssputs_r>
 800929a:	3001      	adds	r0, #1
 800929c:	f000 80aa 	beq.w	80093f4 <_svfiprintf_r+0x1c8>
 80092a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092a2:	445a      	add	r2, fp
 80092a4:	9209      	str	r2, [sp, #36]	; 0x24
 80092a6:	f89a 3000 	ldrb.w	r3, [sl]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 80a2 	beq.w	80093f4 <_svfiprintf_r+0x1c8>
 80092b0:	2300      	movs	r3, #0
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092ba:	f10a 0a01 	add.w	sl, sl, #1
 80092be:	9304      	str	r3, [sp, #16]
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092c6:	931a      	str	r3, [sp, #104]	; 0x68
 80092c8:	4654      	mov	r4, sl
 80092ca:	2205      	movs	r2, #5
 80092cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d0:	4851      	ldr	r0, [pc, #324]	; (8009418 <_svfiprintf_r+0x1ec>)
 80092d2:	f7f6 ffad 	bl	8000230 <memchr>
 80092d6:	9a04      	ldr	r2, [sp, #16]
 80092d8:	b9d8      	cbnz	r0, 8009312 <_svfiprintf_r+0xe6>
 80092da:	06d0      	lsls	r0, r2, #27
 80092dc:	bf44      	itt	mi
 80092de:	2320      	movmi	r3, #32
 80092e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092e4:	0711      	lsls	r1, r2, #28
 80092e6:	bf44      	itt	mi
 80092e8:	232b      	movmi	r3, #43	; 0x2b
 80092ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80092ee:	f89a 3000 	ldrb.w	r3, [sl]
 80092f2:	2b2a      	cmp	r3, #42	; 0x2a
 80092f4:	d015      	beq.n	8009322 <_svfiprintf_r+0xf6>
 80092f6:	9a07      	ldr	r2, [sp, #28]
 80092f8:	4654      	mov	r4, sl
 80092fa:	2000      	movs	r0, #0
 80092fc:	f04f 0c0a 	mov.w	ip, #10
 8009300:	4621      	mov	r1, r4
 8009302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009306:	3b30      	subs	r3, #48	; 0x30
 8009308:	2b09      	cmp	r3, #9
 800930a:	d94e      	bls.n	80093aa <_svfiprintf_r+0x17e>
 800930c:	b1b0      	cbz	r0, 800933c <_svfiprintf_r+0x110>
 800930e:	9207      	str	r2, [sp, #28]
 8009310:	e014      	b.n	800933c <_svfiprintf_r+0x110>
 8009312:	eba0 0308 	sub.w	r3, r0, r8
 8009316:	fa09 f303 	lsl.w	r3, r9, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	9304      	str	r3, [sp, #16]
 800931e:	46a2      	mov	sl, r4
 8009320:	e7d2      	b.n	80092c8 <_svfiprintf_r+0x9c>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	1d19      	adds	r1, r3, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	9103      	str	r1, [sp, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	bfbb      	ittet	lt
 800932e:	425b      	neglt	r3, r3
 8009330:	f042 0202 	orrlt.w	r2, r2, #2
 8009334:	9307      	strge	r3, [sp, #28]
 8009336:	9307      	strlt	r3, [sp, #28]
 8009338:	bfb8      	it	lt
 800933a:	9204      	strlt	r2, [sp, #16]
 800933c:	7823      	ldrb	r3, [r4, #0]
 800933e:	2b2e      	cmp	r3, #46	; 0x2e
 8009340:	d10c      	bne.n	800935c <_svfiprintf_r+0x130>
 8009342:	7863      	ldrb	r3, [r4, #1]
 8009344:	2b2a      	cmp	r3, #42	; 0x2a
 8009346:	d135      	bne.n	80093b4 <_svfiprintf_r+0x188>
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	1d1a      	adds	r2, r3, #4
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	9203      	str	r2, [sp, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfb8      	it	lt
 8009354:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009358:	3402      	adds	r4, #2
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009428 <_svfiprintf_r+0x1fc>
 8009360:	7821      	ldrb	r1, [r4, #0]
 8009362:	2203      	movs	r2, #3
 8009364:	4650      	mov	r0, sl
 8009366:	f7f6 ff63 	bl	8000230 <memchr>
 800936a:	b140      	cbz	r0, 800937e <_svfiprintf_r+0x152>
 800936c:	2340      	movs	r3, #64	; 0x40
 800936e:	eba0 000a 	sub.w	r0, r0, sl
 8009372:	fa03 f000 	lsl.w	r0, r3, r0
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	4303      	orrs	r3, r0
 800937a:	3401      	adds	r4, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009382:	4826      	ldr	r0, [pc, #152]	; (800941c <_svfiprintf_r+0x1f0>)
 8009384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009388:	2206      	movs	r2, #6
 800938a:	f7f6 ff51 	bl	8000230 <memchr>
 800938e:	2800      	cmp	r0, #0
 8009390:	d038      	beq.n	8009404 <_svfiprintf_r+0x1d8>
 8009392:	4b23      	ldr	r3, [pc, #140]	; (8009420 <_svfiprintf_r+0x1f4>)
 8009394:	bb1b      	cbnz	r3, 80093de <_svfiprintf_r+0x1b2>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	3307      	adds	r3, #7
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	3308      	adds	r3, #8
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a4:	4433      	add	r3, r6
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e767      	b.n	800927a <_svfiprintf_r+0x4e>
 80093aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ae:	460c      	mov	r4, r1
 80093b0:	2001      	movs	r0, #1
 80093b2:	e7a5      	b.n	8009300 <_svfiprintf_r+0xd4>
 80093b4:	2300      	movs	r3, #0
 80093b6:	3401      	adds	r4, #1
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	4619      	mov	r1, r3
 80093bc:	f04f 0c0a 	mov.w	ip, #10
 80093c0:	4620      	mov	r0, r4
 80093c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c6:	3a30      	subs	r2, #48	; 0x30
 80093c8:	2a09      	cmp	r2, #9
 80093ca:	d903      	bls.n	80093d4 <_svfiprintf_r+0x1a8>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0c5      	beq.n	800935c <_svfiprintf_r+0x130>
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	e7c3      	b.n	800935c <_svfiprintf_r+0x130>
 80093d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80093d8:	4604      	mov	r4, r0
 80093da:	2301      	movs	r3, #1
 80093dc:	e7f0      	b.n	80093c0 <_svfiprintf_r+0x194>
 80093de:	ab03      	add	r3, sp, #12
 80093e0:	9300      	str	r3, [sp, #0]
 80093e2:	462a      	mov	r2, r5
 80093e4:	4b0f      	ldr	r3, [pc, #60]	; (8009424 <_svfiprintf_r+0x1f8>)
 80093e6:	a904      	add	r1, sp, #16
 80093e8:	4638      	mov	r0, r7
 80093ea:	f7fb feeb 	bl	80051c4 <_printf_float>
 80093ee:	1c42      	adds	r2, r0, #1
 80093f0:	4606      	mov	r6, r0
 80093f2:	d1d6      	bne.n	80093a2 <_svfiprintf_r+0x176>
 80093f4:	89ab      	ldrh	r3, [r5, #12]
 80093f6:	065b      	lsls	r3, r3, #25
 80093f8:	f53f af2c 	bmi.w	8009254 <_svfiprintf_r+0x28>
 80093fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fe:	b01d      	add	sp, #116	; 0x74
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	ab03      	add	r3, sp, #12
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	462a      	mov	r2, r5
 800940a:	4b06      	ldr	r3, [pc, #24]	; (8009424 <_svfiprintf_r+0x1f8>)
 800940c:	a904      	add	r1, sp, #16
 800940e:	4638      	mov	r0, r7
 8009410:	f7fc f97c 	bl	800570c <_printf_i>
 8009414:	e7eb      	b.n	80093ee <_svfiprintf_r+0x1c2>
 8009416:	bf00      	nop
 8009418:	0800a174 	.word	0x0800a174
 800941c:	0800a17e 	.word	0x0800a17e
 8009420:	080051c5 	.word	0x080051c5
 8009424:	08009175 	.word	0x08009175
 8009428:	0800a17a 	.word	0x0800a17a

0800942c <__sfputc_r>:
 800942c:	6893      	ldr	r3, [r2, #8]
 800942e:	3b01      	subs	r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	b410      	push	{r4}
 8009434:	6093      	str	r3, [r2, #8]
 8009436:	da08      	bge.n	800944a <__sfputc_r+0x1e>
 8009438:	6994      	ldr	r4, [r2, #24]
 800943a:	42a3      	cmp	r3, r4
 800943c:	db01      	blt.n	8009442 <__sfputc_r+0x16>
 800943e:	290a      	cmp	r1, #10
 8009440:	d103      	bne.n	800944a <__sfputc_r+0x1e>
 8009442:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009446:	f7fd bbf7 	b.w	8006c38 <__swbuf_r>
 800944a:	6813      	ldr	r3, [r2, #0]
 800944c:	1c58      	adds	r0, r3, #1
 800944e:	6010      	str	r0, [r2, #0]
 8009450:	7019      	strb	r1, [r3, #0]
 8009452:	4608      	mov	r0, r1
 8009454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009458:	4770      	bx	lr

0800945a <__sfputs_r>:
 800945a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945c:	4606      	mov	r6, r0
 800945e:	460f      	mov	r7, r1
 8009460:	4614      	mov	r4, r2
 8009462:	18d5      	adds	r5, r2, r3
 8009464:	42ac      	cmp	r4, r5
 8009466:	d101      	bne.n	800946c <__sfputs_r+0x12>
 8009468:	2000      	movs	r0, #0
 800946a:	e007      	b.n	800947c <__sfputs_r+0x22>
 800946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009470:	463a      	mov	r2, r7
 8009472:	4630      	mov	r0, r6
 8009474:	f7ff ffda 	bl	800942c <__sfputc_r>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d1f3      	bne.n	8009464 <__sfputs_r+0xa>
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009480 <_vfiprintf_r>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	460d      	mov	r5, r1
 8009486:	b09d      	sub	sp, #116	; 0x74
 8009488:	4614      	mov	r4, r2
 800948a:	4698      	mov	r8, r3
 800948c:	4606      	mov	r6, r0
 800948e:	b118      	cbz	r0, 8009498 <_vfiprintf_r+0x18>
 8009490:	6983      	ldr	r3, [r0, #24]
 8009492:	b90b      	cbnz	r3, 8009498 <_vfiprintf_r+0x18>
 8009494:	f7fe fc24 	bl	8007ce0 <__sinit>
 8009498:	4b89      	ldr	r3, [pc, #548]	; (80096c0 <_vfiprintf_r+0x240>)
 800949a:	429d      	cmp	r5, r3
 800949c:	d11b      	bne.n	80094d6 <_vfiprintf_r+0x56>
 800949e:	6875      	ldr	r5, [r6, #4]
 80094a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094a2:	07d9      	lsls	r1, r3, #31
 80094a4:	d405      	bmi.n	80094b2 <_vfiprintf_r+0x32>
 80094a6:	89ab      	ldrh	r3, [r5, #12]
 80094a8:	059a      	lsls	r2, r3, #22
 80094aa:	d402      	bmi.n	80094b2 <_vfiprintf_r+0x32>
 80094ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094ae:	f7ff f828 	bl	8008502 <__retarget_lock_acquire_recursive>
 80094b2:	89ab      	ldrh	r3, [r5, #12]
 80094b4:	071b      	lsls	r3, r3, #28
 80094b6:	d501      	bpl.n	80094bc <_vfiprintf_r+0x3c>
 80094b8:	692b      	ldr	r3, [r5, #16]
 80094ba:	b9eb      	cbnz	r3, 80094f8 <_vfiprintf_r+0x78>
 80094bc:	4629      	mov	r1, r5
 80094be:	4630      	mov	r0, r6
 80094c0:	f7fd fc0c 	bl	8006cdc <__swsetup_r>
 80094c4:	b1c0      	cbz	r0, 80094f8 <_vfiprintf_r+0x78>
 80094c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c8:	07dc      	lsls	r4, r3, #31
 80094ca:	d50e      	bpl.n	80094ea <_vfiprintf_r+0x6a>
 80094cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094d0:	b01d      	add	sp, #116	; 0x74
 80094d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094d6:	4b7b      	ldr	r3, [pc, #492]	; (80096c4 <_vfiprintf_r+0x244>)
 80094d8:	429d      	cmp	r5, r3
 80094da:	d101      	bne.n	80094e0 <_vfiprintf_r+0x60>
 80094dc:	68b5      	ldr	r5, [r6, #8]
 80094de:	e7df      	b.n	80094a0 <_vfiprintf_r+0x20>
 80094e0:	4b79      	ldr	r3, [pc, #484]	; (80096c8 <_vfiprintf_r+0x248>)
 80094e2:	429d      	cmp	r5, r3
 80094e4:	bf08      	it	eq
 80094e6:	68f5      	ldreq	r5, [r6, #12]
 80094e8:	e7da      	b.n	80094a0 <_vfiprintf_r+0x20>
 80094ea:	89ab      	ldrh	r3, [r5, #12]
 80094ec:	0598      	lsls	r0, r3, #22
 80094ee:	d4ed      	bmi.n	80094cc <_vfiprintf_r+0x4c>
 80094f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094f2:	f7ff f807 	bl	8008504 <__retarget_lock_release_recursive>
 80094f6:	e7e9      	b.n	80094cc <_vfiprintf_r+0x4c>
 80094f8:	2300      	movs	r3, #0
 80094fa:	9309      	str	r3, [sp, #36]	; 0x24
 80094fc:	2320      	movs	r3, #32
 80094fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009502:	f8cd 800c 	str.w	r8, [sp, #12]
 8009506:	2330      	movs	r3, #48	; 0x30
 8009508:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80096cc <_vfiprintf_r+0x24c>
 800950c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009510:	f04f 0901 	mov.w	r9, #1
 8009514:	4623      	mov	r3, r4
 8009516:	469a      	mov	sl, r3
 8009518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800951c:	b10a      	cbz	r2, 8009522 <_vfiprintf_r+0xa2>
 800951e:	2a25      	cmp	r2, #37	; 0x25
 8009520:	d1f9      	bne.n	8009516 <_vfiprintf_r+0x96>
 8009522:	ebba 0b04 	subs.w	fp, sl, r4
 8009526:	d00b      	beq.n	8009540 <_vfiprintf_r+0xc0>
 8009528:	465b      	mov	r3, fp
 800952a:	4622      	mov	r2, r4
 800952c:	4629      	mov	r1, r5
 800952e:	4630      	mov	r0, r6
 8009530:	f7ff ff93 	bl	800945a <__sfputs_r>
 8009534:	3001      	adds	r0, #1
 8009536:	f000 80aa 	beq.w	800968e <_vfiprintf_r+0x20e>
 800953a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800953c:	445a      	add	r2, fp
 800953e:	9209      	str	r2, [sp, #36]	; 0x24
 8009540:	f89a 3000 	ldrb.w	r3, [sl]
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80a2 	beq.w	800968e <_vfiprintf_r+0x20e>
 800954a:	2300      	movs	r3, #0
 800954c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009554:	f10a 0a01 	add.w	sl, sl, #1
 8009558:	9304      	str	r3, [sp, #16]
 800955a:	9307      	str	r3, [sp, #28]
 800955c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009560:	931a      	str	r3, [sp, #104]	; 0x68
 8009562:	4654      	mov	r4, sl
 8009564:	2205      	movs	r2, #5
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	4858      	ldr	r0, [pc, #352]	; (80096cc <_vfiprintf_r+0x24c>)
 800956c:	f7f6 fe60 	bl	8000230 <memchr>
 8009570:	9a04      	ldr	r2, [sp, #16]
 8009572:	b9d8      	cbnz	r0, 80095ac <_vfiprintf_r+0x12c>
 8009574:	06d1      	lsls	r1, r2, #27
 8009576:	bf44      	itt	mi
 8009578:	2320      	movmi	r3, #32
 800957a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800957e:	0713      	lsls	r3, r2, #28
 8009580:	bf44      	itt	mi
 8009582:	232b      	movmi	r3, #43	; 0x2b
 8009584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009588:	f89a 3000 	ldrb.w	r3, [sl]
 800958c:	2b2a      	cmp	r3, #42	; 0x2a
 800958e:	d015      	beq.n	80095bc <_vfiprintf_r+0x13c>
 8009590:	9a07      	ldr	r2, [sp, #28]
 8009592:	4654      	mov	r4, sl
 8009594:	2000      	movs	r0, #0
 8009596:	f04f 0c0a 	mov.w	ip, #10
 800959a:	4621      	mov	r1, r4
 800959c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095a0:	3b30      	subs	r3, #48	; 0x30
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d94e      	bls.n	8009644 <_vfiprintf_r+0x1c4>
 80095a6:	b1b0      	cbz	r0, 80095d6 <_vfiprintf_r+0x156>
 80095a8:	9207      	str	r2, [sp, #28]
 80095aa:	e014      	b.n	80095d6 <_vfiprintf_r+0x156>
 80095ac:	eba0 0308 	sub.w	r3, r0, r8
 80095b0:	fa09 f303 	lsl.w	r3, r9, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	9304      	str	r3, [sp, #16]
 80095b8:	46a2      	mov	sl, r4
 80095ba:	e7d2      	b.n	8009562 <_vfiprintf_r+0xe2>
 80095bc:	9b03      	ldr	r3, [sp, #12]
 80095be:	1d19      	adds	r1, r3, #4
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	9103      	str	r1, [sp, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	bfbb      	ittet	lt
 80095c8:	425b      	neglt	r3, r3
 80095ca:	f042 0202 	orrlt.w	r2, r2, #2
 80095ce:	9307      	strge	r3, [sp, #28]
 80095d0:	9307      	strlt	r3, [sp, #28]
 80095d2:	bfb8      	it	lt
 80095d4:	9204      	strlt	r2, [sp, #16]
 80095d6:	7823      	ldrb	r3, [r4, #0]
 80095d8:	2b2e      	cmp	r3, #46	; 0x2e
 80095da:	d10c      	bne.n	80095f6 <_vfiprintf_r+0x176>
 80095dc:	7863      	ldrb	r3, [r4, #1]
 80095de:	2b2a      	cmp	r3, #42	; 0x2a
 80095e0:	d135      	bne.n	800964e <_vfiprintf_r+0x1ce>
 80095e2:	9b03      	ldr	r3, [sp, #12]
 80095e4:	1d1a      	adds	r2, r3, #4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	9203      	str	r2, [sp, #12]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	bfb8      	it	lt
 80095ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80095f2:	3402      	adds	r4, #2
 80095f4:	9305      	str	r3, [sp, #20]
 80095f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80096dc <_vfiprintf_r+0x25c>
 80095fa:	7821      	ldrb	r1, [r4, #0]
 80095fc:	2203      	movs	r2, #3
 80095fe:	4650      	mov	r0, sl
 8009600:	f7f6 fe16 	bl	8000230 <memchr>
 8009604:	b140      	cbz	r0, 8009618 <_vfiprintf_r+0x198>
 8009606:	2340      	movs	r3, #64	; 0x40
 8009608:	eba0 000a 	sub.w	r0, r0, sl
 800960c:	fa03 f000 	lsl.w	r0, r3, r0
 8009610:	9b04      	ldr	r3, [sp, #16]
 8009612:	4303      	orrs	r3, r0
 8009614:	3401      	adds	r4, #1
 8009616:	9304      	str	r3, [sp, #16]
 8009618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961c:	482c      	ldr	r0, [pc, #176]	; (80096d0 <_vfiprintf_r+0x250>)
 800961e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009622:	2206      	movs	r2, #6
 8009624:	f7f6 fe04 	bl	8000230 <memchr>
 8009628:	2800      	cmp	r0, #0
 800962a:	d03f      	beq.n	80096ac <_vfiprintf_r+0x22c>
 800962c:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <_vfiprintf_r+0x254>)
 800962e:	bb1b      	cbnz	r3, 8009678 <_vfiprintf_r+0x1f8>
 8009630:	9b03      	ldr	r3, [sp, #12]
 8009632:	3307      	adds	r3, #7
 8009634:	f023 0307 	bic.w	r3, r3, #7
 8009638:	3308      	adds	r3, #8
 800963a:	9303      	str	r3, [sp, #12]
 800963c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800963e:	443b      	add	r3, r7
 8009640:	9309      	str	r3, [sp, #36]	; 0x24
 8009642:	e767      	b.n	8009514 <_vfiprintf_r+0x94>
 8009644:	fb0c 3202 	mla	r2, ip, r2, r3
 8009648:	460c      	mov	r4, r1
 800964a:	2001      	movs	r0, #1
 800964c:	e7a5      	b.n	800959a <_vfiprintf_r+0x11a>
 800964e:	2300      	movs	r3, #0
 8009650:	3401      	adds	r4, #1
 8009652:	9305      	str	r3, [sp, #20]
 8009654:	4619      	mov	r1, r3
 8009656:	f04f 0c0a 	mov.w	ip, #10
 800965a:	4620      	mov	r0, r4
 800965c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009660:	3a30      	subs	r2, #48	; 0x30
 8009662:	2a09      	cmp	r2, #9
 8009664:	d903      	bls.n	800966e <_vfiprintf_r+0x1ee>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d0c5      	beq.n	80095f6 <_vfiprintf_r+0x176>
 800966a:	9105      	str	r1, [sp, #20]
 800966c:	e7c3      	b.n	80095f6 <_vfiprintf_r+0x176>
 800966e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009672:	4604      	mov	r4, r0
 8009674:	2301      	movs	r3, #1
 8009676:	e7f0      	b.n	800965a <_vfiprintf_r+0x1da>
 8009678:	ab03      	add	r3, sp, #12
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	462a      	mov	r2, r5
 800967e:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <_vfiprintf_r+0x258>)
 8009680:	a904      	add	r1, sp, #16
 8009682:	4630      	mov	r0, r6
 8009684:	f7fb fd9e 	bl	80051c4 <_printf_float>
 8009688:	4607      	mov	r7, r0
 800968a:	1c78      	adds	r0, r7, #1
 800968c:	d1d6      	bne.n	800963c <_vfiprintf_r+0x1bc>
 800968e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009690:	07d9      	lsls	r1, r3, #31
 8009692:	d405      	bmi.n	80096a0 <_vfiprintf_r+0x220>
 8009694:	89ab      	ldrh	r3, [r5, #12]
 8009696:	059a      	lsls	r2, r3, #22
 8009698:	d402      	bmi.n	80096a0 <_vfiprintf_r+0x220>
 800969a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800969c:	f7fe ff32 	bl	8008504 <__retarget_lock_release_recursive>
 80096a0:	89ab      	ldrh	r3, [r5, #12]
 80096a2:	065b      	lsls	r3, r3, #25
 80096a4:	f53f af12 	bmi.w	80094cc <_vfiprintf_r+0x4c>
 80096a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096aa:	e711      	b.n	80094d0 <_vfiprintf_r+0x50>
 80096ac:	ab03      	add	r3, sp, #12
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	462a      	mov	r2, r5
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <_vfiprintf_r+0x258>)
 80096b4:	a904      	add	r1, sp, #16
 80096b6:	4630      	mov	r0, r6
 80096b8:	f7fc f828 	bl	800570c <_printf_i>
 80096bc:	e7e4      	b.n	8009688 <_vfiprintf_r+0x208>
 80096be:	bf00      	nop
 80096c0:	08009f5c 	.word	0x08009f5c
 80096c4:	08009f7c 	.word	0x08009f7c
 80096c8:	08009f3c 	.word	0x08009f3c
 80096cc:	0800a174 	.word	0x0800a174
 80096d0:	0800a17e 	.word	0x0800a17e
 80096d4:	080051c5 	.word	0x080051c5
 80096d8:	0800945b 	.word	0x0800945b
 80096dc:	0800a17a 	.word	0x0800a17a

080096e0 <nan>:
 80096e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80096e8 <nan+0x8>
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	00000000 	.word	0x00000000
 80096ec:	7ff80000 	.word	0x7ff80000

080096f0 <_sbrk_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d06      	ldr	r5, [pc, #24]	; (800970c <_sbrk_r+0x1c>)
 80096f4:	2300      	movs	r3, #0
 80096f6:	4604      	mov	r4, r0
 80096f8:	4608      	mov	r0, r1
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	f7f8 fab8 	bl	8001c70 <_sbrk>
 8009700:	1c43      	adds	r3, r0, #1
 8009702:	d102      	bne.n	800970a <_sbrk_r+0x1a>
 8009704:	682b      	ldr	r3, [r5, #0]
 8009706:	b103      	cbz	r3, 800970a <_sbrk_r+0x1a>
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	bd38      	pop	{r3, r4, r5, pc}
 800970c:	200003bc 	.word	0x200003bc

08009710 <__sread>:
 8009710:	b510      	push	{r4, lr}
 8009712:	460c      	mov	r4, r1
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	f000 f93a 	bl	8009990 <_read_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	bfab      	itete	ge
 8009720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009722:	89a3      	ldrhlt	r3, [r4, #12]
 8009724:	181b      	addge	r3, r3, r0
 8009726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800972a:	bfac      	ite	ge
 800972c:	6563      	strge	r3, [r4, #84]	; 0x54
 800972e:	81a3      	strhlt	r3, [r4, #12]
 8009730:	bd10      	pop	{r4, pc}

08009732 <__swrite>:
 8009732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	461f      	mov	r7, r3
 8009738:	898b      	ldrh	r3, [r1, #12]
 800973a:	05db      	lsls	r3, r3, #23
 800973c:	4605      	mov	r5, r0
 800973e:	460c      	mov	r4, r1
 8009740:	4616      	mov	r6, r2
 8009742:	d505      	bpl.n	8009750 <__swrite+0x1e>
 8009744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009748:	2302      	movs	r3, #2
 800974a:	2200      	movs	r2, #0
 800974c:	f000 f8b8 	bl	80098c0 <_lseek_r>
 8009750:	89a3      	ldrh	r3, [r4, #12]
 8009752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	4632      	mov	r2, r6
 800975e:	463b      	mov	r3, r7
 8009760:	4628      	mov	r0, r5
 8009762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009766:	f000 b837 	b.w	80097d8 <_write_r>

0800976a <__sseek>:
 800976a:	b510      	push	{r4, lr}
 800976c:	460c      	mov	r4, r1
 800976e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009772:	f000 f8a5 	bl	80098c0 <_lseek_r>
 8009776:	1c43      	adds	r3, r0, #1
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	bf15      	itete	ne
 800977c:	6560      	strne	r0, [r4, #84]	; 0x54
 800977e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009786:	81a3      	strheq	r3, [r4, #12]
 8009788:	bf18      	it	ne
 800978a:	81a3      	strhne	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__sclose>:
 800978e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009792:	f000 b851 	b.w	8009838 <_close_r>

08009796 <strncmp>:
 8009796:	b510      	push	{r4, lr}
 8009798:	b17a      	cbz	r2, 80097ba <strncmp+0x24>
 800979a:	4603      	mov	r3, r0
 800979c:	3901      	subs	r1, #1
 800979e:	1884      	adds	r4, r0, r2
 80097a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80097a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80097a8:	4290      	cmp	r0, r2
 80097aa:	d101      	bne.n	80097b0 <strncmp+0x1a>
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	d101      	bne.n	80097b4 <strncmp+0x1e>
 80097b0:	1a80      	subs	r0, r0, r2
 80097b2:	bd10      	pop	{r4, pc}
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1f3      	bne.n	80097a0 <strncmp+0xa>
 80097b8:	e7fa      	b.n	80097b0 <strncmp+0x1a>
 80097ba:	4610      	mov	r0, r2
 80097bc:	e7f9      	b.n	80097b2 <strncmp+0x1c>

080097be <__ascii_wctomb>:
 80097be:	b149      	cbz	r1, 80097d4 <__ascii_wctomb+0x16>
 80097c0:	2aff      	cmp	r2, #255	; 0xff
 80097c2:	bf85      	ittet	hi
 80097c4:	238a      	movhi	r3, #138	; 0x8a
 80097c6:	6003      	strhi	r3, [r0, #0]
 80097c8:	700a      	strbls	r2, [r1, #0]
 80097ca:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80097ce:	bf98      	it	ls
 80097d0:	2001      	movls	r0, #1
 80097d2:	4770      	bx	lr
 80097d4:	4608      	mov	r0, r1
 80097d6:	4770      	bx	lr

080097d8 <_write_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	; (80097f8 <_write_r+0x20>)
 80097dc:	4604      	mov	r4, r0
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	2200      	movs	r2, #0
 80097e4:	602a      	str	r2, [r5, #0]
 80097e6:	461a      	mov	r2, r3
 80097e8:	f7f8 f9f1 	bl	8001bce <_write>
 80097ec:	1c43      	adds	r3, r0, #1
 80097ee:	d102      	bne.n	80097f6 <_write_r+0x1e>
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	b103      	cbz	r3, 80097f6 <_write_r+0x1e>
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	200003bc 	.word	0x200003bc

080097fc <__assert_func>:
 80097fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097fe:	4614      	mov	r4, r2
 8009800:	461a      	mov	r2, r3
 8009802:	4b09      	ldr	r3, [pc, #36]	; (8009828 <__assert_func+0x2c>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4605      	mov	r5, r0
 8009808:	68d8      	ldr	r0, [r3, #12]
 800980a:	b14c      	cbz	r4, 8009820 <__assert_func+0x24>
 800980c:	4b07      	ldr	r3, [pc, #28]	; (800982c <__assert_func+0x30>)
 800980e:	9100      	str	r1, [sp, #0]
 8009810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009814:	4906      	ldr	r1, [pc, #24]	; (8009830 <__assert_func+0x34>)
 8009816:	462b      	mov	r3, r5
 8009818:	f000 f81e 	bl	8009858 <fiprintf>
 800981c:	f000 f8ca 	bl	80099b4 <abort>
 8009820:	4b04      	ldr	r3, [pc, #16]	; (8009834 <__assert_func+0x38>)
 8009822:	461c      	mov	r4, r3
 8009824:	e7f3      	b.n	800980e <__assert_func+0x12>
 8009826:	bf00      	nop
 8009828:	20000018 	.word	0x20000018
 800982c:	0800a185 	.word	0x0800a185
 8009830:	0800a192 	.word	0x0800a192
 8009834:	0800a1c0 	.word	0x0800a1c0

08009838 <_close_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d06      	ldr	r5, [pc, #24]	; (8009854 <_close_r+0x1c>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f8 f9df 	bl	8001c06 <_close>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d102      	bne.n	8009852 <_close_r+0x1a>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	b103      	cbz	r3, 8009852 <_close_r+0x1a>
 8009850:	6023      	str	r3, [r4, #0]
 8009852:	bd38      	pop	{r3, r4, r5, pc}
 8009854:	200003bc 	.word	0x200003bc

08009858 <fiprintf>:
 8009858:	b40e      	push	{r1, r2, r3}
 800985a:	b503      	push	{r0, r1, lr}
 800985c:	4601      	mov	r1, r0
 800985e:	ab03      	add	r3, sp, #12
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <fiprintf+0x20>)
 8009862:	f853 2b04 	ldr.w	r2, [r3], #4
 8009866:	6800      	ldr	r0, [r0, #0]
 8009868:	9301      	str	r3, [sp, #4]
 800986a:	f7ff fe09 	bl	8009480 <_vfiprintf_r>
 800986e:	b002      	add	sp, #8
 8009870:	f85d eb04 	ldr.w	lr, [sp], #4
 8009874:	b003      	add	sp, #12
 8009876:	4770      	bx	lr
 8009878:	20000018 	.word	0x20000018

0800987c <_fstat_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_fstat_r+0x20>)
 8009880:	2300      	movs	r3, #0
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	4611      	mov	r1, r2
 8009888:	602b      	str	r3, [r5, #0]
 800988a:	f7f8 f9c8 	bl	8001c1e <_fstat>
 800988e:	1c43      	adds	r3, r0, #1
 8009890:	d102      	bne.n	8009898 <_fstat_r+0x1c>
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	b103      	cbz	r3, 8009898 <_fstat_r+0x1c>
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	bf00      	nop
 800989c:	200003bc 	.word	0x200003bc

080098a0 <_isatty_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d06      	ldr	r5, [pc, #24]	; (80098bc <_isatty_r+0x1c>)
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	f7f8 f9c7 	bl	8001c3e <_isatty>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_isatty_r+0x1a>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_isatty_r+0x1a>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	200003bc 	.word	0x200003bc

080098c0 <_lseek_r>:
 80098c0:	b538      	push	{r3, r4, r5, lr}
 80098c2:	4d07      	ldr	r5, [pc, #28]	; (80098e0 <_lseek_r+0x20>)
 80098c4:	4604      	mov	r4, r0
 80098c6:	4608      	mov	r0, r1
 80098c8:	4611      	mov	r1, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	602a      	str	r2, [r5, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f7f8 f9c0 	bl	8001c54 <_lseek>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_lseek_r+0x1e>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_lseek_r+0x1e>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	200003bc 	.word	0x200003bc

080098e4 <memmove>:
 80098e4:	4288      	cmp	r0, r1
 80098e6:	b510      	push	{r4, lr}
 80098e8:	eb01 0402 	add.w	r4, r1, r2
 80098ec:	d902      	bls.n	80098f4 <memmove+0x10>
 80098ee:	4284      	cmp	r4, r0
 80098f0:	4623      	mov	r3, r4
 80098f2:	d807      	bhi.n	8009904 <memmove+0x20>
 80098f4:	1e43      	subs	r3, r0, #1
 80098f6:	42a1      	cmp	r1, r4
 80098f8:	d008      	beq.n	800990c <memmove+0x28>
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009902:	e7f8      	b.n	80098f6 <memmove+0x12>
 8009904:	4402      	add	r2, r0
 8009906:	4601      	mov	r1, r0
 8009908:	428a      	cmp	r2, r1
 800990a:	d100      	bne.n	800990e <memmove+0x2a>
 800990c:	bd10      	pop	{r4, pc}
 800990e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009916:	e7f7      	b.n	8009908 <memmove+0x24>

08009918 <__malloc_lock>:
 8009918:	4801      	ldr	r0, [pc, #4]	; (8009920 <__malloc_lock+0x8>)
 800991a:	f7fe bdf2 	b.w	8008502 <__retarget_lock_acquire_recursive>
 800991e:	bf00      	nop
 8009920:	200003b0 	.word	0x200003b0

08009924 <__malloc_unlock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_unlock+0x8>)
 8009926:	f7fe bded 	b.w	8008504 <__retarget_lock_release_recursive>
 800992a:	bf00      	nop
 800992c:	200003b0 	.word	0x200003b0

08009930 <_realloc_r>:
 8009930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009934:	4680      	mov	r8, r0
 8009936:	4614      	mov	r4, r2
 8009938:	460e      	mov	r6, r1
 800993a:	b921      	cbnz	r1, 8009946 <_realloc_r+0x16>
 800993c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009940:	4611      	mov	r1, r2
 8009942:	f7ff bba3 	b.w	800908c <_malloc_r>
 8009946:	b92a      	cbnz	r2, 8009954 <_realloc_r+0x24>
 8009948:	f7ff fb34 	bl	8008fb4 <_free_r>
 800994c:	4625      	mov	r5, r4
 800994e:	4628      	mov	r0, r5
 8009950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009954:	f000 f835 	bl	80099c2 <_malloc_usable_size_r>
 8009958:	4284      	cmp	r4, r0
 800995a:	4607      	mov	r7, r0
 800995c:	d802      	bhi.n	8009964 <_realloc_r+0x34>
 800995e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009962:	d812      	bhi.n	800998a <_realloc_r+0x5a>
 8009964:	4621      	mov	r1, r4
 8009966:	4640      	mov	r0, r8
 8009968:	f7ff fb90 	bl	800908c <_malloc_r>
 800996c:	4605      	mov	r5, r0
 800996e:	2800      	cmp	r0, #0
 8009970:	d0ed      	beq.n	800994e <_realloc_r+0x1e>
 8009972:	42bc      	cmp	r4, r7
 8009974:	4622      	mov	r2, r4
 8009976:	4631      	mov	r1, r6
 8009978:	bf28      	it	cs
 800997a:	463a      	movcs	r2, r7
 800997c:	f7fb fb6c 	bl	8005058 <memcpy>
 8009980:	4631      	mov	r1, r6
 8009982:	4640      	mov	r0, r8
 8009984:	f7ff fb16 	bl	8008fb4 <_free_r>
 8009988:	e7e1      	b.n	800994e <_realloc_r+0x1e>
 800998a:	4635      	mov	r5, r6
 800998c:	e7df      	b.n	800994e <_realloc_r+0x1e>
	...

08009990 <_read_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_read_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f7f8 f8f8 	bl	8001b94 <_read>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_read_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_read_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	200003bc 	.word	0x200003bc

080099b4 <abort>:
 80099b4:	b508      	push	{r3, lr}
 80099b6:	2006      	movs	r0, #6
 80099b8:	f000 f834 	bl	8009a24 <raise>
 80099bc:	2001      	movs	r0, #1
 80099be:	f7f8 f8df 	bl	8001b80 <_exit>

080099c2 <_malloc_usable_size_r>:
 80099c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c6:	1f18      	subs	r0, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbc      	itt	lt
 80099cc:	580b      	ldrlt	r3, [r1, r0]
 80099ce:	18c0      	addlt	r0, r0, r3
 80099d0:	4770      	bx	lr

080099d2 <_raise_r>:
 80099d2:	291f      	cmp	r1, #31
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4604      	mov	r4, r0
 80099d8:	460d      	mov	r5, r1
 80099da:	d904      	bls.n	80099e6 <_raise_r+0x14>
 80099dc:	2316      	movs	r3, #22
 80099de:	6003      	str	r3, [r0, #0]
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099e8:	b112      	cbz	r2, 80099f0 <_raise_r+0x1e>
 80099ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ee:	b94b      	cbnz	r3, 8009a04 <_raise_r+0x32>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f000 f831 	bl	8009a58 <_getpid_r>
 80099f6:	462a      	mov	r2, r5
 80099f8:	4601      	mov	r1, r0
 80099fa:	4620      	mov	r0, r4
 80099fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a00:	f000 b818 	b.w	8009a34 <_kill_r>
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d00a      	beq.n	8009a1e <_raise_r+0x4c>
 8009a08:	1c59      	adds	r1, r3, #1
 8009a0a:	d103      	bne.n	8009a14 <_raise_r+0x42>
 8009a0c:	2316      	movs	r3, #22
 8009a0e:	6003      	str	r3, [r0, #0]
 8009a10:	2001      	movs	r0, #1
 8009a12:	e7e7      	b.n	80099e4 <_raise_r+0x12>
 8009a14:	2400      	movs	r4, #0
 8009a16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	4798      	blx	r3
 8009a1e:	2000      	movs	r0, #0
 8009a20:	e7e0      	b.n	80099e4 <_raise_r+0x12>
	...

08009a24 <raise>:
 8009a24:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <raise+0xc>)
 8009a26:	4601      	mov	r1, r0
 8009a28:	6818      	ldr	r0, [r3, #0]
 8009a2a:	f7ff bfd2 	b.w	80099d2 <_raise_r>
 8009a2e:	bf00      	nop
 8009a30:	20000018 	.word	0x20000018

08009a34 <_kill_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	; (8009a54 <_kill_r+0x20>)
 8009a38:	2300      	movs	r3, #0
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	4608      	mov	r0, r1
 8009a3e:	4611      	mov	r1, r2
 8009a40:	602b      	str	r3, [r5, #0]
 8009a42:	f7f8 f88d 	bl	8001b60 <_kill>
 8009a46:	1c43      	adds	r3, r0, #1
 8009a48:	d102      	bne.n	8009a50 <_kill_r+0x1c>
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	b103      	cbz	r3, 8009a50 <_kill_r+0x1c>
 8009a4e:	6023      	str	r3, [r4, #0]
 8009a50:	bd38      	pop	{r3, r4, r5, pc}
 8009a52:	bf00      	nop
 8009a54:	200003bc 	.word	0x200003bc

08009a58 <_getpid_r>:
 8009a58:	f7f8 b87a 	b.w	8001b50 <_getpid>

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
