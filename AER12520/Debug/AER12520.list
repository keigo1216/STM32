
AER12520.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e9c  08004e9c  000201b0  2**0
                  CONTENTS
  4 .ARM          00000008  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ea4  08004ea4  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea4  08004ea4  00014ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004eac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000070  08004f1c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000110  08004fbc  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000700  200001b0  0800505c  000201b0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200008b0  0800505c  000208b0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00016730  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002637  00000000  00000000  00036910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001110  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028454  00000000  00000000  0003b260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000150ec  00000000  00000000  000636b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb82e  00000000  00000000  000787a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00173fce  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005178  00000000  00000000  00174020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e30 	.word	0x08004e30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001b4 	.word	0x200001b4
 800020c:	08004e30 	.word	0x08004e30

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b09a      	sub	sp, #104	; 0x68
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fcda 	bl	8000f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f831 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f999 	bl	8000908 <MX_GPIO_Init>
  MX_ETH_Init();
 80005d6:	f000 f895 	bl	8000704 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005da:	f000 f937 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005de:	f000 f965 	bl	80008ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005e2:	f000 f8dd 	bl	80007a0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80005e6:	213c      	movs	r1, #60	; 0x3c
 80005e8:	480e      	ldr	r0, [pc, #56]	; (8000624 <main+0x60>)
 80005ea:	f002 fdd5 	bl	8003198 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	cnt = TIM3 -> CNT;
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <main+0x64>)
 80005f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64
	sprintf(scnt, "%d\r\n", cnt);
 80005f4:	463b      	mov	r3, r7
 80005f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <main+0x68>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 ffaa 	bl	8004554 <siprintf>
	HAL_UART_Transmit( &huart3, scnt, strlen(scnt) + 1, 0xFFFF);
 8000600:	463b      	mov	r3, r7
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe04 	bl	8000210 <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29b      	uxth	r3, r3
 800060c:	3301      	adds	r3, #1
 800060e:	b29a      	uxth	r2, r3
 8000610:	4639      	mov	r1, r7
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <main+0x6c>)
 8000618:	f002 ffee 	bl	80035f8 <HAL_UART_Transmit>
	HAL_Delay( 100 );
 800061c:	2064      	movs	r0, #100	; 0x64
 800061e:	f000 fd0d 	bl	800103c <HAL_Delay>
	cnt = TIM3 -> CNT;
 8000622:	e7e4      	b.n	80005ee <main+0x2a>
 8000624:	200002b4 	.word	0x200002b4
 8000628:	40000400 	.word	0x40000400
 800062c:	08004e48 	.word	0x08004e48
 8000630:	20000300 	.word	0x20000300

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ff7e 	bl	8004544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000658:	f001 fc2e 	bl	8001eb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b27      	ldr	r3, [pc, #156]	; (80006fc <SystemClock_Config+0xc8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a26      	ldr	r2, [pc, #152]	; (80006fc <SystemClock_Config+0xc8>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <SystemClock_Config+0xc8>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	4b22      	ldr	r3, [pc, #136]	; (8000700 <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <SystemClock_Config+0xcc>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <SystemClock_Config+0xcc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006a8:	2348      	movs	r3, #72	; 0x48
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006b0:	2303      	movs	r3, #3
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc0d 	bl	8001ed8 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f9c2 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2102      	movs	r1, #2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fe9b 	bl	8002420 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f0:	f000 f9ac 	bl	8000a4c <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000708:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <MX_ETH_Init+0x84>)
 800070a:	4a20      	ldr	r2, [pc, #128]	; (800078c <MX_ETH_Init+0x88>)
 800070c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <MX_ETH_Init+0x8c>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_ETH_Init+0x8c>)
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_ETH_Init+0x8c>)
 800071c:	22e1      	movs	r2, #225	; 0xe1
 800071e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_ETH_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_ETH_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_ETH_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <MX_ETH_Init+0x84>)
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <MX_ETH_Init+0x8c>)
 8000736:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_ETH_Init+0x84>)
 800073a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800073e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_ETH_Init+0x84>)
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <MX_ETH_Init+0x90>)
 8000744:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_ETH_Init+0x84>)
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_ETH_Init+0x94>)
 800074a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_ETH_Init+0x84>)
 800074e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000752:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000754:	480c      	ldr	r0, [pc, #48]	; (8000788 <MX_ETH_Init+0x84>)
 8000756:	f000 fd7b 	bl	8001250 <HAL_ETH_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000760:	f000 f974 	bl	8000a4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000764:	2238      	movs	r2, #56	; 0x38
 8000766:	2100      	movs	r1, #0
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <MX_ETH_Init+0x98>)
 800076a:	f003 feeb 	bl	8004544 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_ETH_Init+0x98>)
 8000770:	2221      	movs	r2, #33	; 0x21
 8000772:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_ETH_Init+0x98>)
 8000776:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800077a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <MX_ETH_Init+0x98>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000204 	.word	0x20000204
 800078c:	40028000 	.word	0x40028000
 8000790:	20000890 	.word	0x20000890
 8000794:	20000110 	.word	0x20000110
 8000798:	20000070 	.word	0x20000070
 800079c:	200001cc 	.word	0x200001cc

080007a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2224      	movs	r2, #36	; 0x24
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fec8 	bl	8004544 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007be:	4b21      	ldr	r3, [pc, #132]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <MX_TIM3_Init+0xa8>)
 80007c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM3_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007e4:	2303      	movs	r3, #3
 80007e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ec:	2301      	movs	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007fc:	2301      	movs	r3, #1
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_TIM3_Init+0xa4>)
 8000810:	f002 fc1c 	bl	800304c <HAL_TIM_Encoder_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800081a:	f000 f917 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_TIM3_Init+0xa4>)
 800082c:	f002 fe08 	bl	8003440 <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000836:	f000 f909 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	; 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200002b4 	.word	0x200002b4
 8000848:	40000400 	.word	0x40000400

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f002 fe64 	bl	800355c <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f8d7 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000300 	.word	0x20000300
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2206      	movs	r2, #6
 80008bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	f001 f999 	bl	8001c26 <HAL_PCD_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8a7 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000388 	.word	0x20000388

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x134>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x134>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x134>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x134>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0x134>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b4:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009b6:	f001 f91d 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_GPIO_Init+0x13c>)
 80009c0:	f001 f918 	bl	8001bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481b      	ldr	r0, [pc, #108]	; (8000a48 <MX_GPIO_Init+0x140>)
 80009dc:	f000 ff5e 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009fa:	f000 ff4f 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a16:	f000 ff41 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a2e:	f000 ff35 	bl	800189c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020800 	.word	0x40020800

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08e      	sub	sp, #56	; 0x38
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <HAL_ETH_MspInit+0x158>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	f040 8096 	bne.w	8000bf0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a4c      	ldr	r2, [pc, #304]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a46      	ldr	r2, [pc, #280]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000ae2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	4b41      	ldr	r3, [pc, #260]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	4a40      	ldr	r2, [pc, #256]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000afa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000afe:	6313      	str	r3, [r2, #48]	; 0x30
 8000b00:	4b3e      	ldr	r3, [pc, #248]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b3b      	ldr	r3, [pc, #236]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a3a      	ldr	r2, [pc, #232]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b38      	ldr	r3, [pc, #224]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b28:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b30:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	6313      	str	r3, [r2, #48]	; 0x30
 8000b48:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b58:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_ETH_MspInit+0x15c>)
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b6c:	2332      	movs	r3, #50	; 0x32
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7c:	230b      	movs	r3, #11
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b84:	4619      	mov	r1, r3
 8000b86:	481e      	ldr	r0, [pc, #120]	; (8000c00 <HAL_ETH_MspInit+0x160>)
 8000b88:	f000 fe88 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b8c:	2386      	movs	r3, #134	; 0x86
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9c:	230b      	movs	r3, #11
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4817      	ldr	r0, [pc, #92]	; (8000c04 <HAL_ETH_MspInit+0x164>)
 8000ba8:	f000 fe78 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480f      	ldr	r0, [pc, #60]	; (8000c08 <HAL_ETH_MspInit+0x168>)
 8000bca:	f000 fe67 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4808      	ldr	r0, [pc, #32]	; (8000c0c <HAL_ETH_MspInit+0x16c>)
 8000bec:	f000 fe56 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3738      	adds	r7, #56	; 0x38
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40028000 	.word	0x40028000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020800 	.word	0x40020800
 8000c04:	40020000 	.word	0x40020000
 8000c08:	40020400 	.word	0x40020400
 8000c0c:	40021800 	.word	0x40021800

08000c10 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a17      	ldr	r2, [pc, #92]	; (8000c8c <HAL_TIM_Encoder_MspInit+0x7c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d127      	bne.n	8000c82 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_TIM_Encoder_MspInit+0x80>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c72:	2302      	movs	r3, #2
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4805      	ldr	r0, [pc, #20]	; (8000c94 <HAL_TIM_Encoder_MspInit+0x84>)
 8000c7e:	f000 fe0d 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40000400 	.word	0x40000400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020800 	.word	0x40020800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b0aa      	sub	sp, #168	; 0xa8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2284      	movs	r2, #132	; 0x84
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fc43 	bl	8004544 <memset>
  if(huart->Instance==USART3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <HAL_UART_MspInit+0xb4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d13c      	bne.n	8000d42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 fdc8 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce2:	f7ff feb3 	bl	8000a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0xb8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0xbc>)
 8000d3e:	f000 fdad 	bl	800189c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	37a8      	adds	r7, #168	; 0xa8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40004800 	.word	0x40004800
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020c00 	.word	0x40020c00

08000d58 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0ac      	sub	sp, #176	; 0xb0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	2284      	movs	r2, #132	; 0x84
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fbe3 	bl	8004544 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d86:	d159      	bne.n	8000e3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000d88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fd67 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000da4:	f7ff fe52 	bl	8000a4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	6313      	str	r3, [r2, #48]	; 0x30
 8000db4:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dda:	230a      	movs	r3, #10
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	4619      	mov	r1, r3
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000de8:	f000 fd58 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e04:	4619      	mov	r1, r3
 8000e06:	4810      	ldr	r0, [pc, #64]	; (8000e48 <HAL_PCD_MspInit+0xf0>)
 8000e08:	f000 fd48 	bl	800189c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e0c:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e16:	6353      	str	r3, [r2, #52]	; 0x34
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e30:	4b04      	ldr	r3, [pc, #16]	; (8000e44 <HAL_PCD_MspInit+0xec>)
 8000e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e3c:	bf00      	nop
 8000e3e:	37b0      	adds	r7, #176	; 0xb0
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020000 	.word	0x40020000

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8b0 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f003 fb0e 	bl	80044f0 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20050000 	.word	0x20050000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000898 	.word	0x20000898
 8000f08:	200008b0 	.word	0x200008b0

08000f0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f4c:	4c0b      	ldr	r4, [pc, #44]	; (8000f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f5a:	f7ff ffd7 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f003 facd 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fb2f 	bl	80005c4 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f74:	08004eac 	.word	0x08004eac
  ldr r2, =_sbss
 8000f78:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 8000f7c:	200008b0 	.word	0x200008b0

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>

08000f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f86:	2003      	movs	r0, #3
 8000f88:	f000 f92e 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f000 f805 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f92:	f7ff fd61 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f93b 	bl	8001236 <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd8:	f000 f911 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008
 8001020:	2000089c 	.word	0x2000089c

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000089c 	.word	0x2000089c

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000008 	.word	0x20000008

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x40>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	05fa0000 	.word	0x05fa0000

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff47 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5c 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb0 	bl	80011a4 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e06a      	b.n	8001338 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2223      	movs	r2, #35	; 0x23
 8001270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fc13 	bl	8000aa0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_ETH_Init+0xf0>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_ETH_Init+0xf0>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_ETH_Init+0xf0>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_ETH_Init+0xf4>)
 8001298:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800129c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_ETH_Init+0xf4>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	4927      	ldr	r1, [pc, #156]	; (8001344 <HAL_ETH_Init+0xf4>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_ETH_Init+0xf4>)
 80012ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6812      	ldr	r2, [r2, #0]
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff feac 	bl	8001024 <HAL_GetTick>
 80012cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ce:	e011      	b.n	80012f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d0:	f7ff fea8 	bl	8001024 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012de:	d909      	bls.n	80012f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2204      	movs	r2, #4
 80012e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	22e0      	movs	r2, #224	; 0xe0
 80012ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e021      	b.n	8001338 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1e4      	bne.n	80012d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f958 	bl	80015bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f9ff 	bl	8001710 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa55 	bl	80017c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f9bd 	bl	80016a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2210      	movs	r2, #16
 8001332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40013800 	.word	0x40013800

08001348 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <ETH_SetMACConfig+0x15c>)
 800135e:	4013      	ands	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7c1b      	ldrb	r3, [r3, #16]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d102      	bne.n	8001370 <ETH_SetMACConfig+0x28>
 800136a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800136e:	e000      	b.n	8001372 <ETH_SetMACConfig+0x2a>
 8001370:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	7c5b      	ldrb	r3, [r3, #17]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <ETH_SetMACConfig+0x38>
 800137a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800137e:	e000      	b.n	8001382 <ETH_SetMACConfig+0x3a>
 8001380:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001382:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001388:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	7fdb      	ldrb	r3, [r3, #31]
 800138e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001390:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001396:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	7f92      	ldrb	r2, [r2, #30]
 800139c:	2a00      	cmp	r2, #0
 800139e:	d102      	bne.n	80013a6 <ETH_SetMACConfig+0x5e>
 80013a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013a4:	e000      	b.n	80013a8 <ETH_SetMACConfig+0x60>
 80013a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80013a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	7f1b      	ldrb	r3, [r3, #28]
 80013ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013c6:	2a00      	cmp	r2, #0
 80013c8:	d102      	bne.n	80013d0 <ETH_SetMACConfig+0x88>
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	e000      	b.n	80013d2 <ETH_SetMACConfig+0x8a>
 80013d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	7bdb      	ldrb	r3, [r3, #15]
 80013d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ea:	4313      	orrs	r3, r2
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fe1a 	bl	800103c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68fa      	ldr	r2, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001426:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800142e:	2a00      	cmp	r2, #0
 8001430:	d101      	bne.n	8001436 <ETH_SetMACConfig+0xee>
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	e000      	b.n	8001438 <ETH_SetMACConfig+0xf0>
 8001436:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001438:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800143e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001446:	2a01      	cmp	r2, #1
 8001448:	d101      	bne.n	800144e <ETH_SetMACConfig+0x106>
 800144a:	2208      	movs	r2, #8
 800144c:	e000      	b.n	8001450 <ETH_SetMACConfig+0x108>
 800144e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001450:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001458:	2a01      	cmp	r2, #1
 800145a:	d101      	bne.n	8001460 <ETH_SetMACConfig+0x118>
 800145c:	2204      	movs	r2, #4
 800145e:	e000      	b.n	8001462 <ETH_SetMACConfig+0x11a>
 8001460:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800146a:	2a01      	cmp	r2, #1
 800146c:	d101      	bne.n	8001472 <ETH_SetMACConfig+0x12a>
 800146e:	2202      	movs	r2, #2
 8001470:	e000      	b.n	8001474 <ETH_SetMACConfig+0x12c>
 8001472:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001474:	4313      	orrs	r3, r2
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4313      	orrs	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff fdd5 	bl	800103c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	619a      	str	r2, [r3, #24]
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	ff20810f 	.word	0xff20810f

080014a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <ETH_SetDMAConfig+0x110>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	7b1b      	ldrb	r3, [r3, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <ETH_SetDMAConfig+0x2c>
 80014ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d2:	e000      	b.n	80014d6 <ETH_SetDMAConfig+0x2e>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7b5b      	ldrb	r3, [r3, #13]
 80014da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	7f52      	ldrb	r2, [r2, #29]
 80014e2:	2a00      	cmp	r2, #0
 80014e4:	d102      	bne.n	80014ec <ETH_SetDMAConfig+0x44>
 80014e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014ea:	e000      	b.n	80014ee <ETH_SetDMAConfig+0x46>
 80014ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	7b9b      	ldrb	r3, [r3, #14]
 80014f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	7f1b      	ldrb	r3, [r3, #28]
 8001502:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7f9b      	ldrb	r3, [r3, #30]
 800150a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800150c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001512:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800151a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	4313      	orrs	r3, r2
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800152c:	461a      	mov	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fd7c 	bl	800103c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	791b      	ldrb	r3, [r3, #4]
 8001556:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800155c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001562:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001568:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001570:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001572:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800157a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001580:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800158a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff fd4d 	bl	800103c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	f8de3f23 	.word	0xf8de3f23

080015bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0a6      	sub	sp, #152	; 0x98
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015ca:	2301      	movs	r3, #1
 80015cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015da:	2301      	movs	r3, #1
 80015dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015f8:	2300      	movs	r3, #0
 80015fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001602:	2300      	movs	r3, #0
 8001604:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800161e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001628:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001634:	4619      	mov	r1, r3
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fe86 	bl	8001348 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001640:	2301      	movs	r3, #1
 8001642:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001644:	2301      	movs	r3, #1
 8001646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800165e:	2300      	movs	r3, #0
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001668:	2301      	movs	r3, #1
 800166a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800166c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001670:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001676:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001678:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001688:	2300      	movs	r3, #0
 800168a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff08 	bl	80014a8 <ETH_SetDMAConfig>
}
 8001698:	bf00      	nop
 800169a:	3798      	adds	r7, #152	; 0x98
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3305      	adds	r3, #5
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	3204      	adds	r2, #4
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <ETH_MACAddressConfig+0x68>)
 80016c2:	4413      	add	r3, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3303      	adds	r3, #3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	061a      	lsls	r2, r3, #24
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3302      	adds	r3, #2
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	041b      	lsls	r3, r3, #16
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3301      	adds	r3, #1
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	4313      	orrs	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <ETH_MACAddressConfig+0x6c>)
 80016f2:	4413      	add	r3, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40028040 	.word	0x40028040
 800170c:	40028044 	.word	0x40028044

08001710 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	e03e      	b.n	800179c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68d9      	ldr	r1, [r3, #12]
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	4613      	mov	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	440b      	add	r3, r1
 800172e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	3206      	adds	r2, #6
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d80c      	bhi.n	8001780 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	e004      	b.n	800178a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	461a      	mov	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3301      	adds	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d9bd      	bls.n	800171e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b085      	sub	sp, #20
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	e046      	b.n	800185e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800180c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001814:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	3212      	adds	r2, #18
 800182a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d80c      	bhi.n	800184e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6919      	ldr	r1, [r3, #16]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	4613      	mov	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	461a      	mov	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	e004      	b.n	8001858 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	461a      	mov	r2, r3
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	3301      	adds	r3, #1
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d9b5      	bls.n	80017d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691a      	ldr	r2, [r3, #16]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188e:	60da      	str	r2, [r3, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	e175      	b.n	8001ba8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80018bc:	2201      	movs	r2, #1
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	f040 8164 	bne.w	8001ba2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_GPIO_Init+0x56>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d130      	bne.n	8001954 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	4013      	ands	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4313      	orrs	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 0201 	and.w	r2, r3, #1
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b03      	cmp	r3, #3
 800195e:	d017      	beq.n	8001990 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	2203      	movs	r2, #3
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d123      	bne.n	80019e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	08da      	lsrs	r2, r3, #3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3208      	adds	r2, #8
 80019a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	691a      	ldr	r2, [r3, #16]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0203 	and.w	r2, r3, #3
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	f000 80be 	beq.w	8001ba2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	4a65      	ldr	r2, [pc, #404]	; (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	; 0x44
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_GPIO_Init+0x324>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001a3e:	4a61      	ldr	r2, [pc, #388]	; (8001bc4 <HAL_GPIO_Init+0x328>)
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	220f      	movs	r2, #15
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a58      	ldr	r2, [pc, #352]	; (8001bc8 <HAL_GPIO_Init+0x32c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d037      	beq.n	8001ada <HAL_GPIO_Init+0x23e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_GPIO_Init+0x330>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d031      	beq.n	8001ad6 <HAL_GPIO_Init+0x23a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x334>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d02b      	beq.n	8001ad2 <HAL_GPIO_Init+0x236>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a55      	ldr	r2, [pc, #340]	; (8001bd4 <HAL_GPIO_Init+0x338>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x232>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_GPIO_Init+0x33c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x22e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a53      	ldr	r2, [pc, #332]	; (8001bdc <HAL_GPIO_Init+0x340>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x22a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a52      	ldr	r2, [pc, #328]	; (8001be0 <HAL_GPIO_Init+0x344>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x226>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_GPIO_Init+0x348>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x222>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a50      	ldr	r2, [pc, #320]	; (8001be8 <HAL_GPIO_Init+0x34c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x21e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4f      	ldr	r2, [pc, #316]	; (8001bec <HAL_GPIO_Init+0x350>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x21a>
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	e012      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ab6:	230a      	movs	r3, #10
 8001ab8:	e010      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001aba:	2308      	movs	r3, #8
 8001abc:	e00e      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001abe:	2307      	movs	r3, #7
 8001ac0:	e00c      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00a      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ac6:	2305      	movs	r3, #5
 8001ac8:	e008      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e004      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e002      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_GPIO_Init+0x240>
 8001ada:	2300      	movs	r3, #0
 8001adc:	69fa      	ldr	r2, [r7, #28]
 8001ade:	f002 0203 	and.w	r2, r2, #3
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	4093      	lsls	r3, r2
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001aec:	4935      	ldr	r1, [pc, #212]	; (8001bc4 <HAL_GPIO_Init+0x328>)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	089b      	lsrs	r3, r3, #2
 8001af2:	3302      	adds	r3, #2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4013      	ands	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b24:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b48:	4a29      	ldr	r2, [pc, #164]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <HAL_GPIO_Init+0x354>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	2b0f      	cmp	r3, #15
 8001bac:	f67f ae86 	bls.w	80018bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	bf00      	nop
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40013800 	.word	0x40013800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40021400 	.word	0x40021400
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40021c00 	.word	0x40021c00
 8001be8:	40022000 	.word	0x40022000
 8001bec:	40022400 	.word	0x40022400
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	807b      	strh	r3, [r7, #2]
 8001c00:	4613      	mov	r3, r2
 8001c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c04:	787b      	ldrb	r3, [r7, #1]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001c10:	e003      	b.n	8001c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001c12:	887b      	ldrh	r3, [r7, #2]
 8001c14:	041a      	lsls	r2, r3, #16
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c28:	b08f      	sub	sp, #60	; 0x3c
 8001c2a:	af0a      	add	r7, sp, #40	; 0x28
 8001c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e116      	b.n	8001e66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff f880 	bl	8000d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 f99e 	bl	8003fb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	687e      	ldr	r6, [r7, #4]
 8001c84:	466d      	mov	r5, sp
 8001c86:	f106 0410 	add.w	r4, r6, #16
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c9a:	1d33      	adds	r3, r6, #4
 8001c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f002 f932 	bl	8003f08 <USB_CoreInit>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0d7      	b.n	8001e66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 f98c 	bl	8003fda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e04a      	b.n	8001d5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	333d      	adds	r3, #61	; 0x3d
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	333c      	adds	r3, #60	; 0x3c
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	4602      	mov	r2, r0
 8001d06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3340      	adds	r3, #64	; 0x40
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	334c      	adds	r3, #76	; 0x4c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3354      	adds	r3, #84	; 0x54
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3af      	bcc.n	8001cc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e044      	b.n	8001df8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3301      	adds	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3b5      	bcc.n	8001d6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	687e      	ldr	r6, [r7, #4]
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f106 0410 	add.w	r4, r6, #16
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e20:	1d33      	adds	r3, r6, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f002 f925 	bl	8004074 <USB_DevInit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e014      	b.n	8001e66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f80b 	bl	8001e70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 fae3 	bl	800442a <USB_DevDisconnect>

  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001e70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	10000003 	.word	0x10000003

08001eb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e291      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b96      	ldr	r3, [pc, #600]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f08:	4b93      	ldr	r3, [pc, #588]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f14:	4b90      	ldr	r3, [pc, #576]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b8d      	ldr	r3, [pc, #564]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x130>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e26b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7a>
 8001f44:	4b84      	ldr	r3, [pc, #528]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a83      	ldr	r2, [pc, #524]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x9c>
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b73      	ldr	r3, [pc, #460]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a72      	ldr	r2, [pc, #456]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff f834 	bl	8001024 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff f830 	bl	8001024 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e21f      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b61      	ldr	r3, [pc, #388]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f820 	bl	8001024 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff f81c 	bl	8001024 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e20b      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x110>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d069      	beq.n	80020ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b50      	ldr	r3, [pc, #320]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b4d      	ldr	r3, [pc, #308]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1df      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b41      	ldr	r3, [pc, #260]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	493d      	ldr	r1, [pc, #244]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e040      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a38      	ldr	r2, [pc, #224]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe ffd2 	bl	8001024 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7fe ffce 	bl	8001024 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1bd      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4929      	ldr	r1, [pc, #164]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e018      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe ffae 	bl	8001024 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7fe ffaa 	bl	8001024 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e199      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d038      	beq.n	8002168 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002102:	4a15      	ldr	r2, [pc, #84]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe ff8b 	bl	8001024 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe ff87 	bl	8001024 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e176      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x23a>
 8002130:	e01a      	b.n	8002168 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_RCC_OscConfig+0x280>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe ff71 	bl	8001024 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002146:	f7fe ff6d 	bl	8001024 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d903      	bls.n	800215c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e15c      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
 8002158:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b91      	ldr	r3, [pc, #580]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a4 	beq.w	80022be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	4a87      	ldr	r2, [pc, #540]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	; 0x40
 800218e:	4b85      	ldr	r3, [pc, #532]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021aa:	4b7f      	ldr	r3, [pc, #508]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ff35 	bl	8001024 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe ff31 	bl	8001024 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	; 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e120      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x31a>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e8:	4a6e      	ldr	r2, [pc, #440]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	; 0x70
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x33c>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fe:	4a69      	ldr	r2, [pc, #420]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	; 0x70
 8002206:	4b67      	ldr	r3, [pc, #412]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	4a66      	ldr	r2, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x35e>
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	; 0x70
 8002228:	4b5e      	ldr	r3, [pc, #376]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222c:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	; 0x70
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002236:	4b5b      	ldr	r3, [pc, #364]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a5a      	ldr	r2, [pc, #360]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	4b58      	ldr	r3, [pc, #352]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	4a57      	ldr	r2, [pc, #348]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe fee5 	bl	8001024 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fee1 	bl	8001024 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0ce      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x386>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fecf 	bl	8001024 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fecb 	bl	8001024 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0b8      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80a4 	beq.w	8002410 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d06b      	beq.n	80023ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d149      	bne.n	8002370 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fe9c 	bl	8001024 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fe98 	bl	8001024 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e087      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	4313      	orrs	r3, r2
 8002334:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800233a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fe6c 	bl	8001024 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe fe68 	bl	8001024 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e057      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x478>
 800236e:	e04f      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0b      	ldr	r2, [pc, #44]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fe52 	bl	8001024 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe4e 	bl	8001024 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e03d      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002396:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x4ac>
 80023a2:	e035      	b.n	8002410 <HAL_RCC_OscConfig+0x538>
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x544>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d028      	beq.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d121      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11a      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	3b01      	subs	r3, #1
 80023f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d101      	bne.n	8002438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0d0      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002438:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d910      	bls.n	8002468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 020f 	bic.w	r2, r3, #15
 800244e:	4965      	ldr	r1, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d040      	beq.n	8002544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d115      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d107      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e073      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002502:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 0203 	bic.w	r2, r3, #3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4936      	ldr	r1, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	4313      	orrs	r3, r2
 8002512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fd86 	bl	8001024 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	e00a      	b.n	8002532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7fe fd82 	bl	8001024 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e053      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 020c 	and.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d1eb      	bne.n	800251c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002544:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d210      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	4922      	ldr	r1, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1c8>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1cc>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1d0>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fce2 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08004e50 	.word	0x08004e50
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	; 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	; 0x38
 8002658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
 8002702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002708:	f7fd fdda 	bl	80002c0 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fd fd80 	bl	80002c0 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	; 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	08004e60 	.word	0x08004e60

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	08004e60 	.word	0x08004e60

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d012      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002894:	4b69      	ldr	r3, [pc, #420]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a68      	ldr	r2, [pc, #416]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a8:	4964      	ldr	r1, [pc, #400]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d017      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d4:	4959      	ldr	r1, [pc, #356]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e4:	d101      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028e6:	2301      	movs	r3, #1
 80028e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028f2:	2301      	movs	r3, #1
 80028f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d017      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002902:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002908:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	494a      	ldr	r1, [pc, #296]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002922:	2301      	movs	r3, #1
 8002924:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 808b 	beq.w	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b3a      	ldr	r3, [pc, #232]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	4a39      	ldr	r2, [pc, #228]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295a:	6413      	str	r3, [r2, #64]	; 0x40
 800295c:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002968:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a34      	ldr	r2, [pc, #208]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fb56 	bl	8001024 <HAL_GetTick>
 8002978:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800297a:	e008      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fb52 	bl	8001024 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e357      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800298e:	4b2c      	ldr	r3, [pc, #176]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299a:	4b28      	ldr	r3, [pc, #160]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d035      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d02e      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b8:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c2:	4b1e      	ldr	r3, [pc, #120]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a1d      	ldr	r2, [pc, #116]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a1a      	ldr	r2, [pc, #104]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029da:	4a18      	ldr	r2, [pc, #96]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029e0:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d114      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fb1a 	bl	8001024 <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f2:	e00a      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f4:	f7fe fb16 	bl	8001024 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e319      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0ee      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a22:	d111      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a32:	400b      	ands	r3, r1
 8002a34:	4901      	ldr	r1, [pc, #4]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	0ffffcff 	.word	0x0ffffcff
 8002a48:	4baa      	ldr	r3, [pc, #680]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4aa9      	ldr	r2, [pc, #676]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a52:	6093      	str	r3, [r2, #8]
 8002a54:	4ba7      	ldr	r3, [pc, #668]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a60:	49a4      	ldr	r1, [pc, #656]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a72:	4ba0      	ldr	r3, [pc, #640]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a78:	4a9e      	ldr	r2, [pc, #632]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a82:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	4999      	ldr	r1, [pc, #612]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa0:	4b94      	ldr	r3, [pc, #592]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aae:	4991      	ldr	r1, [pc, #580]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac2:	4b8c      	ldr	r3, [pc, #560]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ad0:	4988      	ldr	r1, [pc, #544]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae4:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002af2:	4980      	ldr	r1, [pc, #512]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b06:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4977      	ldr	r1, [pc, #476]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b28:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	496f      	ldr	r1, [pc, #444]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f023 020c 	bic.w	r2, r3, #12
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	4966      	ldr	r1, [pc, #408]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b6c:	4b61      	ldr	r3, [pc, #388]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	495e      	ldr	r1, [pc, #376]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b8e:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9c:	4955      	ldr	r1, [pc, #340]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bd2:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4944      	ldr	r1, [pc, #272]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	493c      	ldr	r1, [pc, #240]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	4933      	ldr	r1, [pc, #204]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c38:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c46:	492b      	ldr	r1, [pc, #172]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c68:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca8:	4912      	ldr	r1, [pc, #72]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbc:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	4909      	ldr	r1, [pc, #36]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d006      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80d9 	beq.w	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a01      	ldr	r2, [pc, #4]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	e001      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfa:	f7fe f993 	bl	8001024 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d00:	e008      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d02:	f7fe f98f 	bl	8001024 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	; 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e194      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d14:	4b6c      	ldr	r3, [pc, #432]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1f0      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d021      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11d      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d34:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d42:	4b61      	ldr	r3, [pc, #388]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	019a      	lsls	r2, r3, #6
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	061b      	lsls	r3, r3, #24
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	071b      	lsls	r3, r3, #28
 8002d68:	4957      	ldr	r1, [pc, #348]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d84:	d00a      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9a:	d129      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d9c:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da2:	0c1b      	lsrs	r3, r3, #16
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db0:	0f1b      	lsrs	r3, r3, #28
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	019a      	lsls	r2, r3, #6
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	071b      	lsls	r3, r3, #28
 8002dd0:	493d      	ldr	r1, [pc, #244]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dde:	f023 021f 	bic.w	r2, r3, #31
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d01d      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e02:	0e1b      	lsrs	r3, r3, #24
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e0a:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e10:	0f1b      	lsrs	r3, r3, #28
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	019a      	lsls	r2, r3, #6
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	071b      	lsls	r3, r3, #28
 8002e30:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	019a      	lsls	r2, r3, #6
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	071b      	lsls	r3, r3, #28
 8002e60:	4919      	ldr	r1, [pc, #100]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a16      	ldr	r2, [pc, #88]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e74:	f7fe f8d6 	bl	8001024 <HAL_GetTick>
 8002e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e7c:	f7fe f8d2 	bl	8001024 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b64      	cmp	r3, #100	; 0x64
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d7      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f040 80cd 	bne.w	800303c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a08      	ldr	r2, [pc, #32]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eae:	f7fe f8b9 	bl	8001024 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eb6:	f7fe f8b5 	bl	8001024 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	; 0x64
 8002ec2:	d903      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e0ba      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002ec8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ecc:	4b5e      	ldr	r3, [pc, #376]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ed8:	d0ed      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d02e      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d12a      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f02:	4b51      	ldr	r3, [pc, #324]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	0c1b      	lsrs	r3, r3, #16
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f10:	4b4d      	ldr	r3, [pc, #308]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	0f1b      	lsrs	r3, r3, #28
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	019a      	lsls	r2, r3, #6
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	041b      	lsls	r3, r3, #16
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	4944      	ldr	r1, [pc, #272]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f3e:	4b42      	ldr	r3, [pc, #264]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	493d      	ldr	r1, [pc, #244]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d022      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6c:	d11d      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002f6e:	4b36      	ldr	r3, [pc, #216]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	0e1b      	lsrs	r3, r3, #24
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	0f1b      	lsrs	r3, r3, #28
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	041b      	lsls	r3, r3, #16
 8002f96:	431a      	orrs	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	061b      	lsls	r3, r3, #24
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	071b      	lsls	r3, r3, #28
 8002fa2:	4929      	ldr	r1, [pc, #164]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d028      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fb6:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fbc:	0e1b      	lsrs	r3, r3, #24
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	0c1b      	lsrs	r3, r3, #16
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	019a      	lsls	r2, r3, #6
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69db      	ldr	r3, [r3, #28]
 8002fe8:	071b      	lsls	r3, r3, #28
 8002fea:	4917      	ldr	r1, [pc, #92]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4911      	ldr	r1, [pc, #68]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800300e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003014:	f7fe f806 	bl	8001024 <HAL_GetTick>
 8003018:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800301a:	e008      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800301c:	f7fe f802 	bl	8001024 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e007      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800303a:	d1ef      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e08f      	b.n	8003180 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fd fdcb 	bl	8000c10 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <HAL_TIM_Encoder_Init+0x13c>)
 800308e:	400b      	ands	r3, r1
 8003090:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	4619      	mov	r1, r3
 800309c:	4610      	mov	r0, r2
 800309e:	f000 f909 	bl	80032b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_TIM_Encoder_Init+0x140>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	021b      	lsls	r3, r3, #8
 80030d6:	4313      	orrs	r3, r2
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_TIM_Encoder_Init+0x144>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4b2a      	ldr	r3, [pc, #168]	; (8003194 <HAL_TIM_Encoder_Init+0x148>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	4313      	orrs	r3, r2
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	011a      	lsls	r2, r3, #4
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	031b      	lsls	r3, r3, #12
 800310c:	4313      	orrs	r3, r2
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003122:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	4313      	orrs	r3, r2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	fffebff8 	.word	0xfffebff8
 800318c:	fffffcfc 	.word	0xfffffcfc
 8003190:	fffff3f3 	.word	0xfffff3f3
 8003194:	ffff0f0f 	.word	0xffff0f0f

08003198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d110      	bne.n	80031ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031ce:	7b7b      	ldrb	r3, [r7, #13]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d001      	beq.n	80031d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e069      	b.n	80032ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2202      	movs	r2, #2
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e8:	e031      	b.n	800324e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d110      	bne.n	8003212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031f0:	7bbb      	ldrb	r3, [r7, #14]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d102      	bne.n	80031fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031f6:	7b3b      	ldrb	r3, [r7, #12]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d001      	beq.n	8003200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e055      	b.n	80032ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003210:	e01d      	b.n	800324e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d108      	bne.n	800322a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800321e:	7b7b      	ldrb	r3, [r7, #13]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003224:	7b3b      	ldrb	r3, [r7, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e03e      	b.n	80032ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_TIM_Encoder_Start+0xc4>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d008      	beq.n	800326c <HAL_TIM_Encoder_Start+0xd4>
 800325a:	e00f      	b.n	800327c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f8c5 	bl	80033f4 <TIM_CCxChannelCmd>
      break;
 800326a:	e016      	b.n	800329a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	2104      	movs	r1, #4
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f8bd 	bl	80033f4 <TIM_CCxChannelCmd>
      break;
 800327a:	e00e      	b.n	800329a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f000 f8b5 	bl	80033f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	2104      	movs	r1, #4
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f8ae 	bl	80033f4 <TIM_CCxChannelCmd>
      break;
 8003298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a40      	ldr	r2, [pc, #256]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d013      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d2:	d00f      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <TIM_Base_SetConfig+0x118>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00b      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3c      	ldr	r2, [pc, #240]	; (80033d0 <TIM_Base_SetConfig+0x11c>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3b      	ldr	r2, [pc, #236]	; (80033d4 <TIM_Base_SetConfig+0x120>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d027      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2c      	ldr	r2, [pc, #176]	; (80033cc <TIM_Base_SetConfig+0x118>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d023      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2b      	ldr	r2, [pc, #172]	; (80033d0 <TIM_Base_SetConfig+0x11c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2a      	ldr	r2, [pc, #168]	; (80033d4 <TIM_Base_SetConfig+0x120>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d01b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d017      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a28      	ldr	r2, [pc, #160]	; (80033dc <TIM_Base_SetConfig+0x128>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d013      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <TIM_Base_SetConfig+0x12c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00f      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a26      	ldr	r2, [pc, #152]	; (80033e4 <TIM_Base_SetConfig+0x130>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00b      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a25      	ldr	r2, [pc, #148]	; (80033e8 <TIM_Base_SetConfig+0x134>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <TIM_Base_SetConfig+0x138>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <TIM_Base_SetConfig+0x13c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d108      	bne.n	8003378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a0a      	ldr	r2, [pc, #40]	; (80033c8 <TIM_Base_SetConfig+0x114>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_Base_SetConfig+0xf8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a0c      	ldr	r2, [pc, #48]	; (80033d8 <TIM_Base_SetConfig+0x124>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d103      	bne.n	80033b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	615a      	str	r2, [r3, #20]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40014400 	.word	0x40014400
 80033e4:	40014800 	.word	0x40014800
 80033e8:	40001800 	.word	0x40001800
 80033ec:	40001c00 	.word	0x40001c00
 80033f0:	40002000 	.word	0x40002000

080033f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	2201      	movs	r2, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1a      	ldr	r2, [r3, #32]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	43db      	mvns	r3, r3
 8003416:	401a      	ands	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	fa01 f303 	lsl.w	r3, r1, r3
 800342c:	431a      	orrs	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	621a      	str	r2, [r3, #32]
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003454:	2302      	movs	r3, #2
 8003456:	e06d      	b.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a30      	ldr	r2, [pc, #192]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d004      	beq.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2f      	ldr	r2, [pc, #188]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d108      	bne.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a20      	ldr	r2, [pc, #128]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d022      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d01d      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d018      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d013      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00e      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d009      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a16      	ldr	r2, [pc, #88]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d004      	beq.n	8003508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10c      	bne.n	8003522 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	4313      	orrs	r3, r2
 8003518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	40010000 	.word	0x40010000
 8003544:	40010400 	.word	0x40010400
 8003548:	40000400 	.word	0x40000400
 800354c:	40000800 	.word	0x40000800
 8003550:	40000c00 	.word	0x40000c00
 8003554:	40014000 	.word	0x40014000
 8003558:	40001800 	.word	0x40001800

0800355c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e040      	b.n	80035f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd fb8a 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	; 0x24
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0201 	bic.w	r2, r2, #1
 8003598:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8b0 	bl	8003700 <UART_SetConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e022      	b.n	80035f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fb08 	bl	8003bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fb8f 	bl	8003d0c <UART_CheckIdleState>
 80035ee:	4603      	mov	r3, r0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360c:	2b20      	cmp	r3, #32
 800360e:	d171      	bne.n	80036f4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_UART_Transmit+0x24>
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e06a      	b.n	80036f6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362e:	f7fd fcf9 	bl	8001024 <HAL_GetTick>
 8003632:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800364c:	d108      	bne.n	8003660 <HAL_UART_Transmit+0x68>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d104      	bne.n	8003660 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	e003      	b.n	8003668 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003664:	2300      	movs	r3, #0
 8003666:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003668:	e02c      	b.n	80036c4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 fb80 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e038      	b.n	80036f6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10b      	bne.n	80036a2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003698:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	3302      	adds	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e007      	b.n	80036b2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1cc      	bne.n	800366a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2140      	movs	r1, #64	; 0x40
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fb4d 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e005      	b.n	80036f6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2220      	movs	r2, #32
 80036ee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	e000      	b.n	80036f6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036f4:	2302      	movs	r3, #2
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	4313      	orrs	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4ba6      	ldr	r3, [pc, #664]	; (80039c4 <UART_SetConfig+0x2c4>)
 800372c:	4013      	ands	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	430b      	orrs	r3, r1
 8003736:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a94      	ldr	r2, [pc, #592]	; (80039c8 <UART_SetConfig+0x2c8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d120      	bne.n	80037be <UART_SetConfig+0xbe>
 800377c:	4b93      	ldr	r3, [pc, #588]	; (80039cc <UART_SetConfig+0x2cc>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b03      	cmp	r3, #3
 8003788:	d816      	bhi.n	80037b8 <UART_SetConfig+0xb8>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0x90>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037ad 	.word	0x080037ad
 8003798:	080037a7 	.word	0x080037a7
 800379c:	080037b3 	.word	0x080037b3
 80037a0:	2301      	movs	r3, #1
 80037a2:	77fb      	strb	r3, [r7, #31]
 80037a4:	e150      	b.n	8003a48 <UART_SetConfig+0x348>
 80037a6:	2302      	movs	r3, #2
 80037a8:	77fb      	strb	r3, [r7, #31]
 80037aa:	e14d      	b.n	8003a48 <UART_SetConfig+0x348>
 80037ac:	2304      	movs	r3, #4
 80037ae:	77fb      	strb	r3, [r7, #31]
 80037b0:	e14a      	b.n	8003a48 <UART_SetConfig+0x348>
 80037b2:	2308      	movs	r3, #8
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e147      	b.n	8003a48 <UART_SetConfig+0x348>
 80037b8:	2310      	movs	r3, #16
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e144      	b.n	8003a48 <UART_SetConfig+0x348>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a83      	ldr	r2, [pc, #524]	; (80039d0 <UART_SetConfig+0x2d0>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d132      	bne.n	800382e <UART_SetConfig+0x12e>
 80037c8:	4b80      	ldr	r3, [pc, #512]	; (80039cc <UART_SetConfig+0x2cc>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	2b0c      	cmp	r3, #12
 80037d4:	d828      	bhi.n	8003828 <UART_SetConfig+0x128>
 80037d6:	a201      	add	r2, pc, #4	; (adr r2, 80037dc <UART_SetConfig+0xdc>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003811 	.word	0x08003811
 80037e0:	08003829 	.word	0x08003829
 80037e4:	08003829 	.word	0x08003829
 80037e8:	08003829 	.word	0x08003829
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	08003829 	.word	0x08003829
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003817 	.word	0x08003817
 8003800:	08003829 	.word	0x08003829
 8003804:	08003829 	.word	0x08003829
 8003808:	08003829 	.word	0x08003829
 800380c:	08003823 	.word	0x08003823
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e118      	b.n	8003a48 <UART_SetConfig+0x348>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e115      	b.n	8003a48 <UART_SetConfig+0x348>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e112      	b.n	8003a48 <UART_SetConfig+0x348>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e10f      	b.n	8003a48 <UART_SetConfig+0x348>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e10c      	b.n	8003a48 <UART_SetConfig+0x348>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a68      	ldr	r2, [pc, #416]	; (80039d4 <UART_SetConfig+0x2d4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d120      	bne.n	800387a <UART_SetConfig+0x17a>
 8003838:	4b64      	ldr	r3, [pc, #400]	; (80039cc <UART_SetConfig+0x2cc>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003842:	2b30      	cmp	r3, #48	; 0x30
 8003844:	d013      	beq.n	800386e <UART_SetConfig+0x16e>
 8003846:	2b30      	cmp	r3, #48	; 0x30
 8003848:	d814      	bhi.n	8003874 <UART_SetConfig+0x174>
 800384a:	2b20      	cmp	r3, #32
 800384c:	d009      	beq.n	8003862 <UART_SetConfig+0x162>
 800384e:	2b20      	cmp	r3, #32
 8003850:	d810      	bhi.n	8003874 <UART_SetConfig+0x174>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <UART_SetConfig+0x15c>
 8003856:	2b10      	cmp	r3, #16
 8003858:	d006      	beq.n	8003868 <UART_SetConfig+0x168>
 800385a:	e00b      	b.n	8003874 <UART_SetConfig+0x174>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0f2      	b.n	8003a48 <UART_SetConfig+0x348>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e0ef      	b.n	8003a48 <UART_SetConfig+0x348>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0ec      	b.n	8003a48 <UART_SetConfig+0x348>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e0e9      	b.n	8003a48 <UART_SetConfig+0x348>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0e6      	b.n	8003a48 <UART_SetConfig+0x348>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <UART_SetConfig+0x2d8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d120      	bne.n	80038c6 <UART_SetConfig+0x1c6>
 8003884:	4b51      	ldr	r3, [pc, #324]	; (80039cc <UART_SetConfig+0x2cc>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800388e:	2bc0      	cmp	r3, #192	; 0xc0
 8003890:	d013      	beq.n	80038ba <UART_SetConfig+0x1ba>
 8003892:	2bc0      	cmp	r3, #192	; 0xc0
 8003894:	d814      	bhi.n	80038c0 <UART_SetConfig+0x1c0>
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d009      	beq.n	80038ae <UART_SetConfig+0x1ae>
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d810      	bhi.n	80038c0 <UART_SetConfig+0x1c0>
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <UART_SetConfig+0x1a8>
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d006      	beq.n	80038b4 <UART_SetConfig+0x1b4>
 80038a6:	e00b      	b.n	80038c0 <UART_SetConfig+0x1c0>
 80038a8:	2300      	movs	r3, #0
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e0cc      	b.n	8003a48 <UART_SetConfig+0x348>
 80038ae:	2302      	movs	r3, #2
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e0c9      	b.n	8003a48 <UART_SetConfig+0x348>
 80038b4:	2304      	movs	r3, #4
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e0c6      	b.n	8003a48 <UART_SetConfig+0x348>
 80038ba:	2308      	movs	r3, #8
 80038bc:	77fb      	strb	r3, [r7, #31]
 80038be:	e0c3      	b.n	8003a48 <UART_SetConfig+0x348>
 80038c0:	2310      	movs	r3, #16
 80038c2:	77fb      	strb	r3, [r7, #31]
 80038c4:	e0c0      	b.n	8003a48 <UART_SetConfig+0x348>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a44      	ldr	r2, [pc, #272]	; (80039dc <UART_SetConfig+0x2dc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d125      	bne.n	800391c <UART_SetConfig+0x21c>
 80038d0:	4b3e      	ldr	r3, [pc, #248]	; (80039cc <UART_SetConfig+0x2cc>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038de:	d017      	beq.n	8003910 <UART_SetConfig+0x210>
 80038e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038e4:	d817      	bhi.n	8003916 <UART_SetConfig+0x216>
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ea:	d00b      	beq.n	8003904 <UART_SetConfig+0x204>
 80038ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038f0:	d811      	bhi.n	8003916 <UART_SetConfig+0x216>
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <UART_SetConfig+0x1fe>
 80038f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fa:	d006      	beq.n	800390a <UART_SetConfig+0x20a>
 80038fc:	e00b      	b.n	8003916 <UART_SetConfig+0x216>
 80038fe:	2300      	movs	r3, #0
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e0a1      	b.n	8003a48 <UART_SetConfig+0x348>
 8003904:	2302      	movs	r3, #2
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e09e      	b.n	8003a48 <UART_SetConfig+0x348>
 800390a:	2304      	movs	r3, #4
 800390c:	77fb      	strb	r3, [r7, #31]
 800390e:	e09b      	b.n	8003a48 <UART_SetConfig+0x348>
 8003910:	2308      	movs	r3, #8
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e098      	b.n	8003a48 <UART_SetConfig+0x348>
 8003916:	2310      	movs	r3, #16
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e095      	b.n	8003a48 <UART_SetConfig+0x348>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <UART_SetConfig+0x2e0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d125      	bne.n	8003972 <UART_SetConfig+0x272>
 8003926:	4b29      	ldr	r3, [pc, #164]	; (80039cc <UART_SetConfig+0x2cc>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003930:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003934:	d017      	beq.n	8003966 <UART_SetConfig+0x266>
 8003936:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800393a:	d817      	bhi.n	800396c <UART_SetConfig+0x26c>
 800393c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003940:	d00b      	beq.n	800395a <UART_SetConfig+0x25a>
 8003942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003946:	d811      	bhi.n	800396c <UART_SetConfig+0x26c>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <UART_SetConfig+0x254>
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d006      	beq.n	8003960 <UART_SetConfig+0x260>
 8003952:	e00b      	b.n	800396c <UART_SetConfig+0x26c>
 8003954:	2301      	movs	r3, #1
 8003956:	77fb      	strb	r3, [r7, #31]
 8003958:	e076      	b.n	8003a48 <UART_SetConfig+0x348>
 800395a:	2302      	movs	r3, #2
 800395c:	77fb      	strb	r3, [r7, #31]
 800395e:	e073      	b.n	8003a48 <UART_SetConfig+0x348>
 8003960:	2304      	movs	r3, #4
 8003962:	77fb      	strb	r3, [r7, #31]
 8003964:	e070      	b.n	8003a48 <UART_SetConfig+0x348>
 8003966:	2308      	movs	r3, #8
 8003968:	77fb      	strb	r3, [r7, #31]
 800396a:	e06d      	b.n	8003a48 <UART_SetConfig+0x348>
 800396c:	2310      	movs	r3, #16
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e06a      	b.n	8003a48 <UART_SetConfig+0x348>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1b      	ldr	r2, [pc, #108]	; (80039e4 <UART_SetConfig+0x2e4>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d138      	bne.n	80039ee <UART_SetConfig+0x2ee>
 800397c:	4b13      	ldr	r3, [pc, #76]	; (80039cc <UART_SetConfig+0x2cc>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800398a:	d017      	beq.n	80039bc <UART_SetConfig+0x2bc>
 800398c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003990:	d82a      	bhi.n	80039e8 <UART_SetConfig+0x2e8>
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	d00b      	beq.n	80039b0 <UART_SetConfig+0x2b0>
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d824      	bhi.n	80039e8 <UART_SetConfig+0x2e8>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <UART_SetConfig+0x2aa>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d006      	beq.n	80039b6 <UART_SetConfig+0x2b6>
 80039a8:	e01e      	b.n	80039e8 <UART_SetConfig+0x2e8>
 80039aa:	2300      	movs	r3, #0
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e04b      	b.n	8003a48 <UART_SetConfig+0x348>
 80039b0:	2302      	movs	r3, #2
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e048      	b.n	8003a48 <UART_SetConfig+0x348>
 80039b6:	2304      	movs	r3, #4
 80039b8:	77fb      	strb	r3, [r7, #31]
 80039ba:	e045      	b.n	8003a48 <UART_SetConfig+0x348>
 80039bc:	2308      	movs	r3, #8
 80039be:	77fb      	strb	r3, [r7, #31]
 80039c0:	e042      	b.n	8003a48 <UART_SetConfig+0x348>
 80039c2:	bf00      	nop
 80039c4:	efff69f3 	.word	0xefff69f3
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40023800 	.word	0x40023800
 80039d0:	40004400 	.word	0x40004400
 80039d4:	40004800 	.word	0x40004800
 80039d8:	40004c00 	.word	0x40004c00
 80039dc:	40005000 	.word	0x40005000
 80039e0:	40011400 	.word	0x40011400
 80039e4:	40007800 	.word	0x40007800
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e02c      	b.n	8003a48 <UART_SetConfig+0x348>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a72      	ldr	r2, [pc, #456]	; (8003bbc <UART_SetConfig+0x4bc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d125      	bne.n	8003a44 <UART_SetConfig+0x344>
 80039f8:	4b71      	ldr	r3, [pc, #452]	; (8003bc0 <UART_SetConfig+0x4c0>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a02:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a06:	d017      	beq.n	8003a38 <UART_SetConfig+0x338>
 8003a08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a0c:	d817      	bhi.n	8003a3e <UART_SetConfig+0x33e>
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d00b      	beq.n	8003a2c <UART_SetConfig+0x32c>
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a18:	d811      	bhi.n	8003a3e <UART_SetConfig+0x33e>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <UART_SetConfig+0x326>
 8003a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a22:	d006      	beq.n	8003a32 <UART_SetConfig+0x332>
 8003a24:	e00b      	b.n	8003a3e <UART_SetConfig+0x33e>
 8003a26:	2300      	movs	r3, #0
 8003a28:	77fb      	strb	r3, [r7, #31]
 8003a2a:	e00d      	b.n	8003a48 <UART_SetConfig+0x348>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e00a      	b.n	8003a48 <UART_SetConfig+0x348>
 8003a32:	2304      	movs	r3, #4
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e007      	b.n	8003a48 <UART_SetConfig+0x348>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e004      	b.n	8003a48 <UART_SetConfig+0x348>
 8003a3e:	2310      	movs	r3, #16
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e001      	b.n	8003a48 <UART_SetConfig+0x348>
 8003a44:	2310      	movs	r3, #16
 8003a46:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a50:	d15b      	bne.n	8003b0a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003a52:	7ffb      	ldrb	r3, [r7, #31]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d828      	bhi.n	8003aaa <UART_SetConfig+0x3aa>
 8003a58:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <UART_SetConfig+0x360>)
 8003a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5e:	bf00      	nop
 8003a60:	08003a85 	.word	0x08003a85
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003a95 	.word	0x08003a95
 8003a6c:	08003aab 	.word	0x08003aab
 8003a70:	08003a9b 	.word	0x08003a9b
 8003a74:	08003aab 	.word	0x08003aab
 8003a78:	08003aab 	.word	0x08003aab
 8003a7c:	08003aab 	.word	0x08003aab
 8003a80:	08003aa3 	.word	0x08003aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a84:	f7fe feca 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003a88:	61b8      	str	r0, [r7, #24]
        break;
 8003a8a:	e013      	b.n	8003ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a8c:	f7fe feda 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8003a90:	61b8      	str	r0, [r7, #24]
        break;
 8003a92:	e00f      	b.n	8003ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a94:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <UART_SetConfig+0x4c4>)
 8003a96:	61bb      	str	r3, [r7, #24]
        break;
 8003a98:	e00c      	b.n	8003ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9a:	f7fe fdad 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003a9e:	61b8      	str	r0, [r7, #24]
        break;
 8003aa0:	e008      	b.n	8003ab4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aa6:	61bb      	str	r3, [r7, #24]
        break;
 8003aa8:	e004      	b.n	8003ab4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	77bb      	strb	r3, [r7, #30]
        break;
 8003ab2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d074      	beq.n	8003ba4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	005a      	lsls	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085b      	lsrs	r3, r3, #1
 8003ac4:	441a      	add	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b0f      	cmp	r3, #15
 8003ad4:	d916      	bls.n	8003b04 <UART_SetConfig+0x404>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d212      	bcs.n	8003b04 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	89fb      	ldrh	r3, [r7, #14]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	89fa      	ldrh	r2, [r7, #14]
 8003b00:	60da      	str	r2, [r3, #12]
 8003b02:	e04f      	b.n	8003ba4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77bb      	strb	r3, [r7, #30]
 8003b08:	e04c      	b.n	8003ba4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b0a:	7ffb      	ldrb	r3, [r7, #31]
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d828      	bhi.n	8003b62 <UART_SetConfig+0x462>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x418>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b45 	.word	0x08003b45
 8003b20:	08003b4d 	.word	0x08003b4d
 8003b24:	08003b63 	.word	0x08003b63
 8003b28:	08003b53 	.word	0x08003b53
 8003b2c:	08003b63 	.word	0x08003b63
 8003b30:	08003b63 	.word	0x08003b63
 8003b34:	08003b63 	.word	0x08003b63
 8003b38:	08003b5b 	.word	0x08003b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7fe fe6e 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003b40:	61b8      	str	r0, [r7, #24]
        break;
 8003b42:	e013      	b.n	8003b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b44:	f7fe fe7e 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8003b48:	61b8      	str	r0, [r7, #24]
        break;
 8003b4a:	e00f      	b.n	8003b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <UART_SetConfig+0x4c4>)
 8003b4e:	61bb      	str	r3, [r7, #24]
        break;
 8003b50:	e00c      	b.n	8003b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b52:	f7fe fd51 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003b56:	61b8      	str	r0, [r7, #24]
        break;
 8003b58:	e008      	b.n	8003b6c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e004      	b.n	8003b6c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	77bb      	strb	r3, [r7, #30]
        break;
 8003b6a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085a      	lsrs	r2, r3, #1
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	441a      	add	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d909      	bls.n	8003ba0 <UART_SetConfig+0x4a0>
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b92:	d205      	bcs.n	8003ba0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	e001      	b.n	8003ba4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003bb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40007c00 	.word	0x40007c00
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	00f42400 	.word	0x00f42400

08003bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	f003 0320 	and.w	r3, r3, #32
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01a      	beq.n	8003cde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d10a      	bne.n	8003cde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d1c:	f7fd f982 	bl	8001024 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10e      	bne.n	8003d4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f81b 	bl	8003d7a <UART_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e011      	b.n	8003d72 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b09c      	sub	sp, #112	; 0x70
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	603b      	str	r3, [r7, #0]
 8003d86:	4613      	mov	r3, r2
 8003d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	e0a7      	b.n	8003edc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d92:	f000 80a3 	beq.w	8003edc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d96:	f7fd f945 	bl	8001024 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d302      	bcc.n	8003dac <UART_WaitOnFlagUntilTimeout+0x32>
 8003da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d13f      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003dd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e6      	bne.n	8003dac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de8:	e853 3f00 	ldrex	r3, [r3]
 8003dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	663b      	str	r3, [r7, #96]	; 0x60
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dfe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e5      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e068      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d050      	beq.n	8003edc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e48:	d148      	bne.n	8003edc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	e853 3f00 	ldrex	r3, [r3]
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
 8003e74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1e6      	bne.n	8003e54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3308      	adds	r3, #8
 8003e8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	e853 3f00 	ldrex	r3, [r3]
 8003e94:	613b      	str	r3, [r7, #16]
   return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f023 0301 	bic.w	r3, r3, #1
 8003e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ea6:	623a      	str	r2, [r7, #32]
 8003ea8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eaa:	69f9      	ldr	r1, [r7, #28]
 8003eac:	6a3a      	ldr	r2, [r7, #32]
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e010      	b.n	8003efe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69da      	ldr	r2, [r3, #28]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	f43f af48 	beq.w	8003d8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3770      	adds	r7, #112	; 0x70
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f08:	b084      	sub	sp, #16
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	f107 001c 	add.w	r0, r7, #28
 8003f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d120      	bne.n	8003f62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <USB_CoreInit+0xac>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d105      	bne.n	8003f56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa96 	bl	8004488 <USB_CoreReset>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e010      	b.n	8003f84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa8a 	bl	8004488 <USB_CoreReset>
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10b      	bne.n	8003fa2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f043 0206 	orr.w	r2, r3, #6
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fae:	b004      	add	sp, #16
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	ffbdffbf 	.word	0xffbdffbf

08003fb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f023 0201 	bic.w	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d115      	bne.n	8004028 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004008:	2001      	movs	r0, #1
 800400a:	f7fd f817 	bl	800103c <HAL_Delay>
      ms++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3301      	adds	r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fa29 	bl	800446c <USB_GetMode>
 800401a:	4603      	mov	r3, r0
 800401c:	2b01      	cmp	r3, #1
 800401e:	d01e      	beq.n	800405e <USB_SetCurrentMode+0x84>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b31      	cmp	r3, #49	; 0x31
 8004024:	d9f0      	bls.n	8004008 <USB_SetCurrentMode+0x2e>
 8004026:	e01a      	b.n	800405e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d115      	bne.n	800405a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800403a:	2001      	movs	r0, #1
 800403c:	f7fc fffe 	bl	800103c <HAL_Delay>
      ms++;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa10 	bl	800446c <USB_GetMode>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <USB_SetCurrentMode+0x84>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b31      	cmp	r3, #49	; 0x31
 8004056:	d9f0      	bls.n	800403a <USB_SetCurrentMode+0x60>
 8004058:	e001      	b.n	800405e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e005      	b.n	800406a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b32      	cmp	r3, #50	; 0x32
 8004062:	d101      	bne.n	8004068 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004074:	b084      	sub	sp, #16
 8004076:	b580      	push	{r7, lr}
 8004078:	b086      	sub	sp, #24
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004082:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	e009      	b.n	80040a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3340      	adds	r3, #64	; 0x40
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	3301      	adds	r3, #1
 80040a6:	613b      	str	r3, [r7, #16]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	2b0e      	cmp	r3, #14
 80040ac:	d9f2      	bls.n	8004094 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d11c      	bne.n	80040ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c2:	f043 0302 	orr.w	r3, r3, #2
 80040c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e005      	b.n	80040fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410c:	4619      	mov	r1, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004114:	461a      	mov	r2, r3
 8004116:	680b      	ldr	r3, [r1, #0]
 8004118:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10c      	bne.n	800413a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d104      	bne.n	8004130 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004126:	2100      	movs	r1, #0
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f965 	bl	80043f8 <USB_SetDevSpeed>
 800412e:	e008      	b.n	8004142 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004130:	2101      	movs	r1, #1
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f960 	bl	80043f8 <USB_SetDevSpeed>
 8004138:	e003      	b.n	8004142 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800413a:	2103      	movs	r1, #3
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f95b 	bl	80043f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004142:	2110      	movs	r1, #16
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f8f3 	bl	8004330 <USB_FlushTxFifo>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f91f 	bl	8004398 <USB_FlushRxFifo>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416a:	461a      	mov	r2, r3
 800416c:	2300      	movs	r3, #0
 800416e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004176:	461a      	mov	r2, r3
 8004178:	2300      	movs	r3, #0
 800417a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	461a      	mov	r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	e043      	b.n	8004216 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a4:	d118      	bne.n	80041d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	461a      	mov	r2, r3
 80041ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e013      	b.n	80041ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ce:	461a      	mov	r2, r3
 80041d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e008      	b.n	80041ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	2300      	movs	r3, #0
 80041e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	461a      	mov	r2, r3
 80041f8:	2300      	movs	r3, #0
 80041fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	461a      	mov	r2, r3
 800420a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800420e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3301      	adds	r3, #1
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	429a      	cmp	r2, r3
 800421c:	d3b7      	bcc.n	800418e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e043      	b.n	80042ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423a:	d118      	bne.n	800426e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	015a      	lsls	r2, r3, #5
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	4413      	add	r3, r2
 800424a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424e:	461a      	mov	r2, r3
 8004250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e013      	b.n	8004280 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800426a:	6013      	str	r3, [r2, #0]
 800426c:	e008      	b.n	8004280 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427a:	461a      	mov	r2, r3
 800427c:	2300      	movs	r3, #0
 800427e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	2300      	movs	r3, #0
 8004290:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3301      	adds	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d3b7      	bcc.n	8004224 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <USB_DevInit+0x2b4>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f043 0208 	orr.w	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d105      	bne.n	8004318 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <USB_DevInit+0x2b8>)
 8004312:	4313      	orrs	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004324:	b004      	add	sp, #16
 8004326:	4770      	bx	lr
 8004328:	803c3800 	.word	0x803c3800
 800432c:	40000004 	.word	0x40000004

08004330 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a13      	ldr	r2, [pc, #76]	; (8004394 <USB_FlushTxFifo+0x64>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e01b      	b.n	8004388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	2b00      	cmp	r3, #0
 8004356:	daf2      	bge.n	800433e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	019b      	lsls	r3, r3, #6
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4a08      	ldr	r2, [pc, #32]	; (8004394 <USB_FlushTxFifo+0x64>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e006      	b.n	8004388 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b20      	cmp	r3, #32
 8004384:	d0f0      	beq.n	8004368 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3714      	adds	r7, #20
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	00030d40 	.word	0x00030d40

08004398 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3301      	adds	r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <USB_FlushRxFifo+0x5c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e018      	b.n	80043e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	daf2      	bge.n	80043a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2210      	movs	r2, #16
 80043c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3301      	adds	r3, #1
 80043cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <USB_FlushRxFifo+0x5c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e006      	b.n	80043e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d0f0      	beq.n	80043c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3714      	adds	r7, #20
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	00030d40 	.word	0x00030d40

080043f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	68f9      	ldr	r1, [r7, #12]
 8004414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004444:	f023 0303 	bic.w	r3, r3, #3
 8004448:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0301 	and.w	r3, r3, #1
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	3301      	adds	r3, #1
 8004498:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	4a13      	ldr	r2, [pc, #76]	; (80044ec <USB_CoreReset+0x64>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e01b      	b.n	80044de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	daf2      	bge.n	8004494 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <USB_CoreReset+0x64>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d901      	bls.n	80044d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e006      	b.n	80044de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d0f0      	beq.n	80044be <USB_CoreReset+0x36>

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	00030d40 	.word	0x00030d40

080044f0 <__errno>:
 80044f0:	4b01      	ldr	r3, [pc, #4]	; (80044f8 <__errno+0x8>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	4d0d      	ldr	r5, [pc, #52]	; (8004534 <__libc_init_array+0x38>)
 8004500:	4c0d      	ldr	r4, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004502:	1b64      	subs	r4, r4, r5
 8004504:	10a4      	asrs	r4, r4, #2
 8004506:	2600      	movs	r6, #0
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	4d0b      	ldr	r5, [pc, #44]	; (800453c <__libc_init_array+0x40>)
 800450e:	4c0c      	ldr	r4, [pc, #48]	; (8004540 <__libc_init_array+0x44>)
 8004510:	f000 fc8e 	bl	8004e30 <_init>
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	2600      	movs	r6, #0
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	f855 3b04 	ldr.w	r3, [r5], #4
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	f855 3b04 	ldr.w	r3, [r5], #4
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	08004ea4 	.word	0x08004ea4
 8004538:	08004ea4 	.word	0x08004ea4
 800453c:	08004ea4 	.word	0x08004ea4
 8004540:	08004ea8 	.word	0x08004ea8

08004544 <memset>:
 8004544:	4402      	add	r2, r0
 8004546:	4603      	mov	r3, r0
 8004548:	4293      	cmp	r3, r2
 800454a:	d100      	bne.n	800454e <memset+0xa>
 800454c:	4770      	bx	lr
 800454e:	f803 1b01 	strb.w	r1, [r3], #1
 8004552:	e7f9      	b.n	8004548 <memset+0x4>

08004554 <siprintf>:
 8004554:	b40e      	push	{r1, r2, r3}
 8004556:	b500      	push	{lr}
 8004558:	b09c      	sub	sp, #112	; 0x70
 800455a:	ab1d      	add	r3, sp, #116	; 0x74
 800455c:	9002      	str	r0, [sp, #8]
 800455e:	9006      	str	r0, [sp, #24]
 8004560:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <siprintf+0x38>)
 8004566:	9107      	str	r1, [sp, #28]
 8004568:	9104      	str	r1, [sp, #16]
 800456a:	4909      	ldr	r1, [pc, #36]	; (8004590 <siprintf+0x3c>)
 800456c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004570:	9105      	str	r1, [sp, #20]
 8004572:	6800      	ldr	r0, [r0, #0]
 8004574:	9301      	str	r3, [sp, #4]
 8004576:	a902      	add	r1, sp, #8
 8004578:	f000 f868 	bl	800464c <_svfiprintf_r>
 800457c:	9b02      	ldr	r3, [sp, #8]
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	b01c      	add	sp, #112	; 0x70
 8004584:	f85d eb04 	ldr.w	lr, [sp], #4
 8004588:	b003      	add	sp, #12
 800458a:	4770      	bx	lr
 800458c:	2000000c 	.word	0x2000000c
 8004590:	ffff0208 	.word	0xffff0208

08004594 <__ssputs_r>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	688e      	ldr	r6, [r1, #8]
 800459a:	429e      	cmp	r6, r3
 800459c:	4682      	mov	sl, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	4690      	mov	r8, r2
 80045a2:	461f      	mov	r7, r3
 80045a4:	d838      	bhi.n	8004618 <__ssputs_r+0x84>
 80045a6:	898a      	ldrh	r2, [r1, #12]
 80045a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045ac:	d032      	beq.n	8004614 <__ssputs_r+0x80>
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	6909      	ldr	r1, [r1, #16]
 80045b2:	eba5 0901 	sub.w	r9, r5, r1
 80045b6:	6965      	ldr	r5, [r4, #20]
 80045b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045c0:	3301      	adds	r3, #1
 80045c2:	444b      	add	r3, r9
 80045c4:	106d      	asrs	r5, r5, #1
 80045c6:	429d      	cmp	r5, r3
 80045c8:	bf38      	it	cc
 80045ca:	461d      	movcc	r5, r3
 80045cc:	0553      	lsls	r3, r2, #21
 80045ce:	d531      	bpl.n	8004634 <__ssputs_r+0xa0>
 80045d0:	4629      	mov	r1, r5
 80045d2:	f000 fb63 	bl	8004c9c <_malloc_r>
 80045d6:	4606      	mov	r6, r0
 80045d8:	b950      	cbnz	r0, 80045f0 <__ssputs_r+0x5c>
 80045da:	230c      	movs	r3, #12
 80045dc:	f8ca 3000 	str.w	r3, [sl]
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f0:	6921      	ldr	r1, [r4, #16]
 80045f2:	464a      	mov	r2, r9
 80045f4:	f000 fabe 	bl	8004b74 <memcpy>
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004602:	81a3      	strh	r3, [r4, #12]
 8004604:	6126      	str	r6, [r4, #16]
 8004606:	6165      	str	r5, [r4, #20]
 8004608:	444e      	add	r6, r9
 800460a:	eba5 0509 	sub.w	r5, r5, r9
 800460e:	6026      	str	r6, [r4, #0]
 8004610:	60a5      	str	r5, [r4, #8]
 8004612:	463e      	mov	r6, r7
 8004614:	42be      	cmp	r6, r7
 8004616:	d900      	bls.n	800461a <__ssputs_r+0x86>
 8004618:	463e      	mov	r6, r7
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	4632      	mov	r2, r6
 800461e:	4641      	mov	r1, r8
 8004620:	f000 fab6 	bl	8004b90 <memmove>
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	1b9b      	subs	r3, r3, r6
 8004628:	60a3      	str	r3, [r4, #8]
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	4433      	add	r3, r6
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	2000      	movs	r0, #0
 8004632:	e7db      	b.n	80045ec <__ssputs_r+0x58>
 8004634:	462a      	mov	r2, r5
 8004636:	f000 fba5 	bl	8004d84 <_realloc_r>
 800463a:	4606      	mov	r6, r0
 800463c:	2800      	cmp	r0, #0
 800463e:	d1e1      	bne.n	8004604 <__ssputs_r+0x70>
 8004640:	6921      	ldr	r1, [r4, #16]
 8004642:	4650      	mov	r0, sl
 8004644:	f000 fabe 	bl	8004bc4 <_free_r>
 8004648:	e7c7      	b.n	80045da <__ssputs_r+0x46>
	...

0800464c <_svfiprintf_r>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	4698      	mov	r8, r3
 8004652:	898b      	ldrh	r3, [r1, #12]
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	b09d      	sub	sp, #116	; 0x74
 8004658:	4607      	mov	r7, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4614      	mov	r4, r2
 800465e:	d50e      	bpl.n	800467e <_svfiprintf_r+0x32>
 8004660:	690b      	ldr	r3, [r1, #16]
 8004662:	b963      	cbnz	r3, 800467e <_svfiprintf_r+0x32>
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	f000 fb19 	bl	8004c9c <_malloc_r>
 800466a:	6028      	str	r0, [r5, #0]
 800466c:	6128      	str	r0, [r5, #16]
 800466e:	b920      	cbnz	r0, 800467a <_svfiprintf_r+0x2e>
 8004670:	230c      	movs	r3, #12
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004678:	e0d1      	b.n	800481e <_svfiprintf_r+0x1d2>
 800467a:	2340      	movs	r3, #64	; 0x40
 800467c:	616b      	str	r3, [r5, #20]
 800467e:	2300      	movs	r3, #0
 8004680:	9309      	str	r3, [sp, #36]	; 0x24
 8004682:	2320      	movs	r3, #32
 8004684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004688:	f8cd 800c 	str.w	r8, [sp, #12]
 800468c:	2330      	movs	r3, #48	; 0x30
 800468e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004838 <_svfiprintf_r+0x1ec>
 8004692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004696:	f04f 0901 	mov.w	r9, #1
 800469a:	4623      	mov	r3, r4
 800469c:	469a      	mov	sl, r3
 800469e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046a2:	b10a      	cbz	r2, 80046a8 <_svfiprintf_r+0x5c>
 80046a4:	2a25      	cmp	r2, #37	; 0x25
 80046a6:	d1f9      	bne.n	800469c <_svfiprintf_r+0x50>
 80046a8:	ebba 0b04 	subs.w	fp, sl, r4
 80046ac:	d00b      	beq.n	80046c6 <_svfiprintf_r+0x7a>
 80046ae:	465b      	mov	r3, fp
 80046b0:	4622      	mov	r2, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	4638      	mov	r0, r7
 80046b6:	f7ff ff6d 	bl	8004594 <__ssputs_r>
 80046ba:	3001      	adds	r0, #1
 80046bc:	f000 80aa 	beq.w	8004814 <_svfiprintf_r+0x1c8>
 80046c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046c2:	445a      	add	r2, fp
 80046c4:	9209      	str	r2, [sp, #36]	; 0x24
 80046c6:	f89a 3000 	ldrb.w	r3, [sl]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80a2 	beq.w	8004814 <_svfiprintf_r+0x1c8>
 80046d0:	2300      	movs	r3, #0
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046da:	f10a 0a01 	add.w	sl, sl, #1
 80046de:	9304      	str	r3, [sp, #16]
 80046e0:	9307      	str	r3, [sp, #28]
 80046e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046e6:	931a      	str	r3, [sp, #104]	; 0x68
 80046e8:	4654      	mov	r4, sl
 80046ea:	2205      	movs	r2, #5
 80046ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f0:	4851      	ldr	r0, [pc, #324]	; (8004838 <_svfiprintf_r+0x1ec>)
 80046f2:	f7fb fd95 	bl	8000220 <memchr>
 80046f6:	9a04      	ldr	r2, [sp, #16]
 80046f8:	b9d8      	cbnz	r0, 8004732 <_svfiprintf_r+0xe6>
 80046fa:	06d0      	lsls	r0, r2, #27
 80046fc:	bf44      	itt	mi
 80046fe:	2320      	movmi	r3, #32
 8004700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004704:	0711      	lsls	r1, r2, #28
 8004706:	bf44      	itt	mi
 8004708:	232b      	movmi	r3, #43	; 0x2b
 800470a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800470e:	f89a 3000 	ldrb.w	r3, [sl]
 8004712:	2b2a      	cmp	r3, #42	; 0x2a
 8004714:	d015      	beq.n	8004742 <_svfiprintf_r+0xf6>
 8004716:	9a07      	ldr	r2, [sp, #28]
 8004718:	4654      	mov	r4, sl
 800471a:	2000      	movs	r0, #0
 800471c:	f04f 0c0a 	mov.w	ip, #10
 8004720:	4621      	mov	r1, r4
 8004722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004726:	3b30      	subs	r3, #48	; 0x30
 8004728:	2b09      	cmp	r3, #9
 800472a:	d94e      	bls.n	80047ca <_svfiprintf_r+0x17e>
 800472c:	b1b0      	cbz	r0, 800475c <_svfiprintf_r+0x110>
 800472e:	9207      	str	r2, [sp, #28]
 8004730:	e014      	b.n	800475c <_svfiprintf_r+0x110>
 8004732:	eba0 0308 	sub.w	r3, r0, r8
 8004736:	fa09 f303 	lsl.w	r3, r9, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	46a2      	mov	sl, r4
 8004740:	e7d2      	b.n	80046e8 <_svfiprintf_r+0x9c>
 8004742:	9b03      	ldr	r3, [sp, #12]
 8004744:	1d19      	adds	r1, r3, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	9103      	str	r1, [sp, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	bfbb      	ittet	lt
 800474e:	425b      	neglt	r3, r3
 8004750:	f042 0202 	orrlt.w	r2, r2, #2
 8004754:	9307      	strge	r3, [sp, #28]
 8004756:	9307      	strlt	r3, [sp, #28]
 8004758:	bfb8      	it	lt
 800475a:	9204      	strlt	r2, [sp, #16]
 800475c:	7823      	ldrb	r3, [r4, #0]
 800475e:	2b2e      	cmp	r3, #46	; 0x2e
 8004760:	d10c      	bne.n	800477c <_svfiprintf_r+0x130>
 8004762:	7863      	ldrb	r3, [r4, #1]
 8004764:	2b2a      	cmp	r3, #42	; 0x2a
 8004766:	d135      	bne.n	80047d4 <_svfiprintf_r+0x188>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	1d1a      	adds	r2, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	9203      	str	r2, [sp, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	bfb8      	it	lt
 8004774:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004778:	3402      	adds	r4, #2
 800477a:	9305      	str	r3, [sp, #20]
 800477c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004848 <_svfiprintf_r+0x1fc>
 8004780:	7821      	ldrb	r1, [r4, #0]
 8004782:	2203      	movs	r2, #3
 8004784:	4650      	mov	r0, sl
 8004786:	f7fb fd4b 	bl	8000220 <memchr>
 800478a:	b140      	cbz	r0, 800479e <_svfiprintf_r+0x152>
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	eba0 000a 	sub.w	r0, r0, sl
 8004792:	fa03 f000 	lsl.w	r0, r3, r0
 8004796:	9b04      	ldr	r3, [sp, #16]
 8004798:	4303      	orrs	r3, r0
 800479a:	3401      	adds	r4, #1
 800479c:	9304      	str	r3, [sp, #16]
 800479e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047a2:	4826      	ldr	r0, [pc, #152]	; (800483c <_svfiprintf_r+0x1f0>)
 80047a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047a8:	2206      	movs	r2, #6
 80047aa:	f7fb fd39 	bl	8000220 <memchr>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d038      	beq.n	8004824 <_svfiprintf_r+0x1d8>
 80047b2:	4b23      	ldr	r3, [pc, #140]	; (8004840 <_svfiprintf_r+0x1f4>)
 80047b4:	bb1b      	cbnz	r3, 80047fe <_svfiprintf_r+0x1b2>
 80047b6:	9b03      	ldr	r3, [sp, #12]
 80047b8:	3307      	adds	r3, #7
 80047ba:	f023 0307 	bic.w	r3, r3, #7
 80047be:	3308      	adds	r3, #8
 80047c0:	9303      	str	r3, [sp, #12]
 80047c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c4:	4433      	add	r3, r6
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
 80047c8:	e767      	b.n	800469a <_svfiprintf_r+0x4e>
 80047ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80047ce:	460c      	mov	r4, r1
 80047d0:	2001      	movs	r0, #1
 80047d2:	e7a5      	b.n	8004720 <_svfiprintf_r+0xd4>
 80047d4:	2300      	movs	r3, #0
 80047d6:	3401      	adds	r4, #1
 80047d8:	9305      	str	r3, [sp, #20]
 80047da:	4619      	mov	r1, r3
 80047dc:	f04f 0c0a 	mov.w	ip, #10
 80047e0:	4620      	mov	r0, r4
 80047e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047e6:	3a30      	subs	r2, #48	; 0x30
 80047e8:	2a09      	cmp	r2, #9
 80047ea:	d903      	bls.n	80047f4 <_svfiprintf_r+0x1a8>
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0c5      	beq.n	800477c <_svfiprintf_r+0x130>
 80047f0:	9105      	str	r1, [sp, #20]
 80047f2:	e7c3      	b.n	800477c <_svfiprintf_r+0x130>
 80047f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047f8:	4604      	mov	r4, r0
 80047fa:	2301      	movs	r3, #1
 80047fc:	e7f0      	b.n	80047e0 <_svfiprintf_r+0x194>
 80047fe:	ab03      	add	r3, sp, #12
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	462a      	mov	r2, r5
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <_svfiprintf_r+0x1f8>)
 8004806:	a904      	add	r1, sp, #16
 8004808:	4638      	mov	r0, r7
 800480a:	f3af 8000 	nop.w
 800480e:	1c42      	adds	r2, r0, #1
 8004810:	4606      	mov	r6, r0
 8004812:	d1d6      	bne.n	80047c2 <_svfiprintf_r+0x176>
 8004814:	89ab      	ldrh	r3, [r5, #12]
 8004816:	065b      	lsls	r3, r3, #25
 8004818:	f53f af2c 	bmi.w	8004674 <_svfiprintf_r+0x28>
 800481c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800481e:	b01d      	add	sp, #116	; 0x74
 8004820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	462a      	mov	r2, r5
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <_svfiprintf_r+0x1f8>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4638      	mov	r0, r7
 8004830:	f000 f87a 	bl	8004928 <_printf_i>
 8004834:	e7eb      	b.n	800480e <_svfiprintf_r+0x1c2>
 8004836:	bf00      	nop
 8004838:	08004e68 	.word	0x08004e68
 800483c:	08004e72 	.word	0x08004e72
 8004840:	00000000 	.word	0x00000000
 8004844:	08004595 	.word	0x08004595
 8004848:	08004e6e 	.word	0x08004e6e

0800484c <_printf_common>:
 800484c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004850:	4616      	mov	r6, r2
 8004852:	4699      	mov	r9, r3
 8004854:	688a      	ldr	r2, [r1, #8]
 8004856:	690b      	ldr	r3, [r1, #16]
 8004858:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800485c:	4293      	cmp	r3, r2
 800485e:	bfb8      	it	lt
 8004860:	4613      	movlt	r3, r2
 8004862:	6033      	str	r3, [r6, #0]
 8004864:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004868:	4607      	mov	r7, r0
 800486a:	460c      	mov	r4, r1
 800486c:	b10a      	cbz	r2, 8004872 <_printf_common+0x26>
 800486e:	3301      	adds	r3, #1
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	0699      	lsls	r1, r3, #26
 8004876:	bf42      	ittt	mi
 8004878:	6833      	ldrmi	r3, [r6, #0]
 800487a:	3302      	addmi	r3, #2
 800487c:	6033      	strmi	r3, [r6, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	f015 0506 	ands.w	r5, r5, #6
 8004884:	d106      	bne.n	8004894 <_printf_common+0x48>
 8004886:	f104 0a19 	add.w	sl, r4, #25
 800488a:	68e3      	ldr	r3, [r4, #12]
 800488c:	6832      	ldr	r2, [r6, #0]
 800488e:	1a9b      	subs	r3, r3, r2
 8004890:	42ab      	cmp	r3, r5
 8004892:	dc26      	bgt.n	80048e2 <_printf_common+0x96>
 8004894:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004898:	1e13      	subs	r3, r2, #0
 800489a:	6822      	ldr	r2, [r4, #0]
 800489c:	bf18      	it	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	0692      	lsls	r2, r2, #26
 80048a2:	d42b      	bmi.n	80048fc <_printf_common+0xb0>
 80048a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a8:	4649      	mov	r1, r9
 80048aa:	4638      	mov	r0, r7
 80048ac:	47c0      	blx	r8
 80048ae:	3001      	adds	r0, #1
 80048b0:	d01e      	beq.n	80048f0 <_printf_common+0xa4>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	68e5      	ldr	r5, [r4, #12]
 80048b6:	6832      	ldr	r2, [r6, #0]
 80048b8:	f003 0306 	and.w	r3, r3, #6
 80048bc:	2b04      	cmp	r3, #4
 80048be:	bf08      	it	eq
 80048c0:	1aad      	subeq	r5, r5, r2
 80048c2:	68a3      	ldr	r3, [r4, #8]
 80048c4:	6922      	ldr	r2, [r4, #16]
 80048c6:	bf0c      	ite	eq
 80048c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048cc:	2500      	movne	r5, #0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	bfc4      	itt	gt
 80048d2:	1a9b      	subgt	r3, r3, r2
 80048d4:	18ed      	addgt	r5, r5, r3
 80048d6:	2600      	movs	r6, #0
 80048d8:	341a      	adds	r4, #26
 80048da:	42b5      	cmp	r5, r6
 80048dc:	d11a      	bne.n	8004914 <_printf_common+0xc8>
 80048de:	2000      	movs	r0, #0
 80048e0:	e008      	b.n	80048f4 <_printf_common+0xa8>
 80048e2:	2301      	movs	r3, #1
 80048e4:	4652      	mov	r2, sl
 80048e6:	4649      	mov	r1, r9
 80048e8:	4638      	mov	r0, r7
 80048ea:	47c0      	blx	r8
 80048ec:	3001      	adds	r0, #1
 80048ee:	d103      	bne.n	80048f8 <_printf_common+0xac>
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f8:	3501      	adds	r5, #1
 80048fa:	e7c6      	b.n	800488a <_printf_common+0x3e>
 80048fc:	18e1      	adds	r1, r4, r3
 80048fe:	1c5a      	adds	r2, r3, #1
 8004900:	2030      	movs	r0, #48	; 0x30
 8004902:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004906:	4422      	add	r2, r4
 8004908:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800490c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004910:	3302      	adds	r3, #2
 8004912:	e7c7      	b.n	80048a4 <_printf_common+0x58>
 8004914:	2301      	movs	r3, #1
 8004916:	4622      	mov	r2, r4
 8004918:	4649      	mov	r1, r9
 800491a:	4638      	mov	r0, r7
 800491c:	47c0      	blx	r8
 800491e:	3001      	adds	r0, #1
 8004920:	d0e6      	beq.n	80048f0 <_printf_common+0xa4>
 8004922:	3601      	adds	r6, #1
 8004924:	e7d9      	b.n	80048da <_printf_common+0x8e>
	...

08004928 <_printf_i>:
 8004928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800492c:	7e0f      	ldrb	r7, [r1, #24]
 800492e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004930:	2f78      	cmp	r7, #120	; 0x78
 8004932:	4691      	mov	r9, r2
 8004934:	4680      	mov	r8, r0
 8004936:	460c      	mov	r4, r1
 8004938:	469a      	mov	sl, r3
 800493a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800493e:	d807      	bhi.n	8004950 <_printf_i+0x28>
 8004940:	2f62      	cmp	r7, #98	; 0x62
 8004942:	d80a      	bhi.n	800495a <_printf_i+0x32>
 8004944:	2f00      	cmp	r7, #0
 8004946:	f000 80d8 	beq.w	8004afa <_printf_i+0x1d2>
 800494a:	2f58      	cmp	r7, #88	; 0x58
 800494c:	f000 80a3 	beq.w	8004a96 <_printf_i+0x16e>
 8004950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004954:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004958:	e03a      	b.n	80049d0 <_printf_i+0xa8>
 800495a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495e:	2b15      	cmp	r3, #21
 8004960:	d8f6      	bhi.n	8004950 <_printf_i+0x28>
 8004962:	a101      	add	r1, pc, #4	; (adr r1, 8004968 <_printf_i+0x40>)
 8004964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004968:	080049c1 	.word	0x080049c1
 800496c:	080049d5 	.word	0x080049d5
 8004970:	08004951 	.word	0x08004951
 8004974:	08004951 	.word	0x08004951
 8004978:	08004951 	.word	0x08004951
 800497c:	08004951 	.word	0x08004951
 8004980:	080049d5 	.word	0x080049d5
 8004984:	08004951 	.word	0x08004951
 8004988:	08004951 	.word	0x08004951
 800498c:	08004951 	.word	0x08004951
 8004990:	08004951 	.word	0x08004951
 8004994:	08004ae1 	.word	0x08004ae1
 8004998:	08004a05 	.word	0x08004a05
 800499c:	08004ac3 	.word	0x08004ac3
 80049a0:	08004951 	.word	0x08004951
 80049a4:	08004951 	.word	0x08004951
 80049a8:	08004b03 	.word	0x08004b03
 80049ac:	08004951 	.word	0x08004951
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004951 	.word	0x08004951
 80049b8:	08004951 	.word	0x08004951
 80049bc:	08004acb 	.word	0x08004acb
 80049c0:	682b      	ldr	r3, [r5, #0]
 80049c2:	1d1a      	adds	r2, r3, #4
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	602a      	str	r2, [r5, #0]
 80049c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0a3      	b.n	8004b1c <_printf_i+0x1f4>
 80049d4:	6820      	ldr	r0, [r4, #0]
 80049d6:	6829      	ldr	r1, [r5, #0]
 80049d8:	0606      	lsls	r6, r0, #24
 80049da:	f101 0304 	add.w	r3, r1, #4
 80049de:	d50a      	bpl.n	80049f6 <_printf_i+0xce>
 80049e0:	680e      	ldr	r6, [r1, #0]
 80049e2:	602b      	str	r3, [r5, #0]
 80049e4:	2e00      	cmp	r6, #0
 80049e6:	da03      	bge.n	80049f0 <_printf_i+0xc8>
 80049e8:	232d      	movs	r3, #45	; 0x2d
 80049ea:	4276      	negs	r6, r6
 80049ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f0:	485e      	ldr	r0, [pc, #376]	; (8004b6c <_printf_i+0x244>)
 80049f2:	230a      	movs	r3, #10
 80049f4:	e019      	b.n	8004a2a <_printf_i+0x102>
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	602b      	str	r3, [r5, #0]
 80049fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049fe:	bf18      	it	ne
 8004a00:	b236      	sxthne	r6, r6
 8004a02:	e7ef      	b.n	80049e4 <_printf_i+0xbc>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	1d19      	adds	r1, r3, #4
 8004a0a:	6029      	str	r1, [r5, #0]
 8004a0c:	0601      	lsls	r1, r0, #24
 8004a0e:	d501      	bpl.n	8004a14 <_printf_i+0xec>
 8004a10:	681e      	ldr	r6, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <_printf_i+0xf2>
 8004a14:	0646      	lsls	r6, r0, #25
 8004a16:	d5fb      	bpl.n	8004a10 <_printf_i+0xe8>
 8004a18:	881e      	ldrh	r6, [r3, #0]
 8004a1a:	4854      	ldr	r0, [pc, #336]	; (8004b6c <_printf_i+0x244>)
 8004a1c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a1e:	bf0c      	ite	eq
 8004a20:	2308      	moveq	r3, #8
 8004a22:	230a      	movne	r3, #10
 8004a24:	2100      	movs	r1, #0
 8004a26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a2a:	6865      	ldr	r5, [r4, #4]
 8004a2c:	60a5      	str	r5, [r4, #8]
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	bfa2      	ittt	ge
 8004a32:	6821      	ldrge	r1, [r4, #0]
 8004a34:	f021 0104 	bicge.w	r1, r1, #4
 8004a38:	6021      	strge	r1, [r4, #0]
 8004a3a:	b90e      	cbnz	r6, 8004a40 <_printf_i+0x118>
 8004a3c:	2d00      	cmp	r5, #0
 8004a3e:	d04d      	beq.n	8004adc <_printf_i+0x1b4>
 8004a40:	4615      	mov	r5, r2
 8004a42:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a46:	fb03 6711 	mls	r7, r3, r1, r6
 8004a4a:	5dc7      	ldrb	r7, [r0, r7]
 8004a4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a50:	4637      	mov	r7, r6
 8004a52:	42bb      	cmp	r3, r7
 8004a54:	460e      	mov	r6, r1
 8004a56:	d9f4      	bls.n	8004a42 <_printf_i+0x11a>
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d10b      	bne.n	8004a74 <_printf_i+0x14c>
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	07de      	lsls	r6, r3, #31
 8004a60:	d508      	bpl.n	8004a74 <_printf_i+0x14c>
 8004a62:	6923      	ldr	r3, [r4, #16]
 8004a64:	6861      	ldr	r1, [r4, #4]
 8004a66:	4299      	cmp	r1, r3
 8004a68:	bfde      	ittt	le
 8004a6a:	2330      	movle	r3, #48	; 0x30
 8004a6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a70:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a74:	1b52      	subs	r2, r2, r5
 8004a76:	6122      	str	r2, [r4, #16]
 8004a78:	f8cd a000 	str.w	sl, [sp]
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	aa03      	add	r2, sp, #12
 8004a80:	4621      	mov	r1, r4
 8004a82:	4640      	mov	r0, r8
 8004a84:	f7ff fee2 	bl	800484c <_printf_common>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d14c      	bne.n	8004b26 <_printf_i+0x1fe>
 8004a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a90:	b004      	add	sp, #16
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	4835      	ldr	r0, [pc, #212]	; (8004b6c <_printf_i+0x244>)
 8004a98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a9c:	6829      	ldr	r1, [r5, #0]
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa4:	6029      	str	r1, [r5, #0]
 8004aa6:	061d      	lsls	r5, r3, #24
 8004aa8:	d514      	bpl.n	8004ad4 <_printf_i+0x1ac>
 8004aaa:	07df      	lsls	r7, r3, #31
 8004aac:	bf44      	itt	mi
 8004aae:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab2:	6023      	strmi	r3, [r4, #0]
 8004ab4:	b91e      	cbnz	r6, 8004abe <_printf_i+0x196>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	f023 0320 	bic.w	r3, r3, #32
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	2310      	movs	r3, #16
 8004ac0:	e7b0      	b.n	8004a24 <_printf_i+0xfc>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f043 0320 	orr.w	r3, r3, #32
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	2378      	movs	r3, #120	; 0x78
 8004acc:	4828      	ldr	r0, [pc, #160]	; (8004b70 <_printf_i+0x248>)
 8004ace:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ad2:	e7e3      	b.n	8004a9c <_printf_i+0x174>
 8004ad4:	0659      	lsls	r1, r3, #25
 8004ad6:	bf48      	it	mi
 8004ad8:	b2b6      	uxthmi	r6, r6
 8004ada:	e7e6      	b.n	8004aaa <_printf_i+0x182>
 8004adc:	4615      	mov	r5, r2
 8004ade:	e7bb      	b.n	8004a58 <_printf_i+0x130>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	6826      	ldr	r6, [r4, #0]
 8004ae4:	6961      	ldr	r1, [r4, #20]
 8004ae6:	1d18      	adds	r0, r3, #4
 8004ae8:	6028      	str	r0, [r5, #0]
 8004aea:	0635      	lsls	r5, r6, #24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	d501      	bpl.n	8004af4 <_printf_i+0x1cc>
 8004af0:	6019      	str	r1, [r3, #0]
 8004af2:	e002      	b.n	8004afa <_printf_i+0x1d2>
 8004af4:	0670      	lsls	r0, r6, #25
 8004af6:	d5fb      	bpl.n	8004af0 <_printf_i+0x1c8>
 8004af8:	8019      	strh	r1, [r3, #0]
 8004afa:	2300      	movs	r3, #0
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	4615      	mov	r5, r2
 8004b00:	e7ba      	b.n	8004a78 <_printf_i+0x150>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	1d1a      	adds	r2, r3, #4
 8004b06:	602a      	str	r2, [r5, #0]
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	6862      	ldr	r2, [r4, #4]
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f7fb fb86 	bl	8000220 <memchr>
 8004b14:	b108      	cbz	r0, 8004b1a <_printf_i+0x1f2>
 8004b16:	1b40      	subs	r0, r0, r5
 8004b18:	6060      	str	r0, [r4, #4]
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b24:	e7a8      	b.n	8004a78 <_printf_i+0x150>
 8004b26:	6923      	ldr	r3, [r4, #16]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	47d0      	blx	sl
 8004b30:	3001      	adds	r0, #1
 8004b32:	d0ab      	beq.n	8004a8c <_printf_i+0x164>
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	079b      	lsls	r3, r3, #30
 8004b38:	d413      	bmi.n	8004b62 <_printf_i+0x23a>
 8004b3a:	68e0      	ldr	r0, [r4, #12]
 8004b3c:	9b03      	ldr	r3, [sp, #12]
 8004b3e:	4298      	cmp	r0, r3
 8004b40:	bfb8      	it	lt
 8004b42:	4618      	movlt	r0, r3
 8004b44:	e7a4      	b.n	8004a90 <_printf_i+0x168>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4632      	mov	r2, r6
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	47d0      	blx	sl
 8004b50:	3001      	adds	r0, #1
 8004b52:	d09b      	beq.n	8004a8c <_printf_i+0x164>
 8004b54:	3501      	adds	r5, #1
 8004b56:	68e3      	ldr	r3, [r4, #12]
 8004b58:	9903      	ldr	r1, [sp, #12]
 8004b5a:	1a5b      	subs	r3, r3, r1
 8004b5c:	42ab      	cmp	r3, r5
 8004b5e:	dcf2      	bgt.n	8004b46 <_printf_i+0x21e>
 8004b60:	e7eb      	b.n	8004b3a <_printf_i+0x212>
 8004b62:	2500      	movs	r5, #0
 8004b64:	f104 0619 	add.w	r6, r4, #25
 8004b68:	e7f5      	b.n	8004b56 <_printf_i+0x22e>
 8004b6a:	bf00      	nop
 8004b6c:	08004e79 	.word	0x08004e79
 8004b70:	08004e8a 	.word	0x08004e8a

08004b74 <memcpy>:
 8004b74:	440a      	add	r2, r1
 8004b76:	4291      	cmp	r1, r2
 8004b78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b7c:	d100      	bne.n	8004b80 <memcpy+0xc>
 8004b7e:	4770      	bx	lr
 8004b80:	b510      	push	{r4, lr}
 8004b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b8a:	4291      	cmp	r1, r2
 8004b8c:	d1f9      	bne.n	8004b82 <memcpy+0xe>
 8004b8e:	bd10      	pop	{r4, pc}

08004b90 <memmove>:
 8004b90:	4288      	cmp	r0, r1
 8004b92:	b510      	push	{r4, lr}
 8004b94:	eb01 0402 	add.w	r4, r1, r2
 8004b98:	d902      	bls.n	8004ba0 <memmove+0x10>
 8004b9a:	4284      	cmp	r4, r0
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	d807      	bhi.n	8004bb0 <memmove+0x20>
 8004ba0:	1e43      	subs	r3, r0, #1
 8004ba2:	42a1      	cmp	r1, r4
 8004ba4:	d008      	beq.n	8004bb8 <memmove+0x28>
 8004ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bae:	e7f8      	b.n	8004ba2 <memmove+0x12>
 8004bb0:	4402      	add	r2, r0
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	428a      	cmp	r2, r1
 8004bb6:	d100      	bne.n	8004bba <memmove+0x2a>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bc2:	e7f7      	b.n	8004bb4 <memmove+0x24>

08004bc4 <_free_r>:
 8004bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bc6:	2900      	cmp	r1, #0
 8004bc8:	d044      	beq.n	8004c54 <_free_r+0x90>
 8004bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bce:	9001      	str	r0, [sp, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8004bd6:	bfb8      	it	lt
 8004bd8:	18e4      	addlt	r4, r4, r3
 8004bda:	f000 f913 	bl	8004e04 <__malloc_lock>
 8004bde:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <_free_r+0x94>)
 8004be0:	9801      	ldr	r0, [sp, #4]
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	b933      	cbnz	r3, 8004bf4 <_free_r+0x30>
 8004be6:	6063      	str	r3, [r4, #4]
 8004be8:	6014      	str	r4, [r2, #0]
 8004bea:	b003      	add	sp, #12
 8004bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bf0:	f000 b90e 	b.w	8004e10 <__malloc_unlock>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d908      	bls.n	8004c0a <_free_r+0x46>
 8004bf8:	6825      	ldr	r5, [r4, #0]
 8004bfa:	1961      	adds	r1, r4, r5
 8004bfc:	428b      	cmp	r3, r1
 8004bfe:	bf01      	itttt	eq
 8004c00:	6819      	ldreq	r1, [r3, #0]
 8004c02:	685b      	ldreq	r3, [r3, #4]
 8004c04:	1949      	addeq	r1, r1, r5
 8004c06:	6021      	streq	r1, [r4, #0]
 8004c08:	e7ed      	b.n	8004be6 <_free_r+0x22>
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	b10b      	cbz	r3, 8004c14 <_free_r+0x50>
 8004c10:	42a3      	cmp	r3, r4
 8004c12:	d9fa      	bls.n	8004c0a <_free_r+0x46>
 8004c14:	6811      	ldr	r1, [r2, #0]
 8004c16:	1855      	adds	r5, r2, r1
 8004c18:	42a5      	cmp	r5, r4
 8004c1a:	d10b      	bne.n	8004c34 <_free_r+0x70>
 8004c1c:	6824      	ldr	r4, [r4, #0]
 8004c1e:	4421      	add	r1, r4
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	42a3      	cmp	r3, r4
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	d1e0      	bne.n	8004bea <_free_r+0x26>
 8004c28:	681c      	ldr	r4, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6053      	str	r3, [r2, #4]
 8004c2e:	4421      	add	r1, r4
 8004c30:	6011      	str	r1, [r2, #0]
 8004c32:	e7da      	b.n	8004bea <_free_r+0x26>
 8004c34:	d902      	bls.n	8004c3c <_free_r+0x78>
 8004c36:	230c      	movs	r3, #12
 8004c38:	6003      	str	r3, [r0, #0]
 8004c3a:	e7d6      	b.n	8004bea <_free_r+0x26>
 8004c3c:	6825      	ldr	r5, [r4, #0]
 8004c3e:	1961      	adds	r1, r4, r5
 8004c40:	428b      	cmp	r3, r1
 8004c42:	bf04      	itt	eq
 8004c44:	6819      	ldreq	r1, [r3, #0]
 8004c46:	685b      	ldreq	r3, [r3, #4]
 8004c48:	6063      	str	r3, [r4, #4]
 8004c4a:	bf04      	itt	eq
 8004c4c:	1949      	addeq	r1, r1, r5
 8004c4e:	6021      	streq	r1, [r4, #0]
 8004c50:	6054      	str	r4, [r2, #4]
 8004c52:	e7ca      	b.n	8004bea <_free_r+0x26>
 8004c54:	b003      	add	sp, #12
 8004c56:	bd30      	pop	{r4, r5, pc}
 8004c58:	200008a0 	.word	0x200008a0

08004c5c <sbrk_aligned>:
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	4e0e      	ldr	r6, [pc, #56]	; (8004c98 <sbrk_aligned+0x3c>)
 8004c60:	460c      	mov	r4, r1
 8004c62:	6831      	ldr	r1, [r6, #0]
 8004c64:	4605      	mov	r5, r0
 8004c66:	b911      	cbnz	r1, 8004c6e <sbrk_aligned+0x12>
 8004c68:	f000 f8bc 	bl	8004de4 <_sbrk_r>
 8004c6c:	6030      	str	r0, [r6, #0]
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4628      	mov	r0, r5
 8004c72:	f000 f8b7 	bl	8004de4 <_sbrk_r>
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d00a      	beq.n	8004c90 <sbrk_aligned+0x34>
 8004c7a:	1cc4      	adds	r4, r0, #3
 8004c7c:	f024 0403 	bic.w	r4, r4, #3
 8004c80:	42a0      	cmp	r0, r4
 8004c82:	d007      	beq.n	8004c94 <sbrk_aligned+0x38>
 8004c84:	1a21      	subs	r1, r4, r0
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f8ac 	bl	8004de4 <_sbrk_r>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d101      	bne.n	8004c94 <sbrk_aligned+0x38>
 8004c90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004c94:	4620      	mov	r0, r4
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	200008a4 	.word	0x200008a4

08004c9c <_malloc_r>:
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	1ccd      	adds	r5, r1, #3
 8004ca2:	f025 0503 	bic.w	r5, r5, #3
 8004ca6:	3508      	adds	r5, #8
 8004ca8:	2d0c      	cmp	r5, #12
 8004caa:	bf38      	it	cc
 8004cac:	250c      	movcc	r5, #12
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	db01      	blt.n	8004cb8 <_malloc_r+0x1c>
 8004cb4:	42a9      	cmp	r1, r5
 8004cb6:	d905      	bls.n	8004cc4 <_malloc_r+0x28>
 8004cb8:	230c      	movs	r3, #12
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	2600      	movs	r6, #0
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cc4:	4e2e      	ldr	r6, [pc, #184]	; (8004d80 <_malloc_r+0xe4>)
 8004cc6:	f000 f89d 	bl	8004e04 <__malloc_lock>
 8004cca:	6833      	ldr	r3, [r6, #0]
 8004ccc:	461c      	mov	r4, r3
 8004cce:	bb34      	cbnz	r4, 8004d1e <_malloc_r+0x82>
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	f7ff ffc2 	bl	8004c5c <sbrk_aligned>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	4604      	mov	r4, r0
 8004cdc:	d14d      	bne.n	8004d7a <_malloc_r+0xde>
 8004cde:	6834      	ldr	r4, [r6, #0]
 8004ce0:	4626      	mov	r6, r4
 8004ce2:	2e00      	cmp	r6, #0
 8004ce4:	d140      	bne.n	8004d68 <_malloc_r+0xcc>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4638      	mov	r0, r7
 8004cec:	eb04 0803 	add.w	r8, r4, r3
 8004cf0:	f000 f878 	bl	8004de4 <_sbrk_r>
 8004cf4:	4580      	cmp	r8, r0
 8004cf6:	d13a      	bne.n	8004d6e <_malloc_r+0xd2>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	3503      	adds	r5, #3
 8004cfc:	1a6d      	subs	r5, r5, r1
 8004cfe:	f025 0503 	bic.w	r5, r5, #3
 8004d02:	3508      	adds	r5, #8
 8004d04:	2d0c      	cmp	r5, #12
 8004d06:	bf38      	it	cc
 8004d08:	250c      	movcc	r5, #12
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f7ff ffa5 	bl	8004c5c <sbrk_aligned>
 8004d12:	3001      	adds	r0, #1
 8004d14:	d02b      	beq.n	8004d6e <_malloc_r+0xd2>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	442b      	add	r3, r5
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	e00e      	b.n	8004d3c <_malloc_r+0xa0>
 8004d1e:	6822      	ldr	r2, [r4, #0]
 8004d20:	1b52      	subs	r2, r2, r5
 8004d22:	d41e      	bmi.n	8004d62 <_malloc_r+0xc6>
 8004d24:	2a0b      	cmp	r2, #11
 8004d26:	d916      	bls.n	8004d56 <_malloc_r+0xba>
 8004d28:	1961      	adds	r1, r4, r5
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	bf18      	it	ne
 8004d30:	6059      	strne	r1, [r3, #4]
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	bf08      	it	eq
 8004d36:	6031      	streq	r1, [r6, #0]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4638      	mov	r0, r7
 8004d3e:	f104 060b 	add.w	r6, r4, #11
 8004d42:	f000 f865 	bl	8004e10 <__malloc_unlock>
 8004d46:	f026 0607 	bic.w	r6, r6, #7
 8004d4a:	1d23      	adds	r3, r4, #4
 8004d4c:	1af2      	subs	r2, r6, r3
 8004d4e:	d0b6      	beq.n	8004cbe <_malloc_r+0x22>
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	50a3      	str	r3, [r4, r2]
 8004d54:	e7b3      	b.n	8004cbe <_malloc_r+0x22>
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	bf0c      	ite	eq
 8004d5c:	6032      	streq	r2, [r6, #0]
 8004d5e:	605a      	strne	r2, [r3, #4]
 8004d60:	e7ec      	b.n	8004d3c <_malloc_r+0xa0>
 8004d62:	4623      	mov	r3, r4
 8004d64:	6864      	ldr	r4, [r4, #4]
 8004d66:	e7b2      	b.n	8004cce <_malloc_r+0x32>
 8004d68:	4634      	mov	r4, r6
 8004d6a:	6876      	ldr	r6, [r6, #4]
 8004d6c:	e7b9      	b.n	8004ce2 <_malloc_r+0x46>
 8004d6e:	230c      	movs	r3, #12
 8004d70:	603b      	str	r3, [r7, #0]
 8004d72:	4638      	mov	r0, r7
 8004d74:	f000 f84c 	bl	8004e10 <__malloc_unlock>
 8004d78:	e7a1      	b.n	8004cbe <_malloc_r+0x22>
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	e7de      	b.n	8004d3c <_malloc_r+0xa0>
 8004d7e:	bf00      	nop
 8004d80:	200008a0 	.word	0x200008a0

08004d84 <_realloc_r>:
 8004d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d88:	4680      	mov	r8, r0
 8004d8a:	4614      	mov	r4, r2
 8004d8c:	460e      	mov	r6, r1
 8004d8e:	b921      	cbnz	r1, 8004d9a <_realloc_r+0x16>
 8004d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d94:	4611      	mov	r1, r2
 8004d96:	f7ff bf81 	b.w	8004c9c <_malloc_r>
 8004d9a:	b92a      	cbnz	r2, 8004da8 <_realloc_r+0x24>
 8004d9c:	f7ff ff12 	bl	8004bc4 <_free_r>
 8004da0:	4625      	mov	r5, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da8:	f000 f838 	bl	8004e1c <_malloc_usable_size_r>
 8004dac:	4284      	cmp	r4, r0
 8004dae:	4607      	mov	r7, r0
 8004db0:	d802      	bhi.n	8004db8 <_realloc_r+0x34>
 8004db2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004db6:	d812      	bhi.n	8004dde <_realloc_r+0x5a>
 8004db8:	4621      	mov	r1, r4
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff ff6e 	bl	8004c9c <_malloc_r>
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	d0ed      	beq.n	8004da2 <_realloc_r+0x1e>
 8004dc6:	42bc      	cmp	r4, r7
 8004dc8:	4622      	mov	r2, r4
 8004dca:	4631      	mov	r1, r6
 8004dcc:	bf28      	it	cs
 8004dce:	463a      	movcs	r2, r7
 8004dd0:	f7ff fed0 	bl	8004b74 <memcpy>
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4640      	mov	r0, r8
 8004dd8:	f7ff fef4 	bl	8004bc4 <_free_r>
 8004ddc:	e7e1      	b.n	8004da2 <_realloc_r+0x1e>
 8004dde:	4635      	mov	r5, r6
 8004de0:	e7df      	b.n	8004da2 <_realloc_r+0x1e>
	...

08004de4 <_sbrk_r>:
 8004de4:	b538      	push	{r3, r4, r5, lr}
 8004de6:	4d06      	ldr	r5, [pc, #24]	; (8004e00 <_sbrk_r+0x1c>)
 8004de8:	2300      	movs	r3, #0
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fc f856 	bl	8000ea0 <_sbrk>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d102      	bne.n	8004dfe <_sbrk_r+0x1a>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	b103      	cbz	r3, 8004dfe <_sbrk_r+0x1a>
 8004dfc:	6023      	str	r3, [r4, #0]
 8004dfe:	bd38      	pop	{r3, r4, r5, pc}
 8004e00:	200008a8 	.word	0x200008a8

08004e04 <__malloc_lock>:
 8004e04:	4801      	ldr	r0, [pc, #4]	; (8004e0c <__malloc_lock+0x8>)
 8004e06:	f000 b811 	b.w	8004e2c <__retarget_lock_acquire_recursive>
 8004e0a:	bf00      	nop
 8004e0c:	200008ac 	.word	0x200008ac

08004e10 <__malloc_unlock>:
 8004e10:	4801      	ldr	r0, [pc, #4]	; (8004e18 <__malloc_unlock+0x8>)
 8004e12:	f000 b80c 	b.w	8004e2e <__retarget_lock_release_recursive>
 8004e16:	bf00      	nop
 8004e18:	200008ac 	.word	0x200008ac

08004e1c <_malloc_usable_size_r>:
 8004e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e20:	1f18      	subs	r0, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	bfbc      	itt	lt
 8004e26:	580b      	ldrlt	r3, [r1, r0]
 8004e28:	18c0      	addlt	r0, r0, r3
 8004e2a:	4770      	bx	lr

08004e2c <__retarget_lock_acquire_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_release_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <_init>:
 8004e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e32:	bf00      	nop
 8004e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e36:	bc08      	pop	{r3}
 8004e38:	469e      	mov	lr, r3
 8004e3a:	4770      	bx	lr

08004e3c <_fini>:
 8004e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3e:	bf00      	nop
 8004e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e42:	bc08      	pop	{r3}
 8004e44:	469e      	mov	lr, r3
 8004e46:	4770      	bx	lr
