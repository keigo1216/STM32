
AER12520.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e38  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008008  08008008  00018008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001dc  08008620  000201dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000027c  080086c0  0002027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000770  2000031c  08008760  0002031c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a8c  08008760  00020a8c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017199  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002855  00000000  00000000  000374e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c8  00000000  00000000  00039d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c0  00000000  00000000  0003b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028ebc  00000000  00000000  0003c1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001599b  00000000  00000000  00065084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcb9f  00000000  00000000  0007aa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001775be  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000626c  00000000  00000000  00177610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000031c 	.word	0x2000031c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ff0 	.word	0x08007ff0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000320 	.word	0x20000320
 800020c:	08007ff0 	.word	0x08007ff0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */
bool angle_initialize = false;
float base_angle;
float cnt;
char scnt[100];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f90:	b5b0      	push	{r4, r5, r7, lr}
 8000f92:	b09e      	sub	sp, #120	; 0x78
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	4603      	mov	r3, r0
 8000f98:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) {
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa0:	d154      	bne.n	800104c <HAL_GPIO_EXTI_Callback+0xbc>
	  char s[100];
	  cnt = ((TIM3 -> CNT) % 2000) * 0.18;
 8000fa2:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa6:	4b2f      	ldr	r3, [pc, #188]	; (8001064 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fac:	09db      	lsrs	r3, r3, #7
 8000fae:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fac3 	bl	8000544 <__aeabi_ui2d>
 8000fbe:	a326      	add	r3, pc, #152	; (adr r3, 8001058 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc4:	f7ff fb38 	bl	8000638 <__aeabi_dmul>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	460b      	mov	r3, r1
 8000fcc:	4610      	mov	r0, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f7ff fe0a 	bl	8000be8 <__aeabi_d2f>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000fd8:	6013      	str	r3, [r2, #0]
//	  sprintf(s, "Z raise\r\n");
//	  HAL_UART_Transmit( &huart3, s, strlen(s) + 1, 0xFFFF);
	  if (!angle_initialize) {
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <HAL_GPIO_EXTI_Callback+0x66>
		  angle_initialize = true;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	; (800106c <HAL_GPIO_EXTI_Callback+0xdc>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
		  base_angle = cnt;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000ff4:	6013      	str	r3, [r2, #0]
	  }
	  sprintf(s, "Z Raize! current angle: %f, base angle: %f\r\n", cnt, base_angle);
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_GPIO_EXTI_Callback+0xd8>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fac4 	bl	8000588 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fabd 	bl	8000588 <__aeabi_f2d>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	f107 000c 	add.w	r0, r7, #12
 8001016:	e9cd 2300 	strd	r2, r3, [sp]
 800101a:	4622      	mov	r2, r4
 800101c:	462b      	mov	r3, r5
 800101e:	4915      	ldr	r1, [pc, #84]	; (8001074 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001020:	f004 fd6c 	bl	8005afc <siprintf>
	  HAL_UART_Transmit( &huart3, s, strlen(s) + 1, 0xFFFF);
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f8f1 	bl	8000210 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	b29b      	uxth	r3, r3
 8001032:	3301      	adds	r3, #1
 8001034:	b29a      	uxth	r2, r3
 8001036:	f107 010c 	add.w	r1, r7, #12
 800103a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103e:	480e      	ldr	r0, [pc, #56]	; (8001078 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001040:	f003 f944 	bl	80042cc <HAL_UART_Transmit>
	  cnt = base_angle;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_GPIO_EXTI_Callback+0xd8>)
 800104a:	6013      	str	r3, [r2, #0]
  }
}
 800104c:	bf00      	nop
 800104e:	3770      	adds	r7, #112	; 0x70
 8001050:	46bd      	mov	sp, r7
 8001052:	bdb0      	pop	{r4, r5, r7, pc}
 8001054:	f3af 8000 	nop.w
 8001058:	70a3d70a 	.word	0x70a3d70a
 800105c:	3fc70a3d 	.word	0x3fc70a3d
 8001060:	40000400 	.word	0x40000400
 8001064:	10624dd3 	.word	0x10624dd3
 8001068:	20000a04 	.word	0x20000a04
 800106c:	200009fc 	.word	0x200009fc
 8001070:	20000a00 	.word	0x20000a00
 8001074:	08008008 	.word	0x08008008
 8001078:	2000046c 	.word	0x2000046c
 800107c:	00000000 	.word	0x00000000

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f000 fda3 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f84a 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 f9b2 	bl	80013f4 <MX_GPIO_Init>
  MX_ETH_Init();
 8001090:	f000 f8ae 	bl	80011f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001094:	f000 f950 	bl	8001338 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001098:	f000 f97e 	bl	8001398 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800109c:	f000 f8f6 	bl	800128c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 80010a0:	213c      	movs	r1, #60	; 0x3c
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <main+0x88>)
 80010a4:	f002 fee2 	bl	8003e6c <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	cnt = ((TIM3 -> CNT) % 2000) * 0.18;
 80010a8:	4b18      	ldr	r3, [pc, #96]	; (800110c <main+0x8c>)
 80010aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <main+0x90>)
 80010ae:	fba3 1302 	umull	r1, r3, r3, r2
 80010b2:	09db      	lsrs	r3, r3, #7
 80010b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010b8:	fb01 f303 	mul.w	r3, r1, r3
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa40 	bl	8000544 <__aeabi_ui2d>
 80010c4:	a30e      	add	r3, pc, #56	; (adr r3, 8001100 <main+0x80>)
 80010c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ca:	f7ff fab5 	bl	8000638 <__aeabi_dmul>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	4610      	mov	r0, r2
 80010d4:	4619      	mov	r1, r3
 80010d6:	f7ff fd87 	bl	8000be8 <__aeabi_d2f>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <main+0x94>)
 80010de:	6013      	str	r3, [r2, #0]
//	sprintf(scnt "%lf\r\n", cnt);
	sprintf(scnt, "%f\r\n", cnt);
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <main+0x94>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff fa4f 	bl	8000588 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <main+0x98>)
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <main+0x9c>)
 80010f2:	f004 fd03 	bl	8005afc <siprintf>
//	HAL_UART_Transmit( &huart3, scnt, strlen(scnt) + 1, 0xFFFF);
	HAL_Delay( 100 );
 80010f6:	2064      	movs	r0, #100	; 0x64
 80010f8:	f000 fdc6 	bl	8001c88 <HAL_Delay>
	cnt = ((TIM3 -> CNT) % 2000) * 0.18;
 80010fc:	e7d4      	b.n	80010a8 <main+0x28>
 80010fe:	bf00      	nop
 8001100:	70a3d70a 	.word	0x70a3d70a
 8001104:	3fc70a3d 	.word	0x3fc70a3d
 8001108:	20000420 	.word	0x20000420
 800110c:	40000400 	.word	0x40000400
 8001110:	10624dd3 	.word	0x10624dd3
 8001114:	20000a04 	.word	0x20000a04
 8001118:	08008038 	.word	0x08008038
 800111c:	20000a08 	.word	0x20000a08

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2230      	movs	r2, #48	; 0x30
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 f872 	bl	8005218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001144:	f001 fd22 	bl	8002b8c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <SystemClock_Config+0xc8>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	6413      	str	r3, [r2, #64]	; 0x40
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <SystemClock_Config+0xc8>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <SystemClock_Config+0xcc>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001168:	4a20      	ldr	r2, [pc, #128]	; (80011ec <SystemClock_Config+0xcc>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <SystemClock_Config+0xcc>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001180:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001194:	2348      	movs	r3, #72	; 0x48
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800119c:	2303      	movs	r3, #3
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f001 fd01 	bl	8002bac <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b0:	f000 f9d2 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 ff8f 	bl	80030f4 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011dc:	f000 f9bc 	bl	8001558 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	; 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_ETH_Init+0x84>)
 80011f6:	4a20      	ldr	r2, [pc, #128]	; (8001278 <MX_ETH_Init+0x88>)
 80011f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_ETH_Init+0x8c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_ETH_Init+0x8c>)
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_ETH_Init+0x8c>)
 8001208:	22e1      	movs	r2, #225	; 0xe1
 800120a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_ETH_Init+0x8c>)
 800120e:	2200      	movs	r2, #0
 8001210:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_ETH_Init+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_ETH_Init+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <MX_ETH_Init+0x84>)
 8001220:	4a16      	ldr	r2, [pc, #88]	; (800127c <MX_ETH_Init+0x8c>)
 8001222:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_ETH_Init+0x84>)
 8001226:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800122a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_ETH_Init+0x84>)
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <MX_ETH_Init+0x90>)
 8001230:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_ETH_Init+0x84>)
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <MX_ETH_Init+0x94>)
 8001236:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ETH_Init+0x84>)
 800123a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800123e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001240:	480c      	ldr	r0, [pc, #48]	; (8001274 <MX_ETH_Init+0x84>)
 8001242:	f000 fe57 	bl	8001ef4 <HAL_ETH_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800124c:	f000 f984 	bl	8001558 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001250:	2238      	movs	r2, #56	; 0x38
 8001252:	2100      	movs	r1, #0
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_ETH_Init+0x98>)
 8001256:	f003 ffdf 	bl	8005218 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_ETH_Init+0x98>)
 800125c:	2221      	movs	r2, #33	; 0x21
 800125e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_ETH_Init+0x98>)
 8001262:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001266:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <MX_ETH_Init+0x98>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000370 	.word	0x20000370
 8001278:	40028000 	.word	0x40028000
 800127c:	20000a6c 	.word	0x20000a6c
 8001280:	2000027c 	.word	0x2000027c
 8001284:	200001dc 	.word	0x200001dc
 8001288:	20000338 	.word	0x20000338

0800128c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2224      	movs	r2, #36	; 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f003 ffbc 	bl	8005218 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <MX_TIM3_Init+0xa8>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d0:	2303      	movs	r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM3_Init+0xa4>)
 80012fc:	f002 fd10 	bl	8003d20 <HAL_TIM_Encoder_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001306:	f000 f927 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_TIM3_Init+0xa4>)
 8001318:	f002 fefc 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001322:	f000 f919 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000420 	.word	0x20000420
 8001334:	40000400 	.word	0x40000400

08001338 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_USART3_UART_Init+0x58>)
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <MX_USART3_UART_Init+0x5c>)
 8001340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART3_UART_Init+0x58>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART3_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART3_UART_Init+0x58>)
 8001376:	2200      	movs	r2, #0
 8001378:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART3_UART_Init+0x58>)
 800137c:	f002 ff58 	bl	8004230 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001386:	f000 f8e7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000046c 	.word	0x2000046c
 8001394:	40004800 	.word	0x40004800

08001398 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a6:	2206      	movs	r2, #6
 80013a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013aa:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b8:	2202      	movs	r2, #2
 80013ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013be:	2201      	movs	r2, #1
 80013c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013dc:	f001 fa8e 	bl	80028fc <HAL_PCD_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013e6:	f000 f8b7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200004f4 	.word	0x200004f4

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	; 0x30
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b4f      	ldr	r3, [pc, #316]	; (8001548 <MX_GPIO_Init+0x154>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a4e      	ldr	r2, [pc, #312]	; (8001548 <MX_GPIO_Init+0x154>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b4c      	ldr	r3, [pc, #304]	; (8001548 <MX_GPIO_Init+0x154>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b49      	ldr	r3, [pc, #292]	; (8001548 <MX_GPIO_Init+0x154>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a48      	ldr	r2, [pc, #288]	; (8001548 <MX_GPIO_Init+0x154>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <MX_GPIO_Init+0x154>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b43      	ldr	r3, [pc, #268]	; (8001548 <MX_GPIO_Init+0x154>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a42      	ldr	r2, [pc, #264]	; (8001548 <MX_GPIO_Init+0x154>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b40      	ldr	r3, [pc, #256]	; (8001548 <MX_GPIO_Init+0x154>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b3d      	ldr	r3, [pc, #244]	; (8001548 <MX_GPIO_Init+0x154>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a3c      	ldr	r2, [pc, #240]	; (8001548 <MX_GPIO_Init+0x154>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <MX_GPIO_Init+0x154>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <MX_GPIO_Init+0x154>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a36      	ldr	r2, [pc, #216]	; (8001548 <MX_GPIO_Init+0x154>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <MX_GPIO_Init+0x154>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MX_GPIO_Init+0x154>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a30      	ldr	r2, [pc, #192]	; (8001548 <MX_GPIO_Init+0x154>)
 8001488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <MX_GPIO_Init+0x154>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	f244 0181 	movw	r1, #16513	; 0x4081
 80014a0:	482a      	ldr	r0, [pc, #168]	; (800154c <MX_GPIO_Init+0x158>)
 80014a2:	f001 f9f9 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	4829      	ldr	r0, [pc, #164]	; (8001550 <MX_GPIO_Init+0x15c>)
 80014ac:	f001 f9f4 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_Btn_Pin PC8 */
  GPIO_InitStruct.Pin = USER_Btn_Pin|GPIO_PIN_8;
 80014b0:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4823      	ldr	r0, [pc, #140]	; (8001554 <MX_GPIO_Init+0x160>)
 80014c8:	f001 f83a 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4819      	ldr	r0, [pc, #100]	; (800154c <MX_GPIO_Init+0x158>)
 80014e6:	f001 f82b 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014ea:	2340      	movs	r3, #64	; 0x40
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	4813      	ldr	r0, [pc, #76]	; (8001550 <MX_GPIO_Init+0x15c>)
 8001502:	f001 f81d 	bl	8002540 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4619      	mov	r1, r3
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_GPIO_Init+0x15c>)
 800151a:	f001 f811 	bl	8002540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2017      	movs	r0, #23
 8001524:	f000 fcaf 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001528:	2017      	movs	r0, #23
 800152a:	f000 fcc8 	bl	8001ebe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2028      	movs	r0, #40	; 0x28
 8001534:	f000 fca7 	bl	8001e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001538:	2028      	movs	r0, #40	; 0x28
 800153a:	f000 fcc0 	bl	8001ebe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	; 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40020400 	.word	0x40020400
 8001550:	40021800 	.word	0x40021800
 8001554:	40020800 	.word	0x40020800

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6453      	str	r3, [r2, #68]	; 0x44
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800

080015ac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08e      	sub	sp, #56	; 0x38
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a4e      	ldr	r2, [pc, #312]	; (8001704 <HAL_ETH_MspInit+0x158>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	f040 8096 	bne.w	80016fc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a4c      	ldr	r2, [pc, #304]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	6a3b      	ldr	r3, [r7, #32]
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015fc:	61fb      	str	r3, [r7, #28]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800160a:	6313      	str	r3, [r2, #48]	; 0x30
 800160c:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001614:	61bb      	str	r3, [r7, #24]
 8001616:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001618:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800161e:	f043 0304 	orr.w	r3, r3, #4
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001634:	4a34      	ldr	r2, [pc, #208]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6313      	str	r3, [r2, #48]	; 0x30
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800164e:	f043 0302 	orr.w	r3, r3, #2
 8001652:	6313      	str	r3, [r2, #48]	; 0x30
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	4a28      	ldr	r2, [pc, #160]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 8001666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800166a:	6313      	str	r3, [r2, #48]	; 0x30
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_ETH_MspInit+0x15c>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001678:	2332      	movs	r3, #50	; 0x32
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001688:	230b      	movs	r3, #11
 800168a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001690:	4619      	mov	r1, r3
 8001692:	481e      	ldr	r0, [pc, #120]	; (800170c <HAL_ETH_MspInit+0x160>)
 8001694:	f000 ff54 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001698:	2386      	movs	r3, #134	; 0x86
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a8:	230b      	movs	r3, #11
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4817      	ldr	r0, [pc, #92]	; (8001710 <HAL_ETH_MspInit+0x164>)
 80016b4:	f000 ff44 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80016b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	2302      	movs	r3, #2
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ca:	230b      	movs	r3, #11
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d2:	4619      	mov	r1, r3
 80016d4:	480f      	ldr	r0, [pc, #60]	; (8001714 <HAL_ETH_MspInit+0x168>)
 80016d6:	f000 ff33 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80016da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016ec:	230b      	movs	r3, #11
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4808      	ldr	r0, [pc, #32]	; (8001718 <HAL_ETH_MspInit+0x16c>)
 80016f8:	f000 ff22 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	; 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40028000 	.word	0x40028000
 8001708:	40023800 	.word	0x40023800
 800170c:	40020800 	.word	0x40020800
 8001710:	40020000 	.word	0x40020000
 8001714:	40020400 	.word	0x40020400
 8001718:	40021800 	.word	0x40021800

0800171c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_TIM_Encoder_MspInit+0x7c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d127      	bne.n	800178e <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6413      	str	r3, [r2, #64]	; 0x40
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_TIM_Encoder_MspInit+0x80>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800177e:	2302      	movs	r3, #2
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_TIM_Encoder_MspInit+0x84>)
 800178a:	f000 fed9 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3728      	adds	r7, #40	; 0x28
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40000400 	.word	0x40000400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0aa      	sub	sp, #168	; 0xa8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2284      	movs	r2, #132	; 0x84
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f003 fd27 	bl	8005218 <memset>
  if(huart->Instance==USART3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <HAL_UART_MspInit+0xb4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d13c      	bne.n	800184e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017da:	2300      	movs	r3, #0
 80017dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 feac 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80017ee:	f7ff feb3 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_UART_MspInit+0xb8>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_UART_MspInit+0xb8>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <HAL_UART_MspInit+0xb8>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800180a:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_UART_MspInit+0xb8>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_UART_MspInit+0xb8>)
 8001810:	f043 0308 	orr.w	r3, r3, #8
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_UART_MspInit+0xb8>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001826:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800183c:	2307      	movs	r3, #7
 800183e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001842:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_UART_MspInit+0xbc>)
 800184a:	f000 fe79 	bl	8002540 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800184e:	bf00      	nop
 8001850:	37a8      	adds	r7, #168	; 0xa8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40004800 	.word	0x40004800
 800185c:	40023800 	.word	0x40023800
 8001860:	40020c00 	.word	0x40020c00

08001864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b0ac      	sub	sp, #176	; 0xb0
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0318 	add.w	r3, r7, #24
 8001880:	2284      	movs	r2, #132	; 0x84
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f003 fcc7 	bl	8005218 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001892:	d159      	bne.n	8001948 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001894:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001898:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	4618      	mov	r0, r3
 80018a6:	f001 fe4b 	bl	8003540 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80018b0:	f7ff fe52 	bl	8001558 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_PCD_MspInit+0xec>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a25      	ldr	r2, [pc, #148]	; (8001950 <HAL_PCD_MspInit+0xec>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <HAL_PCD_MspInit+0xec>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018e6:	230a      	movs	r3, #10
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	4818      	ldr	r0, [pc, #96]	; (8001954 <HAL_PCD_MspInit+0xf0>)
 80018f4:	f000 fe24 	bl	8002540 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001900:	2300      	movs	r3, #0
 8001902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800190c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001910:	4619      	mov	r1, r3
 8001912:	4810      	ldr	r0, [pc, #64]	; (8001954 <HAL_PCD_MspInit+0xf0>)
 8001914:	f000 fe14 	bl	8002540 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <HAL_PCD_MspInit+0xec>)
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <HAL_PCD_MspInit+0xec>)
 800191e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001922:	6353      	str	r3, [r2, #52]	; 0x34
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_PCD_MspInit+0xec>)
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <HAL_PCD_MspInit+0xec>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_PCD_MspInit+0xec>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6453      	str	r3, [r2, #68]	; 0x44
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_PCD_MspInit+0xec>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001948:	bf00      	nop
 800194a:	37b0      	adds	r7, #176	; 0xb0
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800195c:	e7fe      	b.n	800195c <NMI_Handler+0x4>

0800195e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001962:	e7fe      	b.n	8001962 <HardFault_Handler+0x4>

08001964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001968:	e7fe      	b.n	8001968 <MemManage_Handler+0x4>

0800196a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196e:	e7fe      	b.n	800196e <BusFault_Handler+0x4>

08001970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <UsageFault_Handler+0x4>

08001976 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 f950 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}

080019ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80019b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80019b4:	f000 ff8a 	bl	80028cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80019c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019c4:	f000 ff82 	bl	80028cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return 1;
 80019d0:	2301      	movs	r3, #1
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_kill>:

int _kill(int pid, int sig)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019e6:	f003 fbed 	bl	80051c4 <__errno>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2216      	movs	r2, #22
 80019ee:	601a      	str	r2, [r3, #0]
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <_exit>:

void _exit (int status)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ffe7 	bl	80019dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a0e:	e7fe      	b.n	8001a0e <_exit+0x12>

08001a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	e00a      	b.n	8001a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a22:	f3af 8000 	nop.w
 8001a26:	4601      	mov	r1, r0
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	1c5a      	adds	r2, r3, #1
 8001a2c:	60ba      	str	r2, [r7, #8]
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf0      	blt.n	8001a22 <_read+0x12>
  }

  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	e009      	b.n	8001a70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf1      	blt.n	8001a5c <_write+0x12>
  }
  return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_close>:

int _close(int file)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aaa:	605a      	str	r2, [r3, #4]
  return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <_isatty>:

int _isatty(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ac2:	2301      	movs	r3, #1
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f003 fb52 	bl	80051c4 <__errno>
 8001b20:	4603      	mov	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20050000 	.word	0x20050000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	20000a74 	.word	0x20000a74
 8001b54:	20000a90 	.word	0x20000a90

08001b58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <SystemInit+0x20>)
 8001b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <SystemInit+0x20>)
 8001b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ba6:	f7ff ffd7 	bl	8001b58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f003 fb11 	bl	80051d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff fa67 	bl	8001080 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001bc0:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 8001bc4:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8001bc8:	20000a8c 	.word	0x20000a8c

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f94c 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f805 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fcc1 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f967 	bl	8001eda <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c24:	f000 f92f 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000a78 	.word	0x20000a78

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000a78 	.word	0x20000a78

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff29 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff3e 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff31 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff ffa2 	bl	8001e2c <SysTick_Config>
 8001ee8:	4603      	mov	r3, r0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e06a      	b.n	8001fdc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d106      	bne.n	8001f1e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2223      	movs	r2, #35	; 0x23
 8001f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fb47 	bl	80015ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <HAL_ETH_Init+0xf0>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	4a30      	ldr	r2, [pc, #192]	; (8001fe4 <HAL_ETH_Init+0xf0>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2a:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_ETH_Init+0xf0>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f36:	4b2c      	ldr	r3, [pc, #176]	; (8001fe8 <HAL_ETH_Init+0xf4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <HAL_ETH_Init+0xf4>)
 8001f3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001f40:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f42:	4b29      	ldr	r3, [pc, #164]	; (8001fe8 <HAL_ETH_Init+0xf4>)
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	4927      	ldr	r1, [pc, #156]	; (8001fe8 <HAL_ETH_Init+0xf4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <HAL_ETH_Init+0xf4>)
 8001f52:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f6a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f6c:	f7ff fe80 	bl	8001c70 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f72:	e011      	b.n	8001f98 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001f74:	f7ff fe7c 	bl	8001c70 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f82:	d909      	bls.n	8001f98 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2204      	movs	r2, #4
 8001f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	22e0      	movs	r2, #224	; 0xe0
 8001f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e021      	b.n	8001fdc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1e4      	bne.n	8001f74 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f958 	bl	8002260 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f9ff 	bl	80023b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 fa55 	bl	8002466 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f9bd 	bl	8002344 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40013800 	.word	0x40013800

08001fec <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4b51      	ldr	r3, [pc, #324]	; (8002148 <ETH_SetMACConfig+0x15c>)
 8002002:	4013      	ands	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	7c1b      	ldrb	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <ETH_SetMACConfig+0x28>
 800200e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002012:	e000      	b.n	8002016 <ETH_SetMACConfig+0x2a>
 8002014:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	7c5b      	ldrb	r3, [r3, #17]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <ETH_SetMACConfig+0x38>
 800201e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002022:	e000      	b.n	8002026 <ETH_SetMACConfig+0x3a>
 8002024:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002026:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800202c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	7fdb      	ldrb	r3, [r3, #31]
 8002032:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002034:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800203a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	7f92      	ldrb	r2, [r2, #30]
 8002040:	2a00      	cmp	r2, #0
 8002042:	d102      	bne.n	800204a <ETH_SetMACConfig+0x5e>
 8002044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002048:	e000      	b.n	800204c <ETH_SetMACConfig+0x60>
 800204a:	2200      	movs	r2, #0
                        macconf->Speed |
 800204c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7f1b      	ldrb	r3, [r3, #28]
 8002052:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002054:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800205a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	791b      	ldrb	r3, [r3, #4]
 8002060:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002062:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	f892 2020 	ldrb.w	r2, [r2, #32]
 800206a:	2a00      	cmp	r2, #0
 800206c:	d102      	bne.n	8002074 <ETH_SetMACConfig+0x88>
 800206e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002072:	e000      	b.n	8002076 <ETH_SetMACConfig+0x8a>
 8002074:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002076:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	7bdb      	ldrb	r3, [r3, #15]
 800207c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800207e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002084:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800208c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800208e:	4313      	orrs	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7ff fdee 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020c2:	4013      	ands	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020d2:	2a00      	cmp	r2, #0
 80020d4:	d101      	bne.n	80020da <ETH_SetMACConfig+0xee>
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	e000      	b.n	80020dc <ETH_SetMACConfig+0xf0>
 80020da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80020dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80020e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80020ea:	2a01      	cmp	r2, #1
 80020ec:	d101      	bne.n	80020f2 <ETH_SetMACConfig+0x106>
 80020ee:	2208      	movs	r2, #8
 80020f0:	e000      	b.n	80020f4 <ETH_SetMACConfig+0x108>
 80020f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80020f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80020fc:	2a01      	cmp	r2, #1
 80020fe:	d101      	bne.n	8002104 <ETH_SetMACConfig+0x118>
 8002100:	2204      	movs	r2, #4
 8002102:	e000      	b.n	8002106 <ETH_SetMACConfig+0x11a>
 8002104:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002106:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800210e:	2a01      	cmp	r2, #1
 8002110:	d101      	bne.n	8002116 <ETH_SetMACConfig+0x12a>
 8002112:	2202      	movs	r2, #2
 8002114:	e000      	b.n	8002118 <ETH_SetMACConfig+0x12c>
 8002116:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002118:	4313      	orrs	r3, r2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002130:	2001      	movs	r0, #1
 8002132:	f7ff fda9 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]
}
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	ff20810f 	.word	0xff20810f

0800214c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4b3d      	ldr	r3, [pc, #244]	; (800225c <ETH_SetDMAConfig+0x110>)
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	7b1b      	ldrb	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <ETH_SetDMAConfig+0x2c>
 8002172:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002176:	e000      	b.n	800217a <ETH_SetDMAConfig+0x2e>
 8002178:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	7b5b      	ldrb	r3, [r3, #13]
 800217e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002180:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	7f52      	ldrb	r2, [r2, #29]
 8002186:	2a00      	cmp	r2, #0
 8002188:	d102      	bne.n	8002190 <ETH_SetDMAConfig+0x44>
 800218a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800218e:	e000      	b.n	8002192 <ETH_SetDMAConfig+0x46>
 8002190:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002192:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	7b9b      	ldrb	r3, [r3, #14]
 8002198:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800219a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80021a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	7f1b      	ldrb	r3, [r3, #28]
 80021a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80021a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	7f9b      	ldrb	r3, [r3, #30]
 80021ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80021b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80021b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d0:	461a      	mov	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7ff fd50 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	461a      	mov	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	791b      	ldrb	r3, [r3, #4]
 80021fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002200:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002206:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800220c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002214:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002216:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800221e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002224:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6812      	ldr	r2, [r2, #0]
 800222a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800222e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002232:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002240:	2001      	movs	r0, #1
 8002242:	f7ff fd21 	bl	8001c88 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	f8de3f23 	.word	0xf8de3f23

08002260 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0a6      	sub	sp, #152	; 0x98
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800229c:	2300      	movs	r3, #0
 800229e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80022c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80022d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fe86 	bl	8001fec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80022e0:	2301      	movs	r3, #1
 80022e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80022e4:	2301      	movs	r3, #1
 80022e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800230c:	2301      	movs	r3, #1
 800230e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002314:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800231a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800231c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002320:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002328:	2300      	movs	r3, #0
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002330:	f107 0308 	add.w	r3, r7, #8
 8002334:	4619      	mov	r1, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ff08 	bl	800214c <ETH_SetDMAConfig>
}
 800233c:	bf00      	nop
 800233e:	3798      	adds	r7, #152	; 0x98
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3305      	adds	r3, #5
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	3204      	adds	r2, #4
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	4b11      	ldr	r3, [pc, #68]	; (80023ac <ETH_MACAddressConfig+0x68>)
 8002366:	4413      	add	r3, r2
 8002368:	461a      	mov	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3303      	adds	r3, #3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	061a      	lsls	r2, r3, #24
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3302      	adds	r3, #2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	4313      	orrs	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <ETH_MACAddressConfig+0x6c>)
 8002396:	4413      	add	r3, r2
 8002398:	461a      	mov	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	6013      	str	r3, [r2, #0]
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40028040 	.word	0x40028040
 80023b0:	40028044 	.word	0x40028044

080023b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e03e      	b.n	8002440 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68d9      	ldr	r1, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	3206      	adds	r2, #6
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d80c      	bhi.n	8002424 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68d9      	ldr	r1, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	e004      	b.n	800242e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3301      	adds	r3, #1
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d9bd      	bls.n	80023c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e046      	b.n	8002502 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6919      	ldr	r1, [r3, #16]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2200      	movs	r2, #0
 8002490:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80024b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80024b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80024c6:	68b9      	ldr	r1, [r7, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	3212      	adds	r2, #18
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d80c      	bhi.n	80024f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6919      	ldr	r1, [r3, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	440b      	add	r3, r1
 80024ea:	461a      	mov	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	e004      	b.n	80024fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	3301      	adds	r3, #1
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d9b5      	bls.n	8002474 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002532:	60da      	str	r2, [r3, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002540:	b480      	push	{r7}
 8002542:	b089      	sub	sp, #36	; 0x24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800254a:	2300      	movs	r3, #0
 800254c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002552:	2300      	movs	r3, #0
 8002554:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e175      	b.n	800284c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002560:	2201      	movs	r2, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	429a      	cmp	r2, r3
 800257a:	f040 8164 	bne.w	8002846 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0303 	and.w	r3, r3, #3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_GPIO_Init+0x56>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d130      	bne.n	80025f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2203      	movs	r2, #3
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025cc:	2201      	movs	r2, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	43db      	mvns	r3, r3
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 0201 	and.w	r2, r3, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b03      	cmp	r3, #3
 8002602:	d017      	beq.n	8002634 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d123      	bne.n	8002688 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	220f      	movs	r2, #15
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	69b9      	ldr	r1, [r7, #24]
 8002684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	2203      	movs	r2, #3
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0203 	and.w	r2, r3, #3
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f000 80be 	beq.w	8002846 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026d4:	6453      	str	r3, [r2, #68]	; 0x44
 80026d6:	4b63      	ldr	r3, [pc, #396]	; (8002864 <HAL_GPIO_Init+0x324>)
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <HAL_GPIO_Init+0x328>)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	089b      	lsrs	r3, r3, #2
 80026e8:	3302      	adds	r3, #2
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	220f      	movs	r2, #15
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_GPIO_Init+0x32c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d037      	beq.n	800277e <HAL_GPIO_Init+0x23e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a57      	ldr	r2, [pc, #348]	; (8002870 <HAL_GPIO_Init+0x330>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d031      	beq.n	800277a <HAL_GPIO_Init+0x23a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a56      	ldr	r2, [pc, #344]	; (8002874 <HAL_GPIO_Init+0x334>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <HAL_GPIO_Init+0x236>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_GPIO_Init+0x338>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d025      	beq.n	8002772 <HAL_GPIO_Init+0x232>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a54      	ldr	r2, [pc, #336]	; (800287c <HAL_GPIO_Init+0x33c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d01f      	beq.n	800276e <HAL_GPIO_Init+0x22e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a53      	ldr	r2, [pc, #332]	; (8002880 <HAL_GPIO_Init+0x340>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d019      	beq.n	800276a <HAL_GPIO_Init+0x22a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_GPIO_Init+0x344>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_GPIO_Init+0x226>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a51      	ldr	r2, [pc, #324]	; (8002888 <HAL_GPIO_Init+0x348>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d00d      	beq.n	8002762 <HAL_GPIO_Init+0x222>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a50      	ldr	r2, [pc, #320]	; (800288c <HAL_GPIO_Init+0x34c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d007      	beq.n	800275e <HAL_GPIO_Init+0x21e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a4f      	ldr	r2, [pc, #316]	; (8002890 <HAL_GPIO_Init+0x350>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d101      	bne.n	800275a <HAL_GPIO_Init+0x21a>
 8002756:	2309      	movs	r3, #9
 8002758:	e012      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275a:	230a      	movs	r3, #10
 800275c:	e010      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800275e:	2308      	movs	r3, #8
 8002760:	e00e      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002762:	2307      	movs	r3, #7
 8002764:	e00c      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002766:	2306      	movs	r3, #6
 8002768:	e00a      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276a:	2305      	movs	r3, #5
 800276c:	e008      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800276e:	2304      	movs	r3, #4
 8002770:	e006      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002772:	2303      	movs	r3, #3
 8002774:	e004      	b.n	8002780 <HAL_GPIO_Init+0x240>
 8002776:	2302      	movs	r3, #2
 8002778:	e002      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x240>
 800277e:	2300      	movs	r3, #0
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	f002 0203 	and.w	r2, r2, #3
 8002786:	0092      	lsls	r2, r2, #2
 8002788:	4093      	lsls	r3, r2
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002790:	4935      	ldr	r1, [pc, #212]	; (8002868 <HAL_GPIO_Init+0x328>)
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027c8:	4b32      	ldr	r3, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x354>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_GPIO_Init+0x354>)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x354>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002840:	4a14      	ldr	r2, [pc, #80]	; (8002894 <HAL_GPIO_Init+0x354>)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3301      	adds	r3, #1
 800284a:	61fb      	str	r3, [r7, #28]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	f67f ae86 	bls.w	8002560 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	40013800 	.word	0x40013800
 800286c:	40020000 	.word	0x40020000
 8002870:	40020400 	.word	0x40020400
 8002874:	40020800 	.word	0x40020800
 8002878:	40020c00 	.word	0x40020c00
 800287c:	40021000 	.word	0x40021000
 8002880:	40021400 	.word	0x40021400
 8002884:	40021800 	.word	0x40021800
 8002888:	40021c00 	.word	0x40021c00
 800288c:	40022000 	.word	0x40022000
 8002890:	40022400 	.word	0x40022400
 8002894:	40013c00 	.word	0x40013c00

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80028b4:	e003      	b.n	80028be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80028b6:	887b      	ldrh	r3, [r7, #2]
 80028b8:	041a      	lsls	r2, r3, #16
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	619a      	str	r2, [r3, #24]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028d6:	4b08      	ldr	r3, [pc, #32]	; (80028f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	88fb      	ldrh	r3, [r7, #6]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028e2:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fb50 	bl	8000f90 <HAL_GPIO_EXTI_Callback>
  }
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fe:	b08f      	sub	sp, #60	; 0x3c
 8002900:	af0a      	add	r7, sp, #40	; 0x28
 8002902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e116      	b.n	8002b3c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d106      	bne.n	800292e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7fe ff9b 	bl	8001864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f002 f99d 	bl	8004c8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	687e      	ldr	r6, [r7, #4]
 800295a:	466d      	mov	r5, sp
 800295c:	f106 0410 	add.w	r4, r6, #16
 8002960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800296c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002970:	1d33      	adds	r3, r6, #4
 8002972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002974:	6838      	ldr	r0, [r7, #0]
 8002976:	f002 f931 	bl	8004bdc <USB_CoreInit>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e0d7      	b.n	8002b3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f002 f98b 	bl	8004cae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e04a      	b.n	8002a34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	333d      	adds	r3, #61	; 0x3d
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	333c      	adds	r3, #60	; 0x3c
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	b298      	uxth	r0, r3
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	3344      	adds	r3, #68	; 0x44
 80029da:	4602      	mov	r2, r0
 80029dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3340      	adds	r3, #64	; 0x40
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	3348      	adds	r3, #72	; 0x48
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	334c      	adds	r3, #76	; 0x4c
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3354      	adds	r3, #84	; 0x54
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3af      	bcc.n	800299e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e044      	b.n	8002ace <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3301      	adds	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	7bfa      	ldrb	r2, [r7, #15]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3b5      	bcc.n	8002a44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	687e      	ldr	r6, [r7, #4]
 8002ae0:	466d      	mov	r5, sp
 8002ae2:	f106 0410 	add.w	r4, r6, #16
 8002ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002af6:	1d33      	adds	r3, r6, #4
 8002af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002afa:	6838      	ldr	r0, [r7, #0]
 8002afc:	f002 f924 	bl	8004d48 <USB_DevInit>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e014      	b.n	8002b3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f80a 	bl	8002b44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f002 fae2 	bl	80050fe <USB_DevDisconnect>

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PCDEx_ActivateLPM+0x44>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	10000003 	.word	0x10000003

08002b8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a04      	ldr	r2, [pc, #16]	; (8002ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40007000 	.word	0x40007000

08002bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e291      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8087 	beq.w	8002cde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd0:	4b96      	ldr	r3, [pc, #600]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d00c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bdc:	4b93      	ldr	r3, [pc, #588]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d112      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62>
 8002be8:	4b90      	ldr	r3, [pc, #576]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bf4:	d10b      	bne.n	8002c0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf6:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d06c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x130>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d168      	bne.n	8002cdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e26b      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x7a>
 8002c18:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a83      	ldr	r2, [pc, #524]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e02e      	b.n	8002c84 <HAL_RCC_OscConfig+0xd8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCC_OscConfig+0x9c>
 8002c2e:	4b7f      	ldr	r3, [pc, #508]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a7e      	ldr	r2, [pc, #504]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b7c      	ldr	r3, [pc, #496]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a7b      	ldr	r2, [pc, #492]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xd8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0xc0>
 8002c52:	4b76      	ldr	r3, [pc, #472]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a75      	ldr	r2, [pc, #468]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b73      	ldr	r3, [pc, #460]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a72      	ldr	r2, [pc, #456]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xd8>
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a6e      	ldr	r2, [pc, #440]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b6c      	ldr	r3, [pc, #432]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fff0 	bl	8001c70 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe ffec 	bl	8001c70 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e21f      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b61      	ldr	r3, [pc, #388]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xe8>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe ffdc 	bl	8001c70 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe ffd8 	bl	8001c70 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e20b      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b57      	ldr	r3, [pc, #348]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x110>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d069      	beq.n	8002dbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cea:	4b50      	ldr	r3, [pc, #320]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x190>
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b47      	ldr	r3, [pc, #284]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x17a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1df      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	493d      	ldr	r1, [pc, #244]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e040      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b39      	ldr	r3, [pc, #228]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a38      	ldr	r2, [pc, #224]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d4a:	f043 0301 	orr.w	r3, r3, #1
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe ff8e 	bl	8001c70 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d58:	f7fe ff8a 	bl	8001c70 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e1bd      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6a:	4b30      	ldr	r3, [pc, #192]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4929      	ldr	r1, [pc, #164]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
 8002d8a:	e018      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a26      	ldr	r2, [pc, #152]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002d92:	f023 0301 	bic.w	r3, r3, #1
 8002d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d98:	f7fe ff6a 	bl	8001c70 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da0:	f7fe ff66 	bl	8001c70 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e199      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	4b1e      	ldr	r3, [pc, #120]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1f0      	bne.n	8002da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d038      	beq.n	8002e3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d019      	beq.n	8002e06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fe ff47 	bl	8001c70 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002de6:	f7fe ff43 	bl	8001c70 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e176      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x23a>
 8002e04:	e01a      	b.n	8002e3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e06:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	4a08      	ldr	r2, [pc, #32]	; (8002e2c <HAL_RCC_OscConfig+0x280>)
 8002e0c:	f023 0301 	bic.w	r3, r3, #1
 8002e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e12:	f7fe ff2d 	bl	8001c70 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1a:	f7fe ff29 	bl	8001c70 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d903      	bls.n	8002e30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e15c      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
 8002e2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e30:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80a4 	beq.w	8002f92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4a:	4b8b      	ldr	r3, [pc, #556]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e56:	4b88      	ldr	r3, [pc, #544]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a87      	ldr	r2, [pc, #540]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b85      	ldr	r3, [pc, #532]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x4d0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d118      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x4d0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7e      	ldr	r2, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fef1 	bl	8001c70 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe feed 	bl	8001c70 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b64      	cmp	r3, #100	; 0x64
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e120      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x31a>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec4:	e02d      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x33c>
 8002ece:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	f023 0301 	bic.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	f023 0304 	bic.w	r3, r3, #4
 8002ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee6:	e01c      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d10c      	bne.n	8002f0a <HAL_RCC_OscConfig+0x35e>
 8002ef0:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	4a60      	ldr	r2, [pc, #384]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002ef6:	f043 0304 	orr.w	r3, r3, #4
 8002efa:	6713      	str	r3, [r2, #112]	; 0x70
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a5d      	ldr	r2, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	e00b      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
 8002f0a:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a5a      	ldr	r2, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	4b58      	ldr	r3, [pc, #352]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	f023 0304 	bic.w	r3, r3, #4
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d015      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fea1 	bl	8001c70 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f30:	e00a      	b.n	8002f48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe fe9d 	bl	8001c70 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e0ce      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0ee      	beq.n	8002f32 <HAL_RCC_OscConfig+0x386>
 8002f54:	e014      	b.n	8002f80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f56:	f7fe fe8b 	bl	8001c70 <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e00a      	b.n	8002f74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe fe87 	bl	8001c70 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e0b8      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ee      	bne.n	8002f5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f80:	7dfb      	ldrb	r3, [r7, #23]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d105      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f86:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a3b      	ldr	r2, [pc, #236]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a4 	beq.w	80030e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d06b      	beq.n	8003080 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d149      	bne.n	8003044 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb0:	4b31      	ldr	r3, [pc, #196]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a30      	ldr	r2, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fe58 	bl	8001c70 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe fe54 	bl	8001c70 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e087      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b28      	ldr	r3, [pc, #160]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69da      	ldr	r2, [r3, #28]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	019b      	lsls	r3, r3, #6
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	085b      	lsrs	r3, r3, #1
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	4313      	orrs	r3, r2
 8003008:	4a1b      	ldr	r2, [pc, #108]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 800300a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800300e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003010:	4b19      	ldr	r3, [pc, #100]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a18      	ldr	r2, [pc, #96]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fe28 	bl	8001c70 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fe24 	bl	8001c70 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e057      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x478>
 8003042:	e04f      	b.n	80030e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 800304a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003050:	f7fe fe0e 	bl	8001c70 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fe0a 	bl	8001c70 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e03d      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_OscConfig+0x4cc>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f0      	bne.n	8003058 <HAL_RCC_OscConfig+0x4ac>
 8003076:	e035      	b.n	80030e4 <HAL_RCC_OscConfig+0x538>
 8003078:	40023800 	.word	0x40023800
 800307c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003080:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <HAL_RCC_OscConfig+0x544>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d028      	beq.n	80030e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003098:	429a      	cmp	r2, r3
 800309a:	d121      	bne.n	80030e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d11a      	bne.n	80030e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030b0:	4013      	ands	r3, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	3b01      	subs	r3, #1
 80030ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800

080030f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0d0      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b6a      	ldr	r3, [pc, #424]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b67      	ldr	r3, [pc, #412]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 020f 	bic.w	r2, r3, #15
 8003122:	4965      	ldr	r1, [pc, #404]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0b8      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d020      	beq.n	800318a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003154:	4b59      	ldr	r3, [pc, #356]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a58      	ldr	r2, [pc, #352]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800315e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800316c:	4b53      	ldr	r3, [pc, #332]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a52      	ldr	r2, [pc, #328]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003176:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003178:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	494d      	ldr	r1, [pc, #308]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d040      	beq.n	8003218 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d107      	bne.n	80031ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d115      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e07f      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d107      	bne.n	80031c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e073      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c6:	4b3d      	ldr	r3, [pc, #244]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e06b      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031d6:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f023 0203 	bic.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	4936      	ldr	r1, [pc, #216]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e8:	f7fe fd42 	bl	8001c70 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ee:	e00a      	b.n	8003206 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f0:	f7fe fd3e 	bl	8001c70 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fe:	4293      	cmp	r3, r2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e053      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 020c 	and.w	r2, r3, #12
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d1eb      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003218:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d210      	bcs.n	8003248 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	4922      	ldr	r1, [pc, #136]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b20      	ldr	r3, [pc, #128]	; (80032b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e032      	b.n	80032ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4916      	ldr	r1, [pc, #88]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	490e      	ldr	r1, [pc, #56]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003286:	f000 f821 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <HAL_RCC_ClockConfig+0x1c8>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	490a      	ldr	r1, [pc, #40]	; (80032c0 <HAL_RCC_ClockConfig+0x1cc>)
 8003298:	5ccb      	ldrb	r3, [r1, r3]
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	4a09      	ldr	r2, [pc, #36]	; (80032c4 <HAL_RCC_ClockConfig+0x1d0>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a2:	4b09      	ldr	r3, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1d4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fc9e 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023c00 	.word	0x40023c00
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08008040 	.word	0x08008040
 80032c4:	20000000 	.word	0x20000000
 80032c8:	20000004 	.word	0x20000004

080032cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b094      	sub	sp, #80	; 0x50
 80032d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	647b      	str	r3, [r7, #68]	; 0x44
 80032d8:	2300      	movs	r3, #0
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032dc:	2300      	movs	r3, #0
 80032de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e4:	4b79      	ldr	r3, [pc, #484]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d00d      	beq.n	800330c <HAL_RCC_GetSysClockFreq+0x40>
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	f200 80e1 	bhi.w	80034b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x34>
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d003      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x3a>
 80032fe:	e0db      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003300:	4b73      	ldr	r3, [pc, #460]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003302:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003304:	e0db      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003308:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330a:	e0d8      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800330c:	4b6f      	ldr	r3, [pc, #444]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003316:	4b6d      	ldr	r3, [pc, #436]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d063      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003322:	4b6a      	ldr	r3, [pc, #424]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	2200      	movs	r2, #0
 800332a:	63bb      	str	r3, [r7, #56]	; 0x38
 800332c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800332e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
 8003336:	2300      	movs	r3, #0
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
 800333a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	f04f 0000 	mov.w	r0, #0
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	0159      	lsls	r1, r3, #5
 800334c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003350:	0150      	lsls	r0, r2, #5
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4621      	mov	r1, r4
 8003358:	1a51      	subs	r1, r2, r1
 800335a:	6139      	str	r1, [r7, #16]
 800335c:	4629      	mov	r1, r5
 800335e:	eb63 0301 	sbc.w	r3, r3, r1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003370:	4659      	mov	r1, fp
 8003372:	018b      	lsls	r3, r1, #6
 8003374:	4651      	mov	r1, sl
 8003376:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337a:	4651      	mov	r1, sl
 800337c:	018a      	lsls	r2, r1, #6
 800337e:	4651      	mov	r1, sl
 8003380:	ebb2 0801 	subs.w	r8, r2, r1
 8003384:	4659      	mov	r1, fp
 8003386:	eb63 0901 	sbc.w	r9, r3, r1
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	f04f 0300 	mov.w	r3, #0
 8003392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800339e:	4690      	mov	r8, r2
 80033a0:	4699      	mov	r9, r3
 80033a2:	4623      	mov	r3, r4
 80033a4:	eb18 0303 	adds.w	r3, r8, r3
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	462b      	mov	r3, r5
 80033ac:	eb49 0303 	adc.w	r3, r9, r3
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033be:	4629      	mov	r1, r5
 80033c0:	024b      	lsls	r3, r1, #9
 80033c2:	4621      	mov	r1, r4
 80033c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033c8:	4621      	mov	r1, r4
 80033ca:	024a      	lsls	r2, r1, #9
 80033cc:	4610      	mov	r0, r2
 80033ce:	4619      	mov	r1, r3
 80033d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d2:	2200      	movs	r2, #0
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033dc:	f7fd fc54 	bl	8000c88 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033e8:	e058      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ea:	4b38      	ldr	r3, [pc, #224]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	099b      	lsrs	r3, r3, #6
 80033f0:	2200      	movs	r2, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	4611      	mov	r1, r2
 80033f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003404:	4642      	mov	r2, r8
 8003406:	464b      	mov	r3, r9
 8003408:	f04f 0000 	mov.w	r0, #0
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	0159      	lsls	r1, r3, #5
 8003412:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003416:	0150      	lsls	r0, r2, #5
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4641      	mov	r1, r8
 800341e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003422:	4649      	mov	r1, r9
 8003424:	eb63 0b01 	sbc.w	fp, r3, r1
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	f04f 0300 	mov.w	r3, #0
 8003430:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003434:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003438:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800343c:	ebb2 040a 	subs.w	r4, r2, sl
 8003440:	eb63 050b 	sbc.w	r5, r3, fp
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	00eb      	lsls	r3, r5, #3
 800344e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003452:	00e2      	lsls	r2, r4, #3
 8003454:	4614      	mov	r4, r2
 8003456:	461d      	mov	r5, r3
 8003458:	4643      	mov	r3, r8
 800345a:	18e3      	adds	r3, r4, r3
 800345c:	603b      	str	r3, [r7, #0]
 800345e:	464b      	mov	r3, r9
 8003460:	eb45 0303 	adc.w	r3, r5, r3
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003472:	4629      	mov	r1, r5
 8003474:	028b      	lsls	r3, r1, #10
 8003476:	4621      	mov	r1, r4
 8003478:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800347c:	4621      	mov	r1, r4
 800347e:	028a      	lsls	r2, r1, #10
 8003480:	4610      	mov	r0, r2
 8003482:	4619      	mov	r1, r3
 8003484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003486:	2200      	movs	r2, #0
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	61fa      	str	r2, [r7, #28]
 800348c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003490:	f7fd fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4613      	mov	r3, r2
 800349a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	3301      	adds	r3, #1
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b6:	e002      	b.n	80034be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3750      	adds	r7, #80	; 0x50
 80034c4:	46bd      	mov	sp, r7
 80034c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	00f42400 	.word	0x00f42400
 80034d4:	007a1200 	.word	0x007a1200

080034d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCC_GetHCLKFreq+0x14>)
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000000 	.word	0x20000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f4:	f7ff fff0 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	0a9b      	lsrs	r3, r3, #10
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4903      	ldr	r1, [pc, #12]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40023800 	.word	0x40023800
 8003514:	08008050 	.word	0x08008050

08003518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800351c:	f7ff ffdc 	bl	80034d8 <HAL_RCC_GetHCLKFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	0b5b      	lsrs	r3, r3, #13
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	4903      	ldr	r1, [pc, #12]	; (800353c <HAL_RCC_GetPCLK2Freq+0x24>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003534:	4618      	mov	r0, r3
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	08008050 	.word	0x08008050

08003540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b088      	sub	sp, #32
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d012      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003568:	4b69      	ldr	r3, [pc, #420]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a68      	ldr	r2, [pc, #416]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003572:	6093      	str	r3, [r2, #8]
 8003574:	4b66      	ldr	r3, [pc, #408]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	4964      	ldr	r1, [pc, #400]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800358a:	2301      	movs	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d017      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359a:	4b5d      	ldr	r3, [pc, #372]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	4959      	ldr	r1, [pc, #356]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b8:	d101      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035c6:	2301      	movs	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035d6:	4b4e      	ldr	r3, [pc, #312]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	494a      	ldr	r1, [pc, #296]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f4:	d101      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035f6:	2301      	movs	r3, #1
 80035f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 808b 	beq.w	800373a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	4a39      	ldr	r2, [pc, #228]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	6413      	str	r3, [r2, #64]	; 0x40
 8003630:	4b37      	ldr	r3, [pc, #220]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003648:	f7fe fb12 	bl	8001c70 <HAL_GetTick>
 800364c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003650:	f7fe fb0e 	bl	8001c70 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e357      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003662:	4b2c      	ldr	r3, [pc, #176]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800366e:	4b28      	ldr	r3, [pc, #160]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d035      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	429a      	cmp	r2, r3
 800368a:	d02e      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800368c:	4b20      	ldr	r3, [pc, #128]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003694:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a1d      	ldr	r2, [pc, #116]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a2:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036ae:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d114      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fad6 	bl	8001c70 <HAL_GetTick>
 80036c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	e00a      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fe fad2 	bl	8001c70 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e319      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0ee      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f6:	d111      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003706:	400b      	ands	r3, r1
 8003708:	4901      	ldr	r1, [pc, #4]	; (8003710 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
 800370e:	e00b      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003710:	40023800 	.word	0x40023800
 8003714:	40007000 	.word	0x40007000
 8003718:	0ffffcff 	.word	0x0ffffcff
 800371c:	4baa      	ldr	r3, [pc, #680]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4aa9      	ldr	r2, [pc, #676]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003722:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003726:	6093      	str	r3, [r2, #8]
 8003728:	4ba7      	ldr	r3, [pc, #668]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	49a4      	ldr	r1, [pc, #656]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003736:	4313      	orrs	r3, r2
 8003738:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003746:	4ba0      	ldr	r3, [pc, #640]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800374c:	4a9e      	ldr	r2, [pc, #632]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003752:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003756:	4b9c      	ldr	r3, [pc, #624]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003758:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	4999      	ldr	r1, [pc, #612]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003774:	4b94      	ldr	r3, [pc, #592]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003782:	4991      	ldr	r1, [pc, #580]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003796:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a4:	4988      	ldr	r1, [pc, #544]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b8:	4b83      	ldr	r3, [pc, #524]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c6:	4980      	ldr	r1, [pc, #512]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037da:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4977      	ldr	r1, [pc, #476]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037fc:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	496f      	ldr	r1, [pc, #444]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800381e:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f023 020c 	bic.w	r2, r3, #12
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382c:	4966      	ldr	r1, [pc, #408]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003840:	4b61      	ldr	r3, [pc, #388]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	495e      	ldr	r1, [pc, #376]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003870:	4955      	ldr	r1, [pc, #340]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003884:	4b50      	ldr	r3, [pc, #320]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	494d      	ldr	r1, [pc, #308]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038a6:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	4944      	ldr	r1, [pc, #272]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	493c      	ldr	r1, [pc, #240]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ea:	4b37      	ldr	r3, [pc, #220]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038f8:	4933      	ldr	r1, [pc, #204]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391a:	492b      	ldr	r1, [pc, #172]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d011      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800392e:	4b26      	ldr	r3, [pc, #152]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800393c:	4922      	ldr	r1, [pc, #136]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800395e:	2301      	movs	r3, #1
 8003960:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397c:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a0:	4909      	ldr	r1, [pc, #36]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d006      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f000 80d9 	beq.w	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a01      	ldr	r2, [pc, #4]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039c6:	e001      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fe f94f 	bl	8001c70 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d6:	f7fe f94b 	bl	8001c70 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e194      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e8:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f0      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d11d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a08:	4b64      	ldr	r3, [pc, #400]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0e:	0c1b      	lsrs	r3, r3, #16
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a16:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a1c:	0e1b      	lsrs	r3, r3, #24
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	019a      	lsls	r2, r3, #6
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	061b      	lsls	r3, r3, #24
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	071b      	lsls	r3, r3, #28
 8003a3c:	4957      	ldr	r1, [pc, #348]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a58:	d00a      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02e      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d129      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a70:	4b4a      	ldr	r3, [pc, #296]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a76:	0c1b      	lsrs	r3, r3, #16
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a84:	0f1b      	lsrs	r3, r3, #28
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	019a      	lsls	r2, r3, #6
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	071b      	lsls	r3, r3, #28
 8003aa4:	493d      	ldr	r1, [pc, #244]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003aac:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ab2:	f023 021f 	bic.w	r2, r3, #31
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	3b01      	subs	r3, #1
 8003abc:	4937      	ldr	r1, [pc, #220]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01d      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ad0:	4b32      	ldr	r3, [pc, #200]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ad2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ad6:	0e1b      	lsrs	r3, r3, #24
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ade:	4b2f      	ldr	r3, [pc, #188]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae4:	0f1b      	lsrs	r3, r3, #28
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	019a      	lsls	r2, r3, #6
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	041b      	lsls	r3, r3, #16
 8003af8:	431a      	orrs	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	431a      	orrs	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	071b      	lsls	r3, r3, #28
 8003b04:	4925      	ldr	r1, [pc, #148]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d011      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	019a      	lsls	r2, r3, #6
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	041b      	lsls	r3, r3, #16
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	071b      	lsls	r3, r3, #28
 8003b34:	4919      	ldr	r1, [pc, #100]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b3c:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b48:	f7fe f892 	bl	8001c70 <HAL_GetTick>
 8003b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b50:	f7fe f88e 	bl	8001c70 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e0d7      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b62:	4b0e      	ldr	r3, [pc, #56]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 80cd 	bne.w	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a08      	ldr	r2, [pc, #32]	; (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b82:	f7fe f875 	bl	8001c70 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b8a:	f7fe f871 	bl	8001c70 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b64      	cmp	r3, #100	; 0x64
 8003b96:	d903      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0ba      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ba0:	4b5e      	ldr	r3, [pc, #376]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bac:	d0ed      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02e      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d12a      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bd6:	4b51      	ldr	r3, [pc, #324]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003be4:	4b4d      	ldr	r3, [pc, #308]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	0f1b      	lsrs	r3, r3, #28
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	019a      	lsls	r2, r3, #6
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	071b      	lsls	r3, r3, #28
 8003c0a:	4944      	ldr	r1, [pc, #272]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c12:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	021b      	lsls	r3, r3, #8
 8003c24:	493d      	ldr	r1, [pc, #244]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d022      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c40:	d11d      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c42:	4b36      	ldr	r3, [pc, #216]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	0e1b      	lsrs	r3, r3, #24
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c50:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c56:	0f1b      	lsrs	r3, r3, #28
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	019a      	lsls	r2, r3, #6
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	041b      	lsls	r3, r3, #16
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	061b      	lsls	r3, r3, #24
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	071b      	lsls	r3, r3, #28
 8003c76:	4929      	ldr	r1, [pc, #164]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d028      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8a:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	0e1b      	lsrs	r3, r3, #24
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c98:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9e:	0c1b      	lsrs	r3, r3, #16
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	019a      	lsls	r2, r3, #6
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	041b      	lsls	r3, r3, #16
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	071b      	lsls	r3, r3, #28
 8003cbe:	4917      	ldr	r1, [pc, #92]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cc6:	4b15      	ldr	r3, [pc, #84]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	4911      	ldr	r1, [pc, #68]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce8:	f7fd ffc2 	bl	8001c70 <HAL_GetTick>
 8003cec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cf0:	f7fd ffbe 	bl	8001c70 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e007      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0e:	d1ef      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3720      	adds	r7, #32
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800

08003d20 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e08f      	b.n	8003e54 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d106      	bne.n	8003d4e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7fd fce7 	bl	800171c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2202      	movs	r2, #2
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6899      	ldr	r1, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <HAL_TIM_Encoder_Init+0x13c>)
 8003d62:	400b      	ands	r3, r1
 8003d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f000 f909 	bl	8003f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	4b31      	ldr	r3, [pc, #196]	; (8003e60 <HAL_TIM_Encoder_Init+0x140>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	4313      	orrs	r3, r2
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4b2b      	ldr	r3, [pc, #172]	; (8003e64 <HAL_TIM_Encoder_Init+0x144>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <HAL_TIM_Encoder_Init+0x148>)
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	011a      	lsls	r2, r3, #4
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	031b      	lsls	r3, r3, #12
 8003de0:	4313      	orrs	r3, r2
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003df6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	4313      	orrs	r3, r2
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fffebff8 	.word	0xfffebff8
 8003e60:	fffffcfc 	.word	0xfffffcfc
 8003e64:	fffff3f3 	.word	0xfffff3f3
 8003e68:	ffff0f0f 	.word	0xffff0f0f

08003e6c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e7c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e84:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e8c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e94:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d110      	bne.n	8003ebe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ea2:	7b7b      	ldrb	r3, [r7, #13]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e069      	b.n	8003f80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ebc:	e031      	b.n	8003f22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d110      	bne.n	8003ee6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eca:	7b3b      	ldrb	r3, [r7, #12]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d001      	beq.n	8003ed4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e055      	b.n	8003f80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee4:	e01d      	b.n	8003f22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d108      	bne.n	8003efe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003eec:	7bbb      	ldrb	r3, [r7, #14]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d105      	bne.n	8003efe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ef2:	7b7b      	ldrb	r3, [r7, #13]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d102      	bne.n	8003efe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ef8:	7b3b      	ldrb	r3, [r7, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e03e      	b.n	8003f80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2202      	movs	r2, #2
 8003f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_TIM_Encoder_Start+0xc4>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d008      	beq.n	8003f40 <HAL_TIM_Encoder_Start+0xd4>
 8003f2e:	e00f      	b.n	8003f50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f8c5 	bl	80040c8 <TIM_CCxChannelCmd>
      break;
 8003f3e:	e016      	b.n	8003f6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2201      	movs	r2, #1
 8003f46:	2104      	movs	r1, #4
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 f8bd 	bl	80040c8 <TIM_CCxChannelCmd>
      break;
 8003f4e:	e00e      	b.n	8003f6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2201      	movs	r2, #1
 8003f56:	2100      	movs	r1, #0
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 f8b5 	bl	80040c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2201      	movs	r2, #1
 8003f64:	2104      	movs	r1, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f8ae 	bl	80040c8 <TIM_CCxChannelCmd>
      break;
 8003f6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a40      	ldr	r2, [pc, #256]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00f      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a3d      	ldr	r2, [pc, #244]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d007      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3b      	ldr	r2, [pc, #236]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0x40>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3a      	ldr	r2, [pc, #232]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d108      	bne.n	8003fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a2f      	ldr	r2, [pc, #188]	; (800409c <TIM_Base_SetConfig+0x114>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d02b      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d027      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2c      	ldr	r2, [pc, #176]	; (80040a0 <TIM_Base_SetConfig+0x118>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d023      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <TIM_Base_SetConfig+0x11c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01f      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <TIM_Base_SetConfig+0x120>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01b      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <TIM_Base_SetConfig+0x124>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d017      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a28      	ldr	r2, [pc, #160]	; (80040b0 <TIM_Base_SetConfig+0x128>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a27      	ldr	r2, [pc, #156]	; (80040b4 <TIM_Base_SetConfig+0x12c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <TIM_Base_SetConfig+0x130>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a25      	ldr	r2, [pc, #148]	; (80040bc <TIM_Base_SetConfig+0x134>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a24      	ldr	r2, [pc, #144]	; (80040c0 <TIM_Base_SetConfig+0x138>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a23      	ldr	r2, [pc, #140]	; (80040c4 <TIM_Base_SetConfig+0x13c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <TIM_Base_SetConfig+0x114>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0xf8>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <TIM_Base_SetConfig+0x124>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d103      	bne.n	8004088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	615a      	str	r2, [r3, #20]
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40010400 	.word	0x40010400
 80040b0:	40014000 	.word	0x40014000
 80040b4:	40014400 	.word	0x40014400
 80040b8:	40014800 	.word	0x40014800
 80040bc:	40001800 	.word	0x40001800
 80040c0:	40001c00 	.word	0x40001c00
 80040c4:	40002000 	.word	0x40002000

080040c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2201      	movs	r2, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	401a      	ands	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e06d      	b.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a30      	ldr	r2, [pc, #192]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2f      	ldr	r2, [pc, #188]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004178:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800419e:	d01d      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1c      	ldr	r2, [pc, #112]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a15      	ldr	r2, [pc, #84]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a16      	ldr	r2, [pc, #88]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d10c      	bne.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	40010000 	.word	0x40010000
 8004218:	40010400 	.word	0x40010400
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40001800 	.word	0x40001800

08004230 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e040      	b.n	80042c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fd faa6 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2224      	movs	r2, #36	; 0x24
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0201 	bic.w	r2, r2, #1
 800426c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f8b0 	bl	80043d4 <UART_SetConfig>
 8004274:	4603      	mov	r3, r0
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e022      	b.n	80042c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 fb08 	bl	800489c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800429a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0201 	orr.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb8f 	bl	80049e0 <UART_CheckIdleState>
 80042c2:	4603      	mov	r3, r0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d171      	bne.n	80043c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Transmit+0x24>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e06a      	b.n	80043ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	; 0x21
 8004300:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004302:	f7fd fcb5 	bl	8001c70 <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004320:	d108      	bne.n	8004334 <HAL_UART_Transmit+0x68>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e003      	b.n	800433c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433c:	e02c      	b.n	8004398 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 fb80 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e038      	b.n	80043ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	3302      	adds	r3, #2
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e007      	b.n	8004386 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3301      	adds	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1cc      	bne.n	800433e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2140      	movs	r1, #64	; 0x40
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 fb4d 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e005      	b.n	80043ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3720      	adds	r7, #32
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4ba6      	ldr	r3, [pc, #664]	; (8004698 <UART_SetConfig+0x2c4>)
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	430b      	orrs	r3, r1
 800440a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a94      	ldr	r2, [pc, #592]	; (800469c <UART_SetConfig+0x2c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d120      	bne.n	8004492 <UART_SetConfig+0xbe>
 8004450:	4b93      	ldr	r3, [pc, #588]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b03      	cmp	r3, #3
 800445c:	d816      	bhi.n	800448c <UART_SetConfig+0xb8>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <UART_SetConfig+0x90>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	08004475 	.word	0x08004475
 8004468:	08004481 	.word	0x08004481
 800446c:	0800447b 	.word	0x0800447b
 8004470:	08004487 	.word	0x08004487
 8004474:	2301      	movs	r3, #1
 8004476:	77fb      	strb	r3, [r7, #31]
 8004478:	e150      	b.n	800471c <UART_SetConfig+0x348>
 800447a:	2302      	movs	r3, #2
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e14d      	b.n	800471c <UART_SetConfig+0x348>
 8004480:	2304      	movs	r3, #4
 8004482:	77fb      	strb	r3, [r7, #31]
 8004484:	e14a      	b.n	800471c <UART_SetConfig+0x348>
 8004486:	2308      	movs	r3, #8
 8004488:	77fb      	strb	r3, [r7, #31]
 800448a:	e147      	b.n	800471c <UART_SetConfig+0x348>
 800448c:	2310      	movs	r3, #16
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e144      	b.n	800471c <UART_SetConfig+0x348>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a83      	ldr	r2, [pc, #524]	; (80046a4 <UART_SetConfig+0x2d0>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d132      	bne.n	8004502 <UART_SetConfig+0x12e>
 800449c:	4b80      	ldr	r3, [pc, #512]	; (80046a0 <UART_SetConfig+0x2cc>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d828      	bhi.n	80044fc <UART_SetConfig+0x128>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <UART_SetConfig+0xdc>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	080044fd 	.word	0x080044fd
 80044c0:	080044f1 	.word	0x080044f1
 80044c4:	080044fd 	.word	0x080044fd
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	080044fd 	.word	0x080044fd
 80044d0:	080044eb 	.word	0x080044eb
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	080044fd 	.word	0x080044fd
 80044dc:	080044fd 	.word	0x080044fd
 80044e0:	080044f7 	.word	0x080044f7
 80044e4:	2300      	movs	r3, #0
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e118      	b.n	800471c <UART_SetConfig+0x348>
 80044ea:	2302      	movs	r3, #2
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e115      	b.n	800471c <UART_SetConfig+0x348>
 80044f0:	2304      	movs	r3, #4
 80044f2:	77fb      	strb	r3, [r7, #31]
 80044f4:	e112      	b.n	800471c <UART_SetConfig+0x348>
 80044f6:	2308      	movs	r3, #8
 80044f8:	77fb      	strb	r3, [r7, #31]
 80044fa:	e10f      	b.n	800471c <UART_SetConfig+0x348>
 80044fc:	2310      	movs	r3, #16
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e10c      	b.n	800471c <UART_SetConfig+0x348>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a68      	ldr	r2, [pc, #416]	; (80046a8 <UART_SetConfig+0x2d4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d120      	bne.n	800454e <UART_SetConfig+0x17a>
 800450c:	4b64      	ldr	r3, [pc, #400]	; (80046a0 <UART_SetConfig+0x2cc>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d013      	beq.n	8004542 <UART_SetConfig+0x16e>
 800451a:	2b30      	cmp	r3, #48	; 0x30
 800451c:	d814      	bhi.n	8004548 <UART_SetConfig+0x174>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d009      	beq.n	8004536 <UART_SetConfig+0x162>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d810      	bhi.n	8004548 <UART_SetConfig+0x174>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <UART_SetConfig+0x15c>
 800452a:	2b10      	cmp	r3, #16
 800452c:	d006      	beq.n	800453c <UART_SetConfig+0x168>
 800452e:	e00b      	b.n	8004548 <UART_SetConfig+0x174>
 8004530:	2300      	movs	r3, #0
 8004532:	77fb      	strb	r3, [r7, #31]
 8004534:	e0f2      	b.n	800471c <UART_SetConfig+0x348>
 8004536:	2302      	movs	r3, #2
 8004538:	77fb      	strb	r3, [r7, #31]
 800453a:	e0ef      	b.n	800471c <UART_SetConfig+0x348>
 800453c:	2304      	movs	r3, #4
 800453e:	77fb      	strb	r3, [r7, #31]
 8004540:	e0ec      	b.n	800471c <UART_SetConfig+0x348>
 8004542:	2308      	movs	r3, #8
 8004544:	77fb      	strb	r3, [r7, #31]
 8004546:	e0e9      	b.n	800471c <UART_SetConfig+0x348>
 8004548:	2310      	movs	r3, #16
 800454a:	77fb      	strb	r3, [r7, #31]
 800454c:	e0e6      	b.n	800471c <UART_SetConfig+0x348>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a56      	ldr	r2, [pc, #344]	; (80046ac <UART_SetConfig+0x2d8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d120      	bne.n	800459a <UART_SetConfig+0x1c6>
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <UART_SetConfig+0x2cc>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004562:	2bc0      	cmp	r3, #192	; 0xc0
 8004564:	d013      	beq.n	800458e <UART_SetConfig+0x1ba>
 8004566:	2bc0      	cmp	r3, #192	; 0xc0
 8004568:	d814      	bhi.n	8004594 <UART_SetConfig+0x1c0>
 800456a:	2b80      	cmp	r3, #128	; 0x80
 800456c:	d009      	beq.n	8004582 <UART_SetConfig+0x1ae>
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d810      	bhi.n	8004594 <UART_SetConfig+0x1c0>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <UART_SetConfig+0x1a8>
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d006      	beq.n	8004588 <UART_SetConfig+0x1b4>
 800457a:	e00b      	b.n	8004594 <UART_SetConfig+0x1c0>
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
 8004580:	e0cc      	b.n	800471c <UART_SetConfig+0x348>
 8004582:	2302      	movs	r3, #2
 8004584:	77fb      	strb	r3, [r7, #31]
 8004586:	e0c9      	b.n	800471c <UART_SetConfig+0x348>
 8004588:	2304      	movs	r3, #4
 800458a:	77fb      	strb	r3, [r7, #31]
 800458c:	e0c6      	b.n	800471c <UART_SetConfig+0x348>
 800458e:	2308      	movs	r3, #8
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e0c3      	b.n	800471c <UART_SetConfig+0x348>
 8004594:	2310      	movs	r3, #16
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e0c0      	b.n	800471c <UART_SetConfig+0x348>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a44      	ldr	r2, [pc, #272]	; (80046b0 <UART_SetConfig+0x2dc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d125      	bne.n	80045f0 <UART_SetConfig+0x21c>
 80045a4:	4b3e      	ldr	r3, [pc, #248]	; (80046a0 <UART_SetConfig+0x2cc>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b2:	d017      	beq.n	80045e4 <UART_SetConfig+0x210>
 80045b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045b8:	d817      	bhi.n	80045ea <UART_SetConfig+0x216>
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045be:	d00b      	beq.n	80045d8 <UART_SetConfig+0x204>
 80045c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045c4:	d811      	bhi.n	80045ea <UART_SetConfig+0x216>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <UART_SetConfig+0x1fe>
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d006      	beq.n	80045de <UART_SetConfig+0x20a>
 80045d0:	e00b      	b.n	80045ea <UART_SetConfig+0x216>
 80045d2:	2300      	movs	r3, #0
 80045d4:	77fb      	strb	r3, [r7, #31]
 80045d6:	e0a1      	b.n	800471c <UART_SetConfig+0x348>
 80045d8:	2302      	movs	r3, #2
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e09e      	b.n	800471c <UART_SetConfig+0x348>
 80045de:	2304      	movs	r3, #4
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e09b      	b.n	800471c <UART_SetConfig+0x348>
 80045e4:	2308      	movs	r3, #8
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e098      	b.n	800471c <UART_SetConfig+0x348>
 80045ea:	2310      	movs	r3, #16
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e095      	b.n	800471c <UART_SetConfig+0x348>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a2f      	ldr	r2, [pc, #188]	; (80046b4 <UART_SetConfig+0x2e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d125      	bne.n	8004646 <UART_SetConfig+0x272>
 80045fa:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <UART_SetConfig+0x2cc>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004608:	d017      	beq.n	800463a <UART_SetConfig+0x266>
 800460a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800460e:	d817      	bhi.n	8004640 <UART_SetConfig+0x26c>
 8004610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004614:	d00b      	beq.n	800462e <UART_SetConfig+0x25a>
 8004616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461a:	d811      	bhi.n	8004640 <UART_SetConfig+0x26c>
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <UART_SetConfig+0x254>
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d006      	beq.n	8004634 <UART_SetConfig+0x260>
 8004626:	e00b      	b.n	8004640 <UART_SetConfig+0x26c>
 8004628:	2301      	movs	r3, #1
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e076      	b.n	800471c <UART_SetConfig+0x348>
 800462e:	2302      	movs	r3, #2
 8004630:	77fb      	strb	r3, [r7, #31]
 8004632:	e073      	b.n	800471c <UART_SetConfig+0x348>
 8004634:	2304      	movs	r3, #4
 8004636:	77fb      	strb	r3, [r7, #31]
 8004638:	e070      	b.n	800471c <UART_SetConfig+0x348>
 800463a:	2308      	movs	r3, #8
 800463c:	77fb      	strb	r3, [r7, #31]
 800463e:	e06d      	b.n	800471c <UART_SetConfig+0x348>
 8004640:	2310      	movs	r3, #16
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e06a      	b.n	800471c <UART_SetConfig+0x348>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	; (80046b8 <UART_SetConfig+0x2e4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d138      	bne.n	80046c2 <UART_SetConfig+0x2ee>
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <UART_SetConfig+0x2cc>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800465a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800465e:	d017      	beq.n	8004690 <UART_SetConfig+0x2bc>
 8004660:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004664:	d82a      	bhi.n	80046bc <UART_SetConfig+0x2e8>
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466a:	d00b      	beq.n	8004684 <UART_SetConfig+0x2b0>
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d824      	bhi.n	80046bc <UART_SetConfig+0x2e8>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <UART_SetConfig+0x2aa>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467a:	d006      	beq.n	800468a <UART_SetConfig+0x2b6>
 800467c:	e01e      	b.n	80046bc <UART_SetConfig+0x2e8>
 800467e:	2300      	movs	r3, #0
 8004680:	77fb      	strb	r3, [r7, #31]
 8004682:	e04b      	b.n	800471c <UART_SetConfig+0x348>
 8004684:	2302      	movs	r3, #2
 8004686:	77fb      	strb	r3, [r7, #31]
 8004688:	e048      	b.n	800471c <UART_SetConfig+0x348>
 800468a:	2304      	movs	r3, #4
 800468c:	77fb      	strb	r3, [r7, #31]
 800468e:	e045      	b.n	800471c <UART_SetConfig+0x348>
 8004690:	2308      	movs	r3, #8
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e042      	b.n	800471c <UART_SetConfig+0x348>
 8004696:	bf00      	nop
 8004698:	efff69f3 	.word	0xefff69f3
 800469c:	40011000 	.word	0x40011000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40004400 	.word	0x40004400
 80046a8:	40004800 	.word	0x40004800
 80046ac:	40004c00 	.word	0x40004c00
 80046b0:	40005000 	.word	0x40005000
 80046b4:	40011400 	.word	0x40011400
 80046b8:	40007800 	.word	0x40007800
 80046bc:	2310      	movs	r3, #16
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e02c      	b.n	800471c <UART_SetConfig+0x348>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a72      	ldr	r2, [pc, #456]	; (8004890 <UART_SetConfig+0x4bc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d125      	bne.n	8004718 <UART_SetConfig+0x344>
 80046cc:	4b71      	ldr	r3, [pc, #452]	; (8004894 <UART_SetConfig+0x4c0>)
 80046ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046da:	d017      	beq.n	800470c <UART_SetConfig+0x338>
 80046dc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046e0:	d817      	bhi.n	8004712 <UART_SetConfig+0x33e>
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d00b      	beq.n	8004700 <UART_SetConfig+0x32c>
 80046e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ec:	d811      	bhi.n	8004712 <UART_SetConfig+0x33e>
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <UART_SetConfig+0x326>
 80046f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046f6:	d006      	beq.n	8004706 <UART_SetConfig+0x332>
 80046f8:	e00b      	b.n	8004712 <UART_SetConfig+0x33e>
 80046fa:	2300      	movs	r3, #0
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e00d      	b.n	800471c <UART_SetConfig+0x348>
 8004700:	2302      	movs	r3, #2
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e00a      	b.n	800471c <UART_SetConfig+0x348>
 8004706:	2304      	movs	r3, #4
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e007      	b.n	800471c <UART_SetConfig+0x348>
 800470c:	2308      	movs	r3, #8
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e004      	b.n	800471c <UART_SetConfig+0x348>
 8004712:	2310      	movs	r3, #16
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e001      	b.n	800471c <UART_SetConfig+0x348>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d15b      	bne.n	80047de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004726:	7ffb      	ldrb	r3, [r7, #31]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d828      	bhi.n	800477e <UART_SetConfig+0x3aa>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x360>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fe feca 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 800475c:	61b8      	str	r0, [r7, #24]
        break;
 800475e:	e013      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fe feda 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 8004764:	61b8      	str	r0, [r7, #24]
        break;
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <UART_SetConfig+0x4c4>)
 800476a:	61bb      	str	r3, [r7, #24]
        break;
 800476c:	e00c      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe fdad 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 8004772:	61b8      	str	r0, [r7, #24]
        break;
 8004774:	e008      	b.n	8004788 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	61bb      	str	r3, [r7, #24]
        break;
 800477c:	e004      	b.n	8004788 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	77bb      	strb	r3, [r7, #30]
        break;
 8004786:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d074      	beq.n	8004878 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	005a      	lsls	r2, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	085b      	lsrs	r3, r3, #1
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d916      	bls.n	80047d8 <UART_SetConfig+0x404>
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b0:	d212      	bcs.n	80047d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	f023 030f 	bic.w	r3, r3, #15
 80047ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	89fa      	ldrh	r2, [r7, #14]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e04f      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77bb      	strb	r3, [r7, #30]
 80047dc:	e04c      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d828      	bhi.n	8004836 <UART_SetConfig+0x462>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x418>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004837 	.word	0x08004837
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004837 	.word	0x08004837
 8004804:	08004837 	.word	0x08004837
 8004808:	08004837 	.word	0x08004837
 800480c:	0800482f 	.word	0x0800482f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe fe6e 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8004814:	61b8      	str	r0, [r7, #24]
        break;
 8004816:	e013      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe fe7e 	bl	8003518 <HAL_RCC_GetPCLK2Freq>
 800481c:	61b8      	str	r0, [r7, #24]
        break;
 800481e:	e00f      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004820:	4b1d      	ldr	r3, [pc, #116]	; (8004898 <UART_SetConfig+0x4c4>)
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e00c      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004826:	f7fe fd51 	bl	80032cc <HAL_RCC_GetSysClockFreq>
 800482a:	61b8      	str	r0, [r7, #24]
        break;
 800482c:	e008      	b.n	8004840 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004832:	61bb      	str	r3, [r7, #24]
        break;
 8004834:	e004      	b.n	8004840 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	77bb      	strb	r3, [r7, #30]
        break;
 800483e:	bf00      	nop
    }

    if (pclk != 0U)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d018      	beq.n	8004878 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	085a      	lsrs	r2, r3, #1
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	441a      	add	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	fbb2 f3f3 	udiv	r3, r2, r3
 8004858:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d909      	bls.n	8004874 <UART_SetConfig+0x4a0>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004866:	d205      	bcs.n	8004874 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e001      	b.n	8004878 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004884:	7fbb      	ldrb	r3, [r7, #30]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40007c00 	.word	0x40007c00
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400

0800489c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	f003 0301 	and.w	r3, r3, #1
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d01a      	beq.n	80049b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499a:	d10a      	bne.n	80049b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	605a      	str	r2, [r3, #4]
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049f0:	f7fd f93e 	bl	8001c70 <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d10e      	bne.n	8004a22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f81b 	bl	8004a4e <UART_WaitOnFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e011      	b.n	8004a46 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b09c      	sub	sp, #112	; 0x70
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5e:	e0a7      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	f000 80a3 	beq.w	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6a:	f7fd f901 	bl	8001c70 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d302      	bcc.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d13f      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a94:	667b      	str	r3, [r7, #100]	; 0x64
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e6      	bne.n	8004a80 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3308      	adds	r3, #8
 8004ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3308      	adds	r3, #8
 8004ad0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ad2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e5      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e068      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d050      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d148      	bne.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b26:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	461a      	mov	r2, r3
 8004b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
 8004b48:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1e6      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3308      	adds	r3, #8
 8004b78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b7a:	623a      	str	r2, [r7, #32]
 8004b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e010      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	f43f af48 	beq.w	8004a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3770      	adds	r7, #112	; 0x70
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bdc:	b084      	sub	sp, #16
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	f107 001c 	add.w	r0, r7, #28
 8004bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d120      	bne.n	8004c36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <USB_CoreInit+0xac>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa96 	bl	800515c <USB_CoreReset>
 8004c30:	4603      	mov	r3, r0
 8004c32:	73fb      	strb	r3, [r7, #15]
 8004c34:	e010      	b.n	8004c58 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa8a 	bl	800515c <USB_CoreReset>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10b      	bne.n	8004c76 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f043 0206 	orr.w	r2, r3, #6
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f043 0220 	orr.w	r2, r3, #32
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c82:	b004      	add	sp, #16
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	ffbdffbf 	.word	0xffbdffbf

08004c8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 0201 	bic.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d115      	bne.n	8004cfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cdc:	2001      	movs	r0, #1
 8004cde:	f7fc ffd3 	bl	8001c88 <HAL_Delay>
      ms++;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa29 	bl	8005140 <USB_GetMode>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d01e      	beq.n	8004d32 <USB_SetCurrentMode+0x84>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b31      	cmp	r3, #49	; 0x31
 8004cf8:	d9f0      	bls.n	8004cdc <USB_SetCurrentMode+0x2e>
 8004cfa:	e01a      	b.n	8004d32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d115      	bne.n	8004d2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d0e:	2001      	movs	r0, #1
 8004d10:	f7fc ffba 	bl	8001c88 <HAL_Delay>
      ms++;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fa10 	bl	8005140 <USB_GetMode>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <USB_SetCurrentMode+0x84>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b31      	cmp	r3, #49	; 0x31
 8004d2a:	d9f0      	bls.n	8004d0e <USB_SetCurrentMode+0x60>
 8004d2c:	e001      	b.n	8004d32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e005      	b.n	8004d3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b32      	cmp	r3, #50	; 0x32
 8004d36:	d101      	bne.n	8004d3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d48:	b084      	sub	sp, #16
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e009      	b.n	8004d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	3340      	adds	r3, #64	; 0x40
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	2200      	movs	r2, #0
 8004d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0e      	cmp	r3, #14
 8004d80:	d9f2      	bls.n	8004d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d11c      	bne.n	8004dc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d96:	f043 0302 	orr.w	r3, r3, #2
 8004d9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e005      	b.n	8004dce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de0:	4619      	mov	r1, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de8:	461a      	mov	r2, r3
 8004dea:	680b      	ldr	r3, [r1, #0]
 8004dec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10c      	bne.n	8004e0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f965 	bl	80050cc <USB_SetDevSpeed>
 8004e02:	e008      	b.n	8004e16 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f960 	bl	80050cc <USB_SetDevSpeed>
 8004e0c:	e003      	b.n	8004e16 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e0e:	2103      	movs	r1, #3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f95b 	bl	80050cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e16:	2110      	movs	r1, #16
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f8f3 	bl	8005004 <USB_FlushTxFifo>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f91f 	bl	800506c <USB_FlushRxFifo>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2300      	movs	r3, #0
 8004e42:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e56:	461a      	mov	r2, r3
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e043      	b.n	8004eea <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e78:	d118      	bne.n	8004eac <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e013      	b.n	8004ebe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	e008      	b.n	8004ebe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	015a      	lsls	r2, r3, #5
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eca:	461a      	mov	r2, r3
 8004ecc:	2300      	movs	r3, #0
 8004ece:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	461a      	mov	r2, r3
 8004ede:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ee2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d3b7      	bcc.n	8004e62 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e043      	b.n	8004f80 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0e:	d118      	bne.n	8004f42 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10a      	bne.n	8004f2c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	461a      	mov	r2, r3
 8004f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e013      	b.n	8004f54 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	e008      	b.n	8004f54 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	2300      	movs	r3, #0
 8004f52:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	2300      	movs	r3, #0
 8004f64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f78:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b7      	bcc.n	8004ef8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fa8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f043 0210 	orr.w	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699a      	ldr	r2, [r3, #24]
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <USB_DevInit+0x2b4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	f043 0208 	orr.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <USB_DevInit+0x2b8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ff8:	b004      	add	sp, #16
 8004ffa:	4770      	bx	lr
 8004ffc:	803c3800 	.word	0x803c3800
 8005000:	40000004 	.word	0x40000004

08005004 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	3301      	adds	r3, #1
 8005016:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <USB_FlushTxFifo+0x64>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d901      	bls.n	8005024 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e01b      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	daf2      	bge.n	8005012 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	019b      	lsls	r3, r3, #6
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a08      	ldr	r2, [pc, #32]	; (8005068 <USB_FlushTxFifo+0x64>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d901      	bls.n	800504e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e006      	b.n	800505c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b20      	cmp	r3, #32
 8005058:	d0f0      	beq.n	800503c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	00030d40 	.word	0x00030d40

0800506c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <USB_FlushRxFifo+0x5c>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e018      	b.n	80050bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	2b00      	cmp	r3, #0
 8005090:	daf2      	bge.n	8005078 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2210      	movs	r2, #16
 800509a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3301      	adds	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <USB_FlushRxFifo+0x5c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e006      	b.n	80050bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d0f0      	beq.n	800509c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00030d40 	.word	0x00030d40

080050cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	78fb      	ldrb	r3, [r7, #3]
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050ec:	4313      	orrs	r3, r2
 80050ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005118:	f023 0303 	bic.w	r3, r3, #3
 800511c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800512c:	f043 0302 	orr.w	r3, r3, #2
 8005130:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	f003 0301 	and.w	r3, r3, #1
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <USB_CoreReset+0x64>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d901      	bls.n	800517a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e01b      	b.n	80051b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	daf2      	bge.n	8005168 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f043 0201 	orr.w	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	3301      	adds	r3, #1
 8005196:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <USB_CoreReset+0x64>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d0f0      	beq.n	8005192 <USB_CoreReset+0x36>

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	00030d40 	.word	0x00030d40

080051c4 <__errno>:
 80051c4:	4b01      	ldr	r3, [pc, #4]	; (80051cc <__errno+0x8>)
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	2000000c 	.word	0x2000000c

080051d0 <__libc_init_array>:
 80051d0:	b570      	push	{r4, r5, r6, lr}
 80051d2:	4d0d      	ldr	r5, [pc, #52]	; (8005208 <__libc_init_array+0x38>)
 80051d4:	4c0d      	ldr	r4, [pc, #52]	; (800520c <__libc_init_array+0x3c>)
 80051d6:	1b64      	subs	r4, r4, r5
 80051d8:	10a4      	asrs	r4, r4, #2
 80051da:	2600      	movs	r6, #0
 80051dc:	42a6      	cmp	r6, r4
 80051de:	d109      	bne.n	80051f4 <__libc_init_array+0x24>
 80051e0:	4d0b      	ldr	r5, [pc, #44]	; (8005210 <__libc_init_array+0x40>)
 80051e2:	4c0c      	ldr	r4, [pc, #48]	; (8005214 <__libc_init_array+0x44>)
 80051e4:	f002 ff04 	bl	8007ff0 <_init>
 80051e8:	1b64      	subs	r4, r4, r5
 80051ea:	10a4      	asrs	r4, r4, #2
 80051ec:	2600      	movs	r6, #0
 80051ee:	42a6      	cmp	r6, r4
 80051f0:	d105      	bne.n	80051fe <__libc_init_array+0x2e>
 80051f2:	bd70      	pop	{r4, r5, r6, pc}
 80051f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f8:	4798      	blx	r3
 80051fa:	3601      	adds	r6, #1
 80051fc:	e7ee      	b.n	80051dc <__libc_init_array+0xc>
 80051fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005202:	4798      	blx	r3
 8005204:	3601      	adds	r6, #1
 8005206:	e7f2      	b.n	80051ee <__libc_init_array+0x1e>
 8005208:	0800843c 	.word	0x0800843c
 800520c:	0800843c 	.word	0x0800843c
 8005210:	0800843c 	.word	0x0800843c
 8005214:	08008440 	.word	0x08008440

08005218 <memset>:
 8005218:	4402      	add	r2, r0
 800521a:	4603      	mov	r3, r0
 800521c:	4293      	cmp	r3, r2
 800521e:	d100      	bne.n	8005222 <memset+0xa>
 8005220:	4770      	bx	lr
 8005222:	f803 1b01 	strb.w	r1, [r3], #1
 8005226:	e7f9      	b.n	800521c <memset+0x4>

08005228 <__cvt>:
 8005228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	ec55 4b10 	vmov	r4, r5, d0
 8005230:	2d00      	cmp	r5, #0
 8005232:	460e      	mov	r6, r1
 8005234:	4619      	mov	r1, r3
 8005236:	462b      	mov	r3, r5
 8005238:	bfbb      	ittet	lt
 800523a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800523e:	461d      	movlt	r5, r3
 8005240:	2300      	movge	r3, #0
 8005242:	232d      	movlt	r3, #45	; 0x2d
 8005244:	700b      	strb	r3, [r1, #0]
 8005246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005248:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800524c:	4691      	mov	r9, r2
 800524e:	f023 0820 	bic.w	r8, r3, #32
 8005252:	bfbc      	itt	lt
 8005254:	4622      	movlt	r2, r4
 8005256:	4614      	movlt	r4, r2
 8005258:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800525c:	d005      	beq.n	800526a <__cvt+0x42>
 800525e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005262:	d100      	bne.n	8005266 <__cvt+0x3e>
 8005264:	3601      	adds	r6, #1
 8005266:	2102      	movs	r1, #2
 8005268:	e000      	b.n	800526c <__cvt+0x44>
 800526a:	2103      	movs	r1, #3
 800526c:	ab03      	add	r3, sp, #12
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	ab02      	add	r3, sp, #8
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	ec45 4b10 	vmov	d0, r4, r5
 8005278:	4653      	mov	r3, sl
 800527a:	4632      	mov	r2, r6
 800527c:	f000 fcec 	bl	8005c58 <_dtoa_r>
 8005280:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005284:	4607      	mov	r7, r0
 8005286:	d102      	bne.n	800528e <__cvt+0x66>
 8005288:	f019 0f01 	tst.w	r9, #1
 800528c:	d022      	beq.n	80052d4 <__cvt+0xac>
 800528e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005292:	eb07 0906 	add.w	r9, r7, r6
 8005296:	d110      	bne.n	80052ba <__cvt+0x92>
 8005298:	783b      	ldrb	r3, [r7, #0]
 800529a:	2b30      	cmp	r3, #48	; 0x30
 800529c:	d10a      	bne.n	80052b4 <__cvt+0x8c>
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	4620      	mov	r0, r4
 80052a4:	4629      	mov	r1, r5
 80052a6:	f7fb fc2f 	bl	8000b08 <__aeabi_dcmpeq>
 80052aa:	b918      	cbnz	r0, 80052b4 <__cvt+0x8c>
 80052ac:	f1c6 0601 	rsb	r6, r6, #1
 80052b0:	f8ca 6000 	str.w	r6, [sl]
 80052b4:	f8da 3000 	ldr.w	r3, [sl]
 80052b8:	4499      	add	r9, r3
 80052ba:	2200      	movs	r2, #0
 80052bc:	2300      	movs	r3, #0
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fb fc21 	bl	8000b08 <__aeabi_dcmpeq>
 80052c6:	b108      	cbz	r0, 80052cc <__cvt+0xa4>
 80052c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052cc:	2230      	movs	r2, #48	; 0x30
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	454b      	cmp	r3, r9
 80052d2:	d307      	bcc.n	80052e4 <__cvt+0xbc>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052d8:	1bdb      	subs	r3, r3, r7
 80052da:	4638      	mov	r0, r7
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	b004      	add	sp, #16
 80052e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	9103      	str	r1, [sp, #12]
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e7f0      	b.n	80052ce <__cvt+0xa6>

080052ec <__exponent>:
 80052ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ee:	4603      	mov	r3, r0
 80052f0:	2900      	cmp	r1, #0
 80052f2:	bfb8      	it	lt
 80052f4:	4249      	neglt	r1, r1
 80052f6:	f803 2b02 	strb.w	r2, [r3], #2
 80052fa:	bfb4      	ite	lt
 80052fc:	222d      	movlt	r2, #45	; 0x2d
 80052fe:	222b      	movge	r2, #43	; 0x2b
 8005300:	2909      	cmp	r1, #9
 8005302:	7042      	strb	r2, [r0, #1]
 8005304:	dd2a      	ble.n	800535c <__exponent+0x70>
 8005306:	f10d 0407 	add.w	r4, sp, #7
 800530a:	46a4      	mov	ip, r4
 800530c:	270a      	movs	r7, #10
 800530e:	46a6      	mov	lr, r4
 8005310:	460a      	mov	r2, r1
 8005312:	fb91 f6f7 	sdiv	r6, r1, r7
 8005316:	fb07 1516 	mls	r5, r7, r6, r1
 800531a:	3530      	adds	r5, #48	; 0x30
 800531c:	2a63      	cmp	r2, #99	; 0x63
 800531e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005322:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005326:	4631      	mov	r1, r6
 8005328:	dcf1      	bgt.n	800530e <__exponent+0x22>
 800532a:	3130      	adds	r1, #48	; 0x30
 800532c:	f1ae 0502 	sub.w	r5, lr, #2
 8005330:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005334:	1c44      	adds	r4, r0, #1
 8005336:	4629      	mov	r1, r5
 8005338:	4561      	cmp	r1, ip
 800533a:	d30a      	bcc.n	8005352 <__exponent+0x66>
 800533c:	f10d 0209 	add.w	r2, sp, #9
 8005340:	eba2 020e 	sub.w	r2, r2, lr
 8005344:	4565      	cmp	r5, ip
 8005346:	bf88      	it	hi
 8005348:	2200      	movhi	r2, #0
 800534a:	4413      	add	r3, r2
 800534c:	1a18      	subs	r0, r3, r0
 800534e:	b003      	add	sp, #12
 8005350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005356:	f804 2f01 	strb.w	r2, [r4, #1]!
 800535a:	e7ed      	b.n	8005338 <__exponent+0x4c>
 800535c:	2330      	movs	r3, #48	; 0x30
 800535e:	3130      	adds	r1, #48	; 0x30
 8005360:	7083      	strb	r3, [r0, #2]
 8005362:	70c1      	strb	r1, [r0, #3]
 8005364:	1d03      	adds	r3, r0, #4
 8005366:	e7f1      	b.n	800534c <__exponent+0x60>

08005368 <_printf_float>:
 8005368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800536c:	ed2d 8b02 	vpush	{d8}
 8005370:	b08d      	sub	sp, #52	; 0x34
 8005372:	460c      	mov	r4, r1
 8005374:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005378:	4616      	mov	r6, r2
 800537a:	461f      	mov	r7, r3
 800537c:	4605      	mov	r5, r0
 800537e:	f001 fa59 	bl	8006834 <_localeconv_r>
 8005382:	f8d0 a000 	ldr.w	sl, [r0]
 8005386:	4650      	mov	r0, sl
 8005388:	f7fa ff42 	bl	8000210 <strlen>
 800538c:	2300      	movs	r3, #0
 800538e:	930a      	str	r3, [sp, #40]	; 0x28
 8005390:	6823      	ldr	r3, [r4, #0]
 8005392:	9305      	str	r3, [sp, #20]
 8005394:	f8d8 3000 	ldr.w	r3, [r8]
 8005398:	f894 b018 	ldrb.w	fp, [r4, #24]
 800539c:	3307      	adds	r3, #7
 800539e:	f023 0307 	bic.w	r3, r3, #7
 80053a2:	f103 0208 	add.w	r2, r3, #8
 80053a6:	f8c8 2000 	str.w	r2, [r8]
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053b2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053ba:	9307      	str	r3, [sp, #28]
 80053bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80053c0:	ee08 0a10 	vmov	s16, r0
 80053c4:	4b9f      	ldr	r3, [pc, #636]	; (8005644 <_printf_float+0x2dc>)
 80053c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053ce:	f7fb fbcd 	bl	8000b6c <__aeabi_dcmpun>
 80053d2:	bb88      	cbnz	r0, 8005438 <_printf_float+0xd0>
 80053d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d8:	4b9a      	ldr	r3, [pc, #616]	; (8005644 <_printf_float+0x2dc>)
 80053da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053de:	f7fb fba7 	bl	8000b30 <__aeabi_dcmple>
 80053e2:	bb48      	cbnz	r0, 8005438 <_printf_float+0xd0>
 80053e4:	2200      	movs	r2, #0
 80053e6:	2300      	movs	r3, #0
 80053e8:	4640      	mov	r0, r8
 80053ea:	4649      	mov	r1, r9
 80053ec:	f7fb fb96 	bl	8000b1c <__aeabi_dcmplt>
 80053f0:	b110      	cbz	r0, 80053f8 <_printf_float+0x90>
 80053f2:	232d      	movs	r3, #45	; 0x2d
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	4b93      	ldr	r3, [pc, #588]	; (8005648 <_printf_float+0x2e0>)
 80053fa:	4894      	ldr	r0, [pc, #592]	; (800564c <_printf_float+0x2e4>)
 80053fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005400:	bf94      	ite	ls
 8005402:	4698      	movls	r8, r3
 8005404:	4680      	movhi	r8, r0
 8005406:	2303      	movs	r3, #3
 8005408:	6123      	str	r3, [r4, #16]
 800540a:	9b05      	ldr	r3, [sp, #20]
 800540c:	f023 0204 	bic.w	r2, r3, #4
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	f04f 0900 	mov.w	r9, #0
 8005416:	9700      	str	r7, [sp, #0]
 8005418:	4633      	mov	r3, r6
 800541a:	aa0b      	add	r2, sp, #44	; 0x2c
 800541c:	4621      	mov	r1, r4
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f9d8 	bl	80057d4 <_printf_common>
 8005424:	3001      	adds	r0, #1
 8005426:	f040 8090 	bne.w	800554a <_printf_float+0x1e2>
 800542a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800542e:	b00d      	add	sp, #52	; 0x34
 8005430:	ecbd 8b02 	vpop	{d8}
 8005434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	4640      	mov	r0, r8
 800543e:	4649      	mov	r1, r9
 8005440:	f7fb fb94 	bl	8000b6c <__aeabi_dcmpun>
 8005444:	b140      	cbz	r0, 8005458 <_printf_float+0xf0>
 8005446:	464b      	mov	r3, r9
 8005448:	2b00      	cmp	r3, #0
 800544a:	bfbc      	itt	lt
 800544c:	232d      	movlt	r3, #45	; 0x2d
 800544e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005452:	487f      	ldr	r0, [pc, #508]	; (8005650 <_printf_float+0x2e8>)
 8005454:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <_printf_float+0x2ec>)
 8005456:	e7d1      	b.n	80053fc <_printf_float+0x94>
 8005458:	6863      	ldr	r3, [r4, #4]
 800545a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800545e:	9206      	str	r2, [sp, #24]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	d13f      	bne.n	80054e4 <_printf_float+0x17c>
 8005464:	2306      	movs	r3, #6
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	9b05      	ldr	r3, [sp, #20]
 800546a:	6861      	ldr	r1, [r4, #4]
 800546c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005470:	2300      	movs	r3, #0
 8005472:	9303      	str	r3, [sp, #12]
 8005474:	ab0a      	add	r3, sp, #40	; 0x28
 8005476:	e9cd b301 	strd	fp, r3, [sp, #4]
 800547a:	ab09      	add	r3, sp, #36	; 0x24
 800547c:	ec49 8b10 	vmov	d0, r8, r9
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	6022      	str	r2, [r4, #0]
 8005484:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005488:	4628      	mov	r0, r5
 800548a:	f7ff fecd 	bl	8005228 <__cvt>
 800548e:	9b06      	ldr	r3, [sp, #24]
 8005490:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005492:	2b47      	cmp	r3, #71	; 0x47
 8005494:	4680      	mov	r8, r0
 8005496:	d108      	bne.n	80054aa <_printf_float+0x142>
 8005498:	1cc8      	adds	r0, r1, #3
 800549a:	db02      	blt.n	80054a2 <_printf_float+0x13a>
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	4299      	cmp	r1, r3
 80054a0:	dd41      	ble.n	8005526 <_printf_float+0x1be>
 80054a2:	f1ab 0b02 	sub.w	fp, fp, #2
 80054a6:	fa5f fb8b 	uxtb.w	fp, fp
 80054aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80054ae:	d820      	bhi.n	80054f2 <_printf_float+0x18a>
 80054b0:	3901      	subs	r1, #1
 80054b2:	465a      	mov	r2, fp
 80054b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054b8:	9109      	str	r1, [sp, #36]	; 0x24
 80054ba:	f7ff ff17 	bl	80052ec <__exponent>
 80054be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054c0:	1813      	adds	r3, r2, r0
 80054c2:	2a01      	cmp	r2, #1
 80054c4:	4681      	mov	r9, r0
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	dc02      	bgt.n	80054d0 <_printf_float+0x168>
 80054ca:	6822      	ldr	r2, [r4, #0]
 80054cc:	07d2      	lsls	r2, r2, #31
 80054ce:	d501      	bpl.n	80054d4 <_printf_float+0x16c>
 80054d0:	3301      	adds	r3, #1
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d09c      	beq.n	8005416 <_printf_float+0xae>
 80054dc:	232d      	movs	r3, #45	; 0x2d
 80054de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e2:	e798      	b.n	8005416 <_printf_float+0xae>
 80054e4:	9a06      	ldr	r2, [sp, #24]
 80054e6:	2a47      	cmp	r2, #71	; 0x47
 80054e8:	d1be      	bne.n	8005468 <_printf_float+0x100>
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1bc      	bne.n	8005468 <_printf_float+0x100>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7b9      	b.n	8005466 <_printf_float+0xfe>
 80054f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054f6:	d118      	bne.n	800552a <_printf_float+0x1c2>
 80054f8:	2900      	cmp	r1, #0
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	dd0b      	ble.n	8005516 <_printf_float+0x1ae>
 80054fe:	6121      	str	r1, [r4, #16]
 8005500:	b913      	cbnz	r3, 8005508 <_printf_float+0x1a0>
 8005502:	6822      	ldr	r2, [r4, #0]
 8005504:	07d0      	lsls	r0, r2, #31
 8005506:	d502      	bpl.n	800550e <_printf_float+0x1a6>
 8005508:	3301      	adds	r3, #1
 800550a:	440b      	add	r3, r1
 800550c:	6123      	str	r3, [r4, #16]
 800550e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005510:	f04f 0900 	mov.w	r9, #0
 8005514:	e7de      	b.n	80054d4 <_printf_float+0x16c>
 8005516:	b913      	cbnz	r3, 800551e <_printf_float+0x1b6>
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	07d2      	lsls	r2, r2, #31
 800551c:	d501      	bpl.n	8005522 <_printf_float+0x1ba>
 800551e:	3302      	adds	r3, #2
 8005520:	e7f4      	b.n	800550c <_printf_float+0x1a4>
 8005522:	2301      	movs	r3, #1
 8005524:	e7f2      	b.n	800550c <_printf_float+0x1a4>
 8005526:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800552c:	4299      	cmp	r1, r3
 800552e:	db05      	blt.n	800553c <_printf_float+0x1d4>
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	6121      	str	r1, [r4, #16]
 8005534:	07d8      	lsls	r0, r3, #31
 8005536:	d5ea      	bpl.n	800550e <_printf_float+0x1a6>
 8005538:	1c4b      	adds	r3, r1, #1
 800553a:	e7e7      	b.n	800550c <_printf_float+0x1a4>
 800553c:	2900      	cmp	r1, #0
 800553e:	bfd4      	ite	le
 8005540:	f1c1 0202 	rsble	r2, r1, #2
 8005544:	2201      	movgt	r2, #1
 8005546:	4413      	add	r3, r2
 8005548:	e7e0      	b.n	800550c <_printf_float+0x1a4>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	055a      	lsls	r2, r3, #21
 800554e:	d407      	bmi.n	8005560 <_printf_float+0x1f8>
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	4642      	mov	r2, r8
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	d12c      	bne.n	80055b8 <_printf_float+0x250>
 800555e:	e764      	b.n	800542a <_printf_float+0xc2>
 8005560:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005564:	f240 80e0 	bls.w	8005728 <_printf_float+0x3c0>
 8005568:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800556c:	2200      	movs	r2, #0
 800556e:	2300      	movs	r3, #0
 8005570:	f7fb faca 	bl	8000b08 <__aeabi_dcmpeq>
 8005574:	2800      	cmp	r0, #0
 8005576:	d034      	beq.n	80055e2 <_printf_float+0x27a>
 8005578:	4a37      	ldr	r2, [pc, #220]	; (8005658 <_printf_float+0x2f0>)
 800557a:	2301      	movs	r3, #1
 800557c:	4631      	mov	r1, r6
 800557e:	4628      	mov	r0, r5
 8005580:	47b8      	blx	r7
 8005582:	3001      	adds	r0, #1
 8005584:	f43f af51 	beq.w	800542a <_printf_float+0xc2>
 8005588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800558c:	429a      	cmp	r2, r3
 800558e:	db02      	blt.n	8005596 <_printf_float+0x22e>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	07d8      	lsls	r0, r3, #31
 8005594:	d510      	bpl.n	80055b8 <_printf_float+0x250>
 8005596:	ee18 3a10 	vmov	r3, s16
 800559a:	4652      	mov	r2, sl
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af41 	beq.w	800542a <_printf_float+0xc2>
 80055a8:	f04f 0800 	mov.w	r8, #0
 80055ac:	f104 091a 	add.w	r9, r4, #26
 80055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b2:	3b01      	subs	r3, #1
 80055b4:	4543      	cmp	r3, r8
 80055b6:	dc09      	bgt.n	80055cc <_printf_float+0x264>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	079b      	lsls	r3, r3, #30
 80055bc:	f100 8105 	bmi.w	80057ca <_printf_float+0x462>
 80055c0:	68e0      	ldr	r0, [r4, #12]
 80055c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055c4:	4298      	cmp	r0, r3
 80055c6:	bfb8      	it	lt
 80055c8:	4618      	movlt	r0, r3
 80055ca:	e730      	b.n	800542e <_printf_float+0xc6>
 80055cc:	2301      	movs	r3, #1
 80055ce:	464a      	mov	r2, r9
 80055d0:	4631      	mov	r1, r6
 80055d2:	4628      	mov	r0, r5
 80055d4:	47b8      	blx	r7
 80055d6:	3001      	adds	r0, #1
 80055d8:	f43f af27 	beq.w	800542a <_printf_float+0xc2>
 80055dc:	f108 0801 	add.w	r8, r8, #1
 80055e0:	e7e6      	b.n	80055b0 <_printf_float+0x248>
 80055e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	dc39      	bgt.n	800565c <_printf_float+0x2f4>
 80055e8:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <_printf_float+0x2f0>)
 80055ea:	2301      	movs	r3, #1
 80055ec:	4631      	mov	r1, r6
 80055ee:	4628      	mov	r0, r5
 80055f0:	47b8      	blx	r7
 80055f2:	3001      	adds	r0, #1
 80055f4:	f43f af19 	beq.w	800542a <_printf_float+0xc2>
 80055f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055fc:	4313      	orrs	r3, r2
 80055fe:	d102      	bne.n	8005606 <_printf_float+0x29e>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	07d9      	lsls	r1, r3, #31
 8005604:	d5d8      	bpl.n	80055b8 <_printf_float+0x250>
 8005606:	ee18 3a10 	vmov	r3, s16
 800560a:	4652      	mov	r2, sl
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af09 	beq.w	800542a <_printf_float+0xc2>
 8005618:	f04f 0900 	mov.w	r9, #0
 800561c:	f104 0a1a 	add.w	sl, r4, #26
 8005620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005622:	425b      	negs	r3, r3
 8005624:	454b      	cmp	r3, r9
 8005626:	dc01      	bgt.n	800562c <_printf_float+0x2c4>
 8005628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800562a:	e792      	b.n	8005552 <_printf_float+0x1ea>
 800562c:	2301      	movs	r3, #1
 800562e:	4652      	mov	r2, sl
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f aef7 	beq.w	800542a <_printf_float+0xc2>
 800563c:	f109 0901 	add.w	r9, r9, #1
 8005640:	e7ee      	b.n	8005620 <_printf_float+0x2b8>
 8005642:	bf00      	nop
 8005644:	7fefffff 	.word	0x7fefffff
 8005648:	0800805c 	.word	0x0800805c
 800564c:	08008060 	.word	0x08008060
 8005650:	08008068 	.word	0x08008068
 8005654:	08008064 	.word	0x08008064
 8005658:	0800806c 	.word	0x0800806c
 800565c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800565e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005660:	429a      	cmp	r2, r3
 8005662:	bfa8      	it	ge
 8005664:	461a      	movge	r2, r3
 8005666:	2a00      	cmp	r2, #0
 8005668:	4691      	mov	r9, r2
 800566a:	dc37      	bgt.n	80056dc <_printf_float+0x374>
 800566c:	f04f 0b00 	mov.w	fp, #0
 8005670:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005674:	f104 021a 	add.w	r2, r4, #26
 8005678:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	eba3 0309 	sub.w	r3, r3, r9
 8005680:	455b      	cmp	r3, fp
 8005682:	dc33      	bgt.n	80056ec <_printf_float+0x384>
 8005684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005688:	429a      	cmp	r2, r3
 800568a:	db3b      	blt.n	8005704 <_printf_float+0x39c>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	07da      	lsls	r2, r3, #31
 8005690:	d438      	bmi.n	8005704 <_printf_float+0x39c>
 8005692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005694:	9a05      	ldr	r2, [sp, #20]
 8005696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005698:	1a9a      	subs	r2, r3, r2
 800569a:	eba3 0901 	sub.w	r9, r3, r1
 800569e:	4591      	cmp	r9, r2
 80056a0:	bfa8      	it	ge
 80056a2:	4691      	movge	r9, r2
 80056a4:	f1b9 0f00 	cmp.w	r9, #0
 80056a8:	dc35      	bgt.n	8005716 <_printf_float+0x3ae>
 80056aa:	f04f 0800 	mov.w	r8, #0
 80056ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056b2:	f104 0a1a 	add.w	sl, r4, #26
 80056b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	eba3 0309 	sub.w	r3, r3, r9
 80056c0:	4543      	cmp	r3, r8
 80056c2:	f77f af79 	ble.w	80055b8 <_printf_float+0x250>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4631      	mov	r1, r6
 80056cc:	4628      	mov	r0, r5
 80056ce:	47b8      	blx	r7
 80056d0:	3001      	adds	r0, #1
 80056d2:	f43f aeaa 	beq.w	800542a <_printf_float+0xc2>
 80056d6:	f108 0801 	add.w	r8, r8, #1
 80056da:	e7ec      	b.n	80056b6 <_printf_float+0x34e>
 80056dc:	4613      	mov	r3, r2
 80056de:	4631      	mov	r1, r6
 80056e0:	4642      	mov	r2, r8
 80056e2:	4628      	mov	r0, r5
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	d1c0      	bne.n	800566c <_printf_float+0x304>
 80056ea:	e69e      	b.n	800542a <_printf_float+0xc2>
 80056ec:	2301      	movs	r3, #1
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	9205      	str	r2, [sp, #20]
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	f43f ae97 	beq.w	800542a <_printf_float+0xc2>
 80056fc:	9a05      	ldr	r2, [sp, #20]
 80056fe:	f10b 0b01 	add.w	fp, fp, #1
 8005702:	e7b9      	b.n	8005678 <_printf_float+0x310>
 8005704:	ee18 3a10 	vmov	r3, s16
 8005708:	4652      	mov	r2, sl
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	d1be      	bne.n	8005692 <_printf_float+0x32a>
 8005714:	e689      	b.n	800542a <_printf_float+0xc2>
 8005716:	9a05      	ldr	r2, [sp, #20]
 8005718:	464b      	mov	r3, r9
 800571a:	4442      	add	r2, r8
 800571c:	4631      	mov	r1, r6
 800571e:	4628      	mov	r0, r5
 8005720:	47b8      	blx	r7
 8005722:	3001      	adds	r0, #1
 8005724:	d1c1      	bne.n	80056aa <_printf_float+0x342>
 8005726:	e680      	b.n	800542a <_printf_float+0xc2>
 8005728:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800572a:	2a01      	cmp	r2, #1
 800572c:	dc01      	bgt.n	8005732 <_printf_float+0x3ca>
 800572e:	07db      	lsls	r3, r3, #31
 8005730:	d538      	bpl.n	80057a4 <_printf_float+0x43c>
 8005732:	2301      	movs	r3, #1
 8005734:	4642      	mov	r2, r8
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	f43f ae74 	beq.w	800542a <_printf_float+0xc2>
 8005742:	ee18 3a10 	vmov	r3, s16
 8005746:	4652      	mov	r2, sl
 8005748:	4631      	mov	r1, r6
 800574a:	4628      	mov	r0, r5
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	f43f ae6b 	beq.w	800542a <_printf_float+0xc2>
 8005754:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 8005760:	b9d8      	cbnz	r0, 800579a <_printf_float+0x432>
 8005762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005764:	f108 0201 	add.w	r2, r8, #1
 8005768:	3b01      	subs	r3, #1
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	d10e      	bne.n	8005792 <_printf_float+0x42a>
 8005774:	e659      	b.n	800542a <_printf_float+0xc2>
 8005776:	2301      	movs	r3, #1
 8005778:	4652      	mov	r2, sl
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	f43f ae52 	beq.w	800542a <_printf_float+0xc2>
 8005786:	f108 0801 	add.w	r8, r8, #1
 800578a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	4543      	cmp	r3, r8
 8005790:	dcf1      	bgt.n	8005776 <_printf_float+0x40e>
 8005792:	464b      	mov	r3, r9
 8005794:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005798:	e6dc      	b.n	8005554 <_printf_float+0x1ec>
 800579a:	f04f 0800 	mov.w	r8, #0
 800579e:	f104 0a1a 	add.w	sl, r4, #26
 80057a2:	e7f2      	b.n	800578a <_printf_float+0x422>
 80057a4:	2301      	movs	r3, #1
 80057a6:	4642      	mov	r2, r8
 80057a8:	e7df      	b.n	800576a <_printf_float+0x402>
 80057aa:	2301      	movs	r3, #1
 80057ac:	464a      	mov	r2, r9
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f ae38 	beq.w	800542a <_printf_float+0xc2>
 80057ba:	f108 0801 	add.w	r8, r8, #1
 80057be:	68e3      	ldr	r3, [r4, #12]
 80057c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057c2:	1a5b      	subs	r3, r3, r1
 80057c4:	4543      	cmp	r3, r8
 80057c6:	dcf0      	bgt.n	80057aa <_printf_float+0x442>
 80057c8:	e6fa      	b.n	80055c0 <_printf_float+0x258>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	f104 0919 	add.w	r9, r4, #25
 80057d2:	e7f4      	b.n	80057be <_printf_float+0x456>

080057d4 <_printf_common>:
 80057d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	4616      	mov	r6, r2
 80057da:	4699      	mov	r9, r3
 80057dc:	688a      	ldr	r2, [r1, #8]
 80057de:	690b      	ldr	r3, [r1, #16]
 80057e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057e4:	4293      	cmp	r3, r2
 80057e6:	bfb8      	it	lt
 80057e8:	4613      	movlt	r3, r2
 80057ea:	6033      	str	r3, [r6, #0]
 80057ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057f0:	4607      	mov	r7, r0
 80057f2:	460c      	mov	r4, r1
 80057f4:	b10a      	cbz	r2, 80057fa <_printf_common+0x26>
 80057f6:	3301      	adds	r3, #1
 80057f8:	6033      	str	r3, [r6, #0]
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	0699      	lsls	r1, r3, #26
 80057fe:	bf42      	ittt	mi
 8005800:	6833      	ldrmi	r3, [r6, #0]
 8005802:	3302      	addmi	r3, #2
 8005804:	6033      	strmi	r3, [r6, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	f015 0506 	ands.w	r5, r5, #6
 800580c:	d106      	bne.n	800581c <_printf_common+0x48>
 800580e:	f104 0a19 	add.w	sl, r4, #25
 8005812:	68e3      	ldr	r3, [r4, #12]
 8005814:	6832      	ldr	r2, [r6, #0]
 8005816:	1a9b      	subs	r3, r3, r2
 8005818:	42ab      	cmp	r3, r5
 800581a:	dc26      	bgt.n	800586a <_printf_common+0x96>
 800581c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005820:	1e13      	subs	r3, r2, #0
 8005822:	6822      	ldr	r2, [r4, #0]
 8005824:	bf18      	it	ne
 8005826:	2301      	movne	r3, #1
 8005828:	0692      	lsls	r2, r2, #26
 800582a:	d42b      	bmi.n	8005884 <_printf_common+0xb0>
 800582c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005830:	4649      	mov	r1, r9
 8005832:	4638      	mov	r0, r7
 8005834:	47c0      	blx	r8
 8005836:	3001      	adds	r0, #1
 8005838:	d01e      	beq.n	8005878 <_printf_common+0xa4>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	68e5      	ldr	r5, [r4, #12]
 800583e:	6832      	ldr	r2, [r6, #0]
 8005840:	f003 0306 	and.w	r3, r3, #6
 8005844:	2b04      	cmp	r3, #4
 8005846:	bf08      	it	eq
 8005848:	1aad      	subeq	r5, r5, r2
 800584a:	68a3      	ldr	r3, [r4, #8]
 800584c:	6922      	ldr	r2, [r4, #16]
 800584e:	bf0c      	ite	eq
 8005850:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005854:	2500      	movne	r5, #0
 8005856:	4293      	cmp	r3, r2
 8005858:	bfc4      	itt	gt
 800585a:	1a9b      	subgt	r3, r3, r2
 800585c:	18ed      	addgt	r5, r5, r3
 800585e:	2600      	movs	r6, #0
 8005860:	341a      	adds	r4, #26
 8005862:	42b5      	cmp	r5, r6
 8005864:	d11a      	bne.n	800589c <_printf_common+0xc8>
 8005866:	2000      	movs	r0, #0
 8005868:	e008      	b.n	800587c <_printf_common+0xa8>
 800586a:	2301      	movs	r3, #1
 800586c:	4652      	mov	r2, sl
 800586e:	4649      	mov	r1, r9
 8005870:	4638      	mov	r0, r7
 8005872:	47c0      	blx	r8
 8005874:	3001      	adds	r0, #1
 8005876:	d103      	bne.n	8005880 <_printf_common+0xac>
 8005878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	3501      	adds	r5, #1
 8005882:	e7c6      	b.n	8005812 <_printf_common+0x3e>
 8005884:	18e1      	adds	r1, r4, r3
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	2030      	movs	r0, #48	; 0x30
 800588a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800588e:	4422      	add	r2, r4
 8005890:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005894:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005898:	3302      	adds	r3, #2
 800589a:	e7c7      	b.n	800582c <_printf_common+0x58>
 800589c:	2301      	movs	r3, #1
 800589e:	4622      	mov	r2, r4
 80058a0:	4649      	mov	r1, r9
 80058a2:	4638      	mov	r0, r7
 80058a4:	47c0      	blx	r8
 80058a6:	3001      	adds	r0, #1
 80058a8:	d0e6      	beq.n	8005878 <_printf_common+0xa4>
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7d9      	b.n	8005862 <_printf_common+0x8e>
	...

080058b0 <_printf_i>:
 80058b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	7e0f      	ldrb	r7, [r1, #24]
 80058b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058b8:	2f78      	cmp	r7, #120	; 0x78
 80058ba:	4691      	mov	r9, r2
 80058bc:	4680      	mov	r8, r0
 80058be:	460c      	mov	r4, r1
 80058c0:	469a      	mov	sl, r3
 80058c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058c6:	d807      	bhi.n	80058d8 <_printf_i+0x28>
 80058c8:	2f62      	cmp	r7, #98	; 0x62
 80058ca:	d80a      	bhi.n	80058e2 <_printf_i+0x32>
 80058cc:	2f00      	cmp	r7, #0
 80058ce:	f000 80d8 	beq.w	8005a82 <_printf_i+0x1d2>
 80058d2:	2f58      	cmp	r7, #88	; 0x58
 80058d4:	f000 80a3 	beq.w	8005a1e <_printf_i+0x16e>
 80058d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058e0:	e03a      	b.n	8005958 <_printf_i+0xa8>
 80058e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058e6:	2b15      	cmp	r3, #21
 80058e8:	d8f6      	bhi.n	80058d8 <_printf_i+0x28>
 80058ea:	a101      	add	r1, pc, #4	; (adr r1, 80058f0 <_printf_i+0x40>)
 80058ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058f0:	08005949 	.word	0x08005949
 80058f4:	0800595d 	.word	0x0800595d
 80058f8:	080058d9 	.word	0x080058d9
 80058fc:	080058d9 	.word	0x080058d9
 8005900:	080058d9 	.word	0x080058d9
 8005904:	080058d9 	.word	0x080058d9
 8005908:	0800595d 	.word	0x0800595d
 800590c:	080058d9 	.word	0x080058d9
 8005910:	080058d9 	.word	0x080058d9
 8005914:	080058d9 	.word	0x080058d9
 8005918:	080058d9 	.word	0x080058d9
 800591c:	08005a69 	.word	0x08005a69
 8005920:	0800598d 	.word	0x0800598d
 8005924:	08005a4b 	.word	0x08005a4b
 8005928:	080058d9 	.word	0x080058d9
 800592c:	080058d9 	.word	0x080058d9
 8005930:	08005a8b 	.word	0x08005a8b
 8005934:	080058d9 	.word	0x080058d9
 8005938:	0800598d 	.word	0x0800598d
 800593c:	080058d9 	.word	0x080058d9
 8005940:	080058d9 	.word	0x080058d9
 8005944:	08005a53 	.word	0x08005a53
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	1d1a      	adds	r2, r3, #4
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	602a      	str	r2, [r5, #0]
 8005950:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005958:	2301      	movs	r3, #1
 800595a:	e0a3      	b.n	8005aa4 <_printf_i+0x1f4>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	6829      	ldr	r1, [r5, #0]
 8005960:	0606      	lsls	r6, r0, #24
 8005962:	f101 0304 	add.w	r3, r1, #4
 8005966:	d50a      	bpl.n	800597e <_printf_i+0xce>
 8005968:	680e      	ldr	r6, [r1, #0]
 800596a:	602b      	str	r3, [r5, #0]
 800596c:	2e00      	cmp	r6, #0
 800596e:	da03      	bge.n	8005978 <_printf_i+0xc8>
 8005970:	232d      	movs	r3, #45	; 0x2d
 8005972:	4276      	negs	r6, r6
 8005974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005978:	485e      	ldr	r0, [pc, #376]	; (8005af4 <_printf_i+0x244>)
 800597a:	230a      	movs	r3, #10
 800597c:	e019      	b.n	80059b2 <_printf_i+0x102>
 800597e:	680e      	ldr	r6, [r1, #0]
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005986:	bf18      	it	ne
 8005988:	b236      	sxthne	r6, r6
 800598a:	e7ef      	b.n	800596c <_printf_i+0xbc>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1d19      	adds	r1, r3, #4
 8005992:	6029      	str	r1, [r5, #0]
 8005994:	0601      	lsls	r1, r0, #24
 8005996:	d501      	bpl.n	800599c <_printf_i+0xec>
 8005998:	681e      	ldr	r6, [r3, #0]
 800599a:	e002      	b.n	80059a2 <_printf_i+0xf2>
 800599c:	0646      	lsls	r6, r0, #25
 800599e:	d5fb      	bpl.n	8005998 <_printf_i+0xe8>
 80059a0:	881e      	ldrh	r6, [r3, #0]
 80059a2:	4854      	ldr	r0, [pc, #336]	; (8005af4 <_printf_i+0x244>)
 80059a4:	2f6f      	cmp	r7, #111	; 0x6f
 80059a6:	bf0c      	ite	eq
 80059a8:	2308      	moveq	r3, #8
 80059aa:	230a      	movne	r3, #10
 80059ac:	2100      	movs	r1, #0
 80059ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059b2:	6865      	ldr	r5, [r4, #4]
 80059b4:	60a5      	str	r5, [r4, #8]
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	bfa2      	ittt	ge
 80059ba:	6821      	ldrge	r1, [r4, #0]
 80059bc:	f021 0104 	bicge.w	r1, r1, #4
 80059c0:	6021      	strge	r1, [r4, #0]
 80059c2:	b90e      	cbnz	r6, 80059c8 <_printf_i+0x118>
 80059c4:	2d00      	cmp	r5, #0
 80059c6:	d04d      	beq.n	8005a64 <_printf_i+0x1b4>
 80059c8:	4615      	mov	r5, r2
 80059ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80059ce:	fb03 6711 	mls	r7, r3, r1, r6
 80059d2:	5dc7      	ldrb	r7, [r0, r7]
 80059d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059d8:	4637      	mov	r7, r6
 80059da:	42bb      	cmp	r3, r7
 80059dc:	460e      	mov	r6, r1
 80059de:	d9f4      	bls.n	80059ca <_printf_i+0x11a>
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10b      	bne.n	80059fc <_printf_i+0x14c>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	07de      	lsls	r6, r3, #31
 80059e8:	d508      	bpl.n	80059fc <_printf_i+0x14c>
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	6861      	ldr	r1, [r4, #4]
 80059ee:	4299      	cmp	r1, r3
 80059f0:	bfde      	ittt	le
 80059f2:	2330      	movle	r3, #48	; 0x30
 80059f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80059fc:	1b52      	subs	r2, r2, r5
 80059fe:	6122      	str	r2, [r4, #16]
 8005a00:	f8cd a000 	str.w	sl, [sp]
 8005a04:	464b      	mov	r3, r9
 8005a06:	aa03      	add	r2, sp, #12
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	f7ff fee2 	bl	80057d4 <_printf_common>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d14c      	bne.n	8005aae <_printf_i+0x1fe>
 8005a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a18:	b004      	add	sp, #16
 8005a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1e:	4835      	ldr	r0, [pc, #212]	; (8005af4 <_printf_i+0x244>)
 8005a20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a24:	6829      	ldr	r1, [r5, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a2c:	6029      	str	r1, [r5, #0]
 8005a2e:	061d      	lsls	r5, r3, #24
 8005a30:	d514      	bpl.n	8005a5c <_printf_i+0x1ac>
 8005a32:	07df      	lsls	r7, r3, #31
 8005a34:	bf44      	itt	mi
 8005a36:	f043 0320 	orrmi.w	r3, r3, #32
 8005a3a:	6023      	strmi	r3, [r4, #0]
 8005a3c:	b91e      	cbnz	r6, 8005a46 <_printf_i+0x196>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	f023 0320 	bic.w	r3, r3, #32
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	2310      	movs	r3, #16
 8005a48:	e7b0      	b.n	80059ac <_printf_i+0xfc>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	f043 0320 	orr.w	r3, r3, #32
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	2378      	movs	r3, #120	; 0x78
 8005a54:	4828      	ldr	r0, [pc, #160]	; (8005af8 <_printf_i+0x248>)
 8005a56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a5a:	e7e3      	b.n	8005a24 <_printf_i+0x174>
 8005a5c:	0659      	lsls	r1, r3, #25
 8005a5e:	bf48      	it	mi
 8005a60:	b2b6      	uxthmi	r6, r6
 8005a62:	e7e6      	b.n	8005a32 <_printf_i+0x182>
 8005a64:	4615      	mov	r5, r2
 8005a66:	e7bb      	b.n	80059e0 <_printf_i+0x130>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	6826      	ldr	r6, [r4, #0]
 8005a6c:	6961      	ldr	r1, [r4, #20]
 8005a6e:	1d18      	adds	r0, r3, #4
 8005a70:	6028      	str	r0, [r5, #0]
 8005a72:	0635      	lsls	r5, r6, #24
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	d501      	bpl.n	8005a7c <_printf_i+0x1cc>
 8005a78:	6019      	str	r1, [r3, #0]
 8005a7a:	e002      	b.n	8005a82 <_printf_i+0x1d2>
 8005a7c:	0670      	lsls	r0, r6, #25
 8005a7e:	d5fb      	bpl.n	8005a78 <_printf_i+0x1c8>
 8005a80:	8019      	strh	r1, [r3, #0]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6123      	str	r3, [r4, #16]
 8005a86:	4615      	mov	r5, r2
 8005a88:	e7ba      	b.n	8005a00 <_printf_i+0x150>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	602a      	str	r2, [r5, #0]
 8005a90:	681d      	ldr	r5, [r3, #0]
 8005a92:	6862      	ldr	r2, [r4, #4]
 8005a94:	2100      	movs	r1, #0
 8005a96:	4628      	mov	r0, r5
 8005a98:	f7fa fbc2 	bl	8000220 <memchr>
 8005a9c:	b108      	cbz	r0, 8005aa2 <_printf_i+0x1f2>
 8005a9e:	1b40      	subs	r0, r0, r5
 8005aa0:	6060      	str	r0, [r4, #4]
 8005aa2:	6863      	ldr	r3, [r4, #4]
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aac:	e7a8      	b.n	8005a00 <_printf_i+0x150>
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	47d0      	blx	sl
 8005ab8:	3001      	adds	r0, #1
 8005aba:	d0ab      	beq.n	8005a14 <_printf_i+0x164>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	079b      	lsls	r3, r3, #30
 8005ac0:	d413      	bmi.n	8005aea <_printf_i+0x23a>
 8005ac2:	68e0      	ldr	r0, [r4, #12]
 8005ac4:	9b03      	ldr	r3, [sp, #12]
 8005ac6:	4298      	cmp	r0, r3
 8005ac8:	bfb8      	it	lt
 8005aca:	4618      	movlt	r0, r3
 8005acc:	e7a4      	b.n	8005a18 <_printf_i+0x168>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d09b      	beq.n	8005a14 <_printf_i+0x164>
 8005adc:	3501      	adds	r5, #1
 8005ade:	68e3      	ldr	r3, [r4, #12]
 8005ae0:	9903      	ldr	r1, [sp, #12]
 8005ae2:	1a5b      	subs	r3, r3, r1
 8005ae4:	42ab      	cmp	r3, r5
 8005ae6:	dcf2      	bgt.n	8005ace <_printf_i+0x21e>
 8005ae8:	e7eb      	b.n	8005ac2 <_printf_i+0x212>
 8005aea:	2500      	movs	r5, #0
 8005aec:	f104 0619 	add.w	r6, r4, #25
 8005af0:	e7f5      	b.n	8005ade <_printf_i+0x22e>
 8005af2:	bf00      	nop
 8005af4:	0800806e 	.word	0x0800806e
 8005af8:	0800807f 	.word	0x0800807f

08005afc <siprintf>:
 8005afc:	b40e      	push	{r1, r2, r3}
 8005afe:	b500      	push	{lr}
 8005b00:	b09c      	sub	sp, #112	; 0x70
 8005b02:	ab1d      	add	r3, sp, #116	; 0x74
 8005b04:	9002      	str	r0, [sp, #8]
 8005b06:	9006      	str	r0, [sp, #24]
 8005b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b0c:	4809      	ldr	r0, [pc, #36]	; (8005b34 <siprintf+0x38>)
 8005b0e:	9107      	str	r1, [sp, #28]
 8005b10:	9104      	str	r1, [sp, #16]
 8005b12:	4909      	ldr	r1, [pc, #36]	; (8005b38 <siprintf+0x3c>)
 8005b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b18:	9105      	str	r1, [sp, #20]
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	a902      	add	r1, sp, #8
 8005b20:	f001 fb78 	bl	8007214 <_svfiprintf_r>
 8005b24:	9b02      	ldr	r3, [sp, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	701a      	strb	r2, [r3, #0]
 8005b2a:	b01c      	add	sp, #112	; 0x70
 8005b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b30:	b003      	add	sp, #12
 8005b32:	4770      	bx	lr
 8005b34:	2000000c 	.word	0x2000000c
 8005b38:	ffff0208 	.word	0xffff0208

08005b3c <quorem>:
 8005b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b40:	6903      	ldr	r3, [r0, #16]
 8005b42:	690c      	ldr	r4, [r1, #16]
 8005b44:	42a3      	cmp	r3, r4
 8005b46:	4607      	mov	r7, r0
 8005b48:	f2c0 8081 	blt.w	8005c4e <quorem+0x112>
 8005b4c:	3c01      	subs	r4, #1
 8005b4e:	f101 0814 	add.w	r8, r1, #20
 8005b52:	f100 0514 	add.w	r5, r0, #20
 8005b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b5a:	9301      	str	r3, [sp, #4]
 8005b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b64:	3301      	adds	r3, #1
 8005b66:	429a      	cmp	r2, r3
 8005b68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005b6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b74:	d331      	bcc.n	8005bda <quorem+0x9e>
 8005b76:	f04f 0e00 	mov.w	lr, #0
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	46ac      	mov	ip, r5
 8005b7e:	46f2      	mov	sl, lr
 8005b80:	f850 2b04 	ldr.w	r2, [r0], #4
 8005b84:	b293      	uxth	r3, r2
 8005b86:	fb06 e303 	mla	r3, r6, r3, lr
 8005b8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	ebaa 0303 	sub.w	r3, sl, r3
 8005b94:	f8dc a000 	ldr.w	sl, [ip]
 8005b98:	0c12      	lsrs	r2, r2, #16
 8005b9a:	fa13 f38a 	uxtah	r3, r3, sl
 8005b9e:	fb06 e202 	mla	r2, r6, r2, lr
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005baa:	b292      	uxth	r2, r2
 8005bac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005bb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005bb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005bb8:	4581      	cmp	r9, r0
 8005bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bbe:	f84c 3b04 	str.w	r3, [ip], #4
 8005bc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005bc6:	d2db      	bcs.n	8005b80 <quorem+0x44>
 8005bc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005bcc:	b92b      	cbnz	r3, 8005bda <quorem+0x9e>
 8005bce:	9b01      	ldr	r3, [sp, #4]
 8005bd0:	3b04      	subs	r3, #4
 8005bd2:	429d      	cmp	r5, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	d32e      	bcc.n	8005c36 <quorem+0xfa>
 8005bd8:	613c      	str	r4, [r7, #16]
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f001 f8c6 	bl	8006d6c <__mcmp>
 8005be0:	2800      	cmp	r0, #0
 8005be2:	db24      	blt.n	8005c2e <quorem+0xf2>
 8005be4:	3601      	adds	r6, #1
 8005be6:	4628      	mov	r0, r5
 8005be8:	f04f 0c00 	mov.w	ip, #0
 8005bec:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bf0:	f8d0 e000 	ldr.w	lr, [r0]
 8005bf4:	b293      	uxth	r3, r2
 8005bf6:	ebac 0303 	sub.w	r3, ip, r3
 8005bfa:	0c12      	lsrs	r2, r2, #16
 8005bfc:	fa13 f38e 	uxtah	r3, r3, lr
 8005c00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005c04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c0e:	45c1      	cmp	r9, r8
 8005c10:	f840 3b04 	str.w	r3, [r0], #4
 8005c14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005c18:	d2e8      	bcs.n	8005bec <quorem+0xb0>
 8005c1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c22:	b922      	cbnz	r2, 8005c2e <quorem+0xf2>
 8005c24:	3b04      	subs	r3, #4
 8005c26:	429d      	cmp	r5, r3
 8005c28:	461a      	mov	r2, r3
 8005c2a:	d30a      	bcc.n	8005c42 <quorem+0x106>
 8005c2c:	613c      	str	r4, [r7, #16]
 8005c2e:	4630      	mov	r0, r6
 8005c30:	b003      	add	sp, #12
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	3b04      	subs	r3, #4
 8005c3a:	2a00      	cmp	r2, #0
 8005c3c:	d1cc      	bne.n	8005bd8 <quorem+0x9c>
 8005c3e:	3c01      	subs	r4, #1
 8005c40:	e7c7      	b.n	8005bd2 <quorem+0x96>
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	3b04      	subs	r3, #4
 8005c46:	2a00      	cmp	r2, #0
 8005c48:	d1f0      	bne.n	8005c2c <quorem+0xf0>
 8005c4a:	3c01      	subs	r4, #1
 8005c4c:	e7eb      	b.n	8005c26 <quorem+0xea>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	e7ee      	b.n	8005c30 <quorem+0xf4>
 8005c52:	0000      	movs	r0, r0
 8005c54:	0000      	movs	r0, r0
	...

08005c58 <_dtoa_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	ed2d 8b04 	vpush	{d8-d9}
 8005c60:	ec57 6b10 	vmov	r6, r7, d0
 8005c64:	b093      	sub	sp, #76	; 0x4c
 8005c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005c6c:	9106      	str	r1, [sp, #24]
 8005c6e:	ee10 aa10 	vmov	sl, s0
 8005c72:	4604      	mov	r4, r0
 8005c74:	9209      	str	r2, [sp, #36]	; 0x24
 8005c76:	930c      	str	r3, [sp, #48]	; 0x30
 8005c78:	46bb      	mov	fp, r7
 8005c7a:	b975      	cbnz	r5, 8005c9a <_dtoa_r+0x42>
 8005c7c:	2010      	movs	r0, #16
 8005c7e:	f000 fddd 	bl	800683c <malloc>
 8005c82:	4602      	mov	r2, r0
 8005c84:	6260      	str	r0, [r4, #36]	; 0x24
 8005c86:	b920      	cbnz	r0, 8005c92 <_dtoa_r+0x3a>
 8005c88:	4ba7      	ldr	r3, [pc, #668]	; (8005f28 <_dtoa_r+0x2d0>)
 8005c8a:	21ea      	movs	r1, #234	; 0xea
 8005c8c:	48a7      	ldr	r0, [pc, #668]	; (8005f2c <_dtoa_r+0x2d4>)
 8005c8e:	f001 fbd1 	bl	8007434 <__assert_func>
 8005c92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005c96:	6005      	str	r5, [r0, #0]
 8005c98:	60c5      	str	r5, [r0, #12]
 8005c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c9c:	6819      	ldr	r1, [r3, #0]
 8005c9e:	b151      	cbz	r1, 8005cb6 <_dtoa_r+0x5e>
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	604a      	str	r2, [r1, #4]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4093      	lsls	r3, r2
 8005ca8:	608b      	str	r3, [r1, #8]
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 fe1c 	bl	80068e8 <_Bfree>
 8005cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	1e3b      	subs	r3, r7, #0
 8005cb8:	bfaa      	itet	ge
 8005cba:	2300      	movge	r3, #0
 8005cbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005cc0:	f8c8 3000 	strge.w	r3, [r8]
 8005cc4:	4b9a      	ldr	r3, [pc, #616]	; (8005f30 <_dtoa_r+0x2d8>)
 8005cc6:	bfbc      	itt	lt
 8005cc8:	2201      	movlt	r2, #1
 8005cca:	f8c8 2000 	strlt.w	r2, [r8]
 8005cce:	ea33 030b 	bics.w	r3, r3, fp
 8005cd2:	d11b      	bne.n	8005d0c <_dtoa_r+0xb4>
 8005cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ce0:	4333      	orrs	r3, r6
 8005ce2:	f000 8592 	beq.w	800680a <_dtoa_r+0xbb2>
 8005ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ce8:	b963      	cbnz	r3, 8005d04 <_dtoa_r+0xac>
 8005cea:	4b92      	ldr	r3, [pc, #584]	; (8005f34 <_dtoa_r+0x2dc>)
 8005cec:	e022      	b.n	8005d34 <_dtoa_r+0xdc>
 8005cee:	4b92      	ldr	r3, [pc, #584]	; (8005f38 <_dtoa_r+0x2e0>)
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	9801      	ldr	r0, [sp, #4]
 8005cfa:	b013      	add	sp, #76	; 0x4c
 8005cfc:	ecbd 8b04 	vpop	{d8-d9}
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	4b8b      	ldr	r3, [pc, #556]	; (8005f34 <_dtoa_r+0x2dc>)
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	e7f3      	b.n	8005cf4 <_dtoa_r+0x9c>
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4650      	mov	r0, sl
 8005d12:	4659      	mov	r1, fp
 8005d14:	f7fa fef8 	bl	8000b08 <__aeabi_dcmpeq>
 8005d18:	ec4b ab19 	vmov	d9, sl, fp
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	b158      	cbz	r0, 8005d38 <_dtoa_r+0xe0>
 8005d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d22:	2301      	movs	r3, #1
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 856b 	beq.w	8006804 <_dtoa_r+0xbac>
 8005d2e:	4883      	ldr	r0, [pc, #524]	; (8005f3c <_dtoa_r+0x2e4>)
 8005d30:	6018      	str	r0, [r3, #0]
 8005d32:	1e43      	subs	r3, r0, #1
 8005d34:	9301      	str	r3, [sp, #4]
 8005d36:	e7df      	b.n	8005cf8 <_dtoa_r+0xa0>
 8005d38:	ec4b ab10 	vmov	d0, sl, fp
 8005d3c:	aa10      	add	r2, sp, #64	; 0x40
 8005d3e:	a911      	add	r1, sp, #68	; 0x44
 8005d40:	4620      	mov	r0, r4
 8005d42:	f001 f8b9 	bl	8006eb8 <__d2b>
 8005d46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005d4a:	ee08 0a10 	vmov	s16, r0
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	f000 8084 	beq.w	8005e5c <_dtoa_r+0x204>
 8005d54:	ee19 3a90 	vmov	r3, s19
 8005d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005d60:	4656      	mov	r6, sl
 8005d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005d6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005d6e:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <_dtoa_r+0x2e8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	4630      	mov	r0, r6
 8005d74:	4639      	mov	r1, r7
 8005d76:	f7fa faa7 	bl	80002c8 <__aeabi_dsub>
 8005d7a:	a365      	add	r3, pc, #404	; (adr r3, 8005f10 <_dtoa_r+0x2b8>)
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f7fa fc5a 	bl	8000638 <__aeabi_dmul>
 8005d84:	a364      	add	r3, pc, #400	; (adr r3, 8005f18 <_dtoa_r+0x2c0>)
 8005d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8a:	f7fa fa9f 	bl	80002cc <__adddf3>
 8005d8e:	4606      	mov	r6, r0
 8005d90:	4628      	mov	r0, r5
 8005d92:	460f      	mov	r7, r1
 8005d94:	f7fa fbe6 	bl	8000564 <__aeabi_i2d>
 8005d98:	a361      	add	r3, pc, #388	; (adr r3, 8005f20 <_dtoa_r+0x2c8>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fc4b 	bl	8000638 <__aeabi_dmul>
 8005da2:	4602      	mov	r2, r0
 8005da4:	460b      	mov	r3, r1
 8005da6:	4630      	mov	r0, r6
 8005da8:	4639      	mov	r1, r7
 8005daa:	f7fa fa8f 	bl	80002cc <__adddf3>
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	f7fa fef1 	bl	8000b98 <__aeabi_d2iz>
 8005db6:	2200      	movs	r2, #0
 8005db8:	9000      	str	r0, [sp, #0]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	4639      	mov	r1, r7
 8005dc0:	f7fa feac 	bl	8000b1c <__aeabi_dcmplt>
 8005dc4:	b150      	cbz	r0, 8005ddc <_dtoa_r+0x184>
 8005dc6:	9800      	ldr	r0, [sp, #0]
 8005dc8:	f7fa fbcc 	bl	8000564 <__aeabi_i2d>
 8005dcc:	4632      	mov	r2, r6
 8005dce:	463b      	mov	r3, r7
 8005dd0:	f7fa fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8005dd4:	b910      	cbnz	r0, 8005ddc <_dtoa_r+0x184>
 8005dd6:	9b00      	ldr	r3, [sp, #0]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	9b00      	ldr	r3, [sp, #0]
 8005dde:	2b16      	cmp	r3, #22
 8005de0:	d85a      	bhi.n	8005e98 <_dtoa_r+0x240>
 8005de2:	9a00      	ldr	r2, [sp, #0]
 8005de4:	4b57      	ldr	r3, [pc, #348]	; (8005f44 <_dtoa_r+0x2ec>)
 8005de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	ec51 0b19 	vmov	r0, r1, d9
 8005df2:	f7fa fe93 	bl	8000b1c <__aeabi_dcmplt>
 8005df6:	2800      	cmp	r0, #0
 8005df8:	d050      	beq.n	8005e9c <_dtoa_r+0x244>
 8005dfa:	9b00      	ldr	r3, [sp, #0]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	2300      	movs	r3, #0
 8005e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e06:	1b5d      	subs	r5, r3, r5
 8005e08:	1e6b      	subs	r3, r5, #1
 8005e0a:	9305      	str	r3, [sp, #20]
 8005e0c:	bf45      	ittet	mi
 8005e0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005e12:	9304      	strmi	r3, [sp, #16]
 8005e14:	2300      	movpl	r3, #0
 8005e16:	2300      	movmi	r3, #0
 8005e18:	bf4c      	ite	mi
 8005e1a:	9305      	strmi	r3, [sp, #20]
 8005e1c:	9304      	strpl	r3, [sp, #16]
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	db3d      	blt.n	8005ea0 <_dtoa_r+0x248>
 8005e24:	9b05      	ldr	r3, [sp, #20]
 8005e26:	9a00      	ldr	r2, [sp, #0]
 8005e28:	920a      	str	r2, [sp, #40]	; 0x28
 8005e2a:	4413      	add	r3, r2
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	9307      	str	r3, [sp, #28]
 8005e32:	9b06      	ldr	r3, [sp, #24]
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	f200 8089 	bhi.w	8005f4c <_dtoa_r+0x2f4>
 8005e3a:	2b05      	cmp	r3, #5
 8005e3c:	bfc4      	itt	gt
 8005e3e:	3b04      	subgt	r3, #4
 8005e40:	9306      	strgt	r3, [sp, #24]
 8005e42:	9b06      	ldr	r3, [sp, #24]
 8005e44:	f1a3 0302 	sub.w	r3, r3, #2
 8005e48:	bfcc      	ite	gt
 8005e4a:	2500      	movgt	r5, #0
 8005e4c:	2501      	movle	r5, #1
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	f200 8087 	bhi.w	8005f62 <_dtoa_r+0x30a>
 8005e54:	e8df f003 	tbb	[pc, r3]
 8005e58:	59383a2d 	.word	0x59383a2d
 8005e5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005e60:	441d      	add	r5, r3
 8005e62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	bfc1      	itttt	gt
 8005e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005e6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005e72:	fa0b f303 	lslgt.w	r3, fp, r3
 8005e76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005e7a:	bfda      	itte	le
 8005e7c:	f1c3 0320 	rsble	r3, r3, #32
 8005e80:	fa06 f003 	lslle.w	r0, r6, r3
 8005e84:	4318      	orrgt	r0, r3
 8005e86:	f7fa fb5d 	bl	8000544 <__aeabi_ui2d>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005e92:	3d01      	subs	r5, #1
 8005e94:	930e      	str	r3, [sp, #56]	; 0x38
 8005e96:	e76a      	b.n	8005d6e <_dtoa_r+0x116>
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e7b2      	b.n	8005e02 <_dtoa_r+0x1aa>
 8005e9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005e9e:	e7b1      	b.n	8005e04 <_dtoa_r+0x1ac>
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	9a00      	ldr	r2, [sp, #0]
 8005ea4:	1a9b      	subs	r3, r3, r2
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	4253      	negs	r3, r2
 8005eaa:	9307      	str	r3, [sp, #28]
 8005eac:	2300      	movs	r3, #0
 8005eae:	930a      	str	r3, [sp, #40]	; 0x28
 8005eb0:	e7bf      	b.n	8005e32 <_dtoa_r+0x1da>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9308      	str	r3, [sp, #32]
 8005eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	dc55      	bgt.n	8005f68 <_dtoa_r+0x310>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ec6:	e00c      	b.n	8005ee2 <_dtoa_r+0x28a>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e7f3      	b.n	8005eb4 <_dtoa_r+0x25c>
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed0:	9308      	str	r3, [sp, #32]
 8005ed2:	9b00      	ldr	r3, [sp, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	9303      	str	r3, [sp, #12]
 8005ede:	bfb8      	it	lt
 8005ee0:	2301      	movlt	r3, #1
 8005ee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	6042      	str	r2, [r0, #4]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	f102 0614 	add.w	r6, r2, #20
 8005eee:	429e      	cmp	r6, r3
 8005ef0:	6841      	ldr	r1, [r0, #4]
 8005ef2:	d93d      	bls.n	8005f70 <_dtoa_r+0x318>
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	f000 fcb7 	bl	8006868 <_Balloc>
 8005efa:	9001      	str	r0, [sp, #4]
 8005efc:	2800      	cmp	r0, #0
 8005efe:	d13b      	bne.n	8005f78 <_dtoa_r+0x320>
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <_dtoa_r+0x2f0>)
 8005f02:	4602      	mov	r2, r0
 8005f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f08:	e6c0      	b.n	8005c8c <_dtoa_r+0x34>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e7df      	b.n	8005ece <_dtoa_r+0x276>
 8005f0e:	bf00      	nop
 8005f10:	636f4361 	.word	0x636f4361
 8005f14:	3fd287a7 	.word	0x3fd287a7
 8005f18:	8b60c8b3 	.word	0x8b60c8b3
 8005f1c:	3fc68a28 	.word	0x3fc68a28
 8005f20:	509f79fb 	.word	0x509f79fb
 8005f24:	3fd34413 	.word	0x3fd34413
 8005f28:	0800809d 	.word	0x0800809d
 8005f2c:	080080b4 	.word	0x080080b4
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	08008099 	.word	0x08008099
 8005f38:	08008090 	.word	0x08008090
 8005f3c:	0800806d 	.word	0x0800806d
 8005f40:	3ff80000 	.word	0x3ff80000
 8005f44:	080081a8 	.word	0x080081a8
 8005f48:	0800810f 	.word	0x0800810f
 8005f4c:	2501      	movs	r5, #1
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9306      	str	r3, [sp, #24]
 8005f52:	9508      	str	r5, [sp, #32]
 8005f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2312      	movs	r3, #18
 8005f60:	e7b0      	b.n	8005ec4 <_dtoa_r+0x26c>
 8005f62:	2301      	movs	r3, #1
 8005f64:	9308      	str	r3, [sp, #32]
 8005f66:	e7f5      	b.n	8005f54 <_dtoa_r+0x2fc>
 8005f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005f6e:	e7b8      	b.n	8005ee2 <_dtoa_r+0x28a>
 8005f70:	3101      	adds	r1, #1
 8005f72:	6041      	str	r1, [r0, #4]
 8005f74:	0052      	lsls	r2, r2, #1
 8005f76:	e7b8      	b.n	8005eea <_dtoa_r+0x292>
 8005f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f7a:	9a01      	ldr	r2, [sp, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	2b0e      	cmp	r3, #14
 8005f82:	f200 809d 	bhi.w	80060c0 <_dtoa_r+0x468>
 8005f86:	2d00      	cmp	r5, #0
 8005f88:	f000 809a 	beq.w	80060c0 <_dtoa_r+0x468>
 8005f8c:	9b00      	ldr	r3, [sp, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	dd32      	ble.n	8005ff8 <_dtoa_r+0x3a0>
 8005f92:	4ab7      	ldr	r2, [pc, #732]	; (8006270 <_dtoa_r+0x618>)
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fa0:	9b00      	ldr	r3, [sp, #0]
 8005fa2:	05d8      	lsls	r0, r3, #23
 8005fa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005fa8:	d516      	bpl.n	8005fd8 <_dtoa_r+0x380>
 8005faa:	4bb2      	ldr	r3, [pc, #712]	; (8006274 <_dtoa_r+0x61c>)
 8005fac:	ec51 0b19 	vmov	r0, r1, d9
 8005fb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fb4:	f7fa fc6a 	bl	800088c <__aeabi_ddiv>
 8005fb8:	f007 070f 	and.w	r7, r7, #15
 8005fbc:	4682      	mov	sl, r0
 8005fbe:	468b      	mov	fp, r1
 8005fc0:	2503      	movs	r5, #3
 8005fc2:	4eac      	ldr	r6, [pc, #688]	; (8006274 <_dtoa_r+0x61c>)
 8005fc4:	b957      	cbnz	r7, 8005fdc <_dtoa_r+0x384>
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	464b      	mov	r3, r9
 8005fca:	4650      	mov	r0, sl
 8005fcc:	4659      	mov	r1, fp
 8005fce:	f7fa fc5d 	bl	800088c <__aeabi_ddiv>
 8005fd2:	4682      	mov	sl, r0
 8005fd4:	468b      	mov	fp, r1
 8005fd6:	e028      	b.n	800602a <_dtoa_r+0x3d2>
 8005fd8:	2502      	movs	r5, #2
 8005fda:	e7f2      	b.n	8005fc2 <_dtoa_r+0x36a>
 8005fdc:	07f9      	lsls	r1, r7, #31
 8005fde:	d508      	bpl.n	8005ff2 <_dtoa_r+0x39a>
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fe8:	f7fa fb26 	bl	8000638 <__aeabi_dmul>
 8005fec:	3501      	adds	r5, #1
 8005fee:	4680      	mov	r8, r0
 8005ff0:	4689      	mov	r9, r1
 8005ff2:	107f      	asrs	r7, r7, #1
 8005ff4:	3608      	adds	r6, #8
 8005ff6:	e7e5      	b.n	8005fc4 <_dtoa_r+0x36c>
 8005ff8:	f000 809b 	beq.w	8006132 <_dtoa_r+0x4da>
 8005ffc:	9b00      	ldr	r3, [sp, #0]
 8005ffe:	4f9d      	ldr	r7, [pc, #628]	; (8006274 <_dtoa_r+0x61c>)
 8006000:	425e      	negs	r6, r3
 8006002:	4b9b      	ldr	r3, [pc, #620]	; (8006270 <_dtoa_r+0x618>)
 8006004:	f006 020f 	and.w	r2, r6, #15
 8006008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	ec51 0b19 	vmov	r0, r1, d9
 8006014:	f7fa fb10 	bl	8000638 <__aeabi_dmul>
 8006018:	1136      	asrs	r6, r6, #4
 800601a:	4682      	mov	sl, r0
 800601c:	468b      	mov	fp, r1
 800601e:	2300      	movs	r3, #0
 8006020:	2502      	movs	r5, #2
 8006022:	2e00      	cmp	r6, #0
 8006024:	d17a      	bne.n	800611c <_dtoa_r+0x4c4>
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1d3      	bne.n	8005fd2 <_dtoa_r+0x37a>
 800602a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 8082 	beq.w	8006136 <_dtoa_r+0x4de>
 8006032:	4b91      	ldr	r3, [pc, #580]	; (8006278 <_dtoa_r+0x620>)
 8006034:	2200      	movs	r2, #0
 8006036:	4650      	mov	r0, sl
 8006038:	4659      	mov	r1, fp
 800603a:	f7fa fd6f 	bl	8000b1c <__aeabi_dcmplt>
 800603e:	2800      	cmp	r0, #0
 8006040:	d079      	beq.n	8006136 <_dtoa_r+0x4de>
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d076      	beq.n	8006136 <_dtoa_r+0x4de>
 8006048:	9b02      	ldr	r3, [sp, #8]
 800604a:	2b00      	cmp	r3, #0
 800604c:	dd36      	ble.n	80060bc <_dtoa_r+0x464>
 800604e:	9b00      	ldr	r3, [sp, #0]
 8006050:	4650      	mov	r0, sl
 8006052:	4659      	mov	r1, fp
 8006054:	1e5f      	subs	r7, r3, #1
 8006056:	2200      	movs	r2, #0
 8006058:	4b88      	ldr	r3, [pc, #544]	; (800627c <_dtoa_r+0x624>)
 800605a:	f7fa faed 	bl	8000638 <__aeabi_dmul>
 800605e:	9e02      	ldr	r6, [sp, #8]
 8006060:	4682      	mov	sl, r0
 8006062:	468b      	mov	fp, r1
 8006064:	3501      	adds	r5, #1
 8006066:	4628      	mov	r0, r5
 8006068:	f7fa fa7c 	bl	8000564 <__aeabi_i2d>
 800606c:	4652      	mov	r2, sl
 800606e:	465b      	mov	r3, fp
 8006070:	f7fa fae2 	bl	8000638 <__aeabi_dmul>
 8006074:	4b82      	ldr	r3, [pc, #520]	; (8006280 <_dtoa_r+0x628>)
 8006076:	2200      	movs	r2, #0
 8006078:	f7fa f928 	bl	80002cc <__adddf3>
 800607c:	46d0      	mov	r8, sl
 800607e:	46d9      	mov	r9, fp
 8006080:	4682      	mov	sl, r0
 8006082:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006086:	2e00      	cmp	r6, #0
 8006088:	d158      	bne.n	800613c <_dtoa_r+0x4e4>
 800608a:	4b7e      	ldr	r3, [pc, #504]	; (8006284 <_dtoa_r+0x62c>)
 800608c:	2200      	movs	r2, #0
 800608e:	4640      	mov	r0, r8
 8006090:	4649      	mov	r1, r9
 8006092:	f7fa f919 	bl	80002c8 <__aeabi_dsub>
 8006096:	4652      	mov	r2, sl
 8006098:	465b      	mov	r3, fp
 800609a:	4680      	mov	r8, r0
 800609c:	4689      	mov	r9, r1
 800609e:	f7fa fd5b 	bl	8000b58 <__aeabi_dcmpgt>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	f040 8295 	bne.w	80065d2 <_dtoa_r+0x97a>
 80060a8:	4652      	mov	r2, sl
 80060aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060ae:	4640      	mov	r0, r8
 80060b0:	4649      	mov	r1, r9
 80060b2:	f7fa fd33 	bl	8000b1c <__aeabi_dcmplt>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	f040 8289 	bne.w	80065ce <_dtoa_r+0x976>
 80060bc:	ec5b ab19 	vmov	sl, fp, d9
 80060c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f2c0 8148 	blt.w	8006358 <_dtoa_r+0x700>
 80060c8:	9a00      	ldr	r2, [sp, #0]
 80060ca:	2a0e      	cmp	r2, #14
 80060cc:	f300 8144 	bgt.w	8006358 <_dtoa_r+0x700>
 80060d0:	4b67      	ldr	r3, [pc, #412]	; (8006270 <_dtoa_r+0x618>)
 80060d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f280 80d5 	bge.w	800628c <_dtoa_r+0x634>
 80060e2:	9b03      	ldr	r3, [sp, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f300 80d1 	bgt.w	800628c <_dtoa_r+0x634>
 80060ea:	f040 826f 	bne.w	80065cc <_dtoa_r+0x974>
 80060ee:	4b65      	ldr	r3, [pc, #404]	; (8006284 <_dtoa_r+0x62c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	4640      	mov	r0, r8
 80060f4:	4649      	mov	r1, r9
 80060f6:	f7fa fa9f 	bl	8000638 <__aeabi_dmul>
 80060fa:	4652      	mov	r2, sl
 80060fc:	465b      	mov	r3, fp
 80060fe:	f7fa fd21 	bl	8000b44 <__aeabi_dcmpge>
 8006102:	9e03      	ldr	r6, [sp, #12]
 8006104:	4637      	mov	r7, r6
 8006106:	2800      	cmp	r0, #0
 8006108:	f040 8245 	bne.w	8006596 <_dtoa_r+0x93e>
 800610c:	9d01      	ldr	r5, [sp, #4]
 800610e:	2331      	movs	r3, #49	; 0x31
 8006110:	f805 3b01 	strb.w	r3, [r5], #1
 8006114:	9b00      	ldr	r3, [sp, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	e240      	b.n	800659e <_dtoa_r+0x946>
 800611c:	07f2      	lsls	r2, r6, #31
 800611e:	d505      	bpl.n	800612c <_dtoa_r+0x4d4>
 8006120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006124:	f7fa fa88 	bl	8000638 <__aeabi_dmul>
 8006128:	3501      	adds	r5, #1
 800612a:	2301      	movs	r3, #1
 800612c:	1076      	asrs	r6, r6, #1
 800612e:	3708      	adds	r7, #8
 8006130:	e777      	b.n	8006022 <_dtoa_r+0x3ca>
 8006132:	2502      	movs	r5, #2
 8006134:	e779      	b.n	800602a <_dtoa_r+0x3d2>
 8006136:	9f00      	ldr	r7, [sp, #0]
 8006138:	9e03      	ldr	r6, [sp, #12]
 800613a:	e794      	b.n	8006066 <_dtoa_r+0x40e>
 800613c:	9901      	ldr	r1, [sp, #4]
 800613e:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <_dtoa_r+0x618>)
 8006140:	4431      	add	r1, r6
 8006142:	910d      	str	r1, [sp, #52]	; 0x34
 8006144:	9908      	ldr	r1, [sp, #32]
 8006146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800614a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800614e:	2900      	cmp	r1, #0
 8006150:	d043      	beq.n	80061da <_dtoa_r+0x582>
 8006152:	494d      	ldr	r1, [pc, #308]	; (8006288 <_dtoa_r+0x630>)
 8006154:	2000      	movs	r0, #0
 8006156:	f7fa fb99 	bl	800088c <__aeabi_ddiv>
 800615a:	4652      	mov	r2, sl
 800615c:	465b      	mov	r3, fp
 800615e:	f7fa f8b3 	bl	80002c8 <__aeabi_dsub>
 8006162:	9d01      	ldr	r5, [sp, #4]
 8006164:	4682      	mov	sl, r0
 8006166:	468b      	mov	fp, r1
 8006168:	4649      	mov	r1, r9
 800616a:	4640      	mov	r0, r8
 800616c:	f7fa fd14 	bl	8000b98 <__aeabi_d2iz>
 8006170:	4606      	mov	r6, r0
 8006172:	f7fa f9f7 	bl	8000564 <__aeabi_i2d>
 8006176:	4602      	mov	r2, r0
 8006178:	460b      	mov	r3, r1
 800617a:	4640      	mov	r0, r8
 800617c:	4649      	mov	r1, r9
 800617e:	f7fa f8a3 	bl	80002c8 <__aeabi_dsub>
 8006182:	3630      	adds	r6, #48	; 0x30
 8006184:	f805 6b01 	strb.w	r6, [r5], #1
 8006188:	4652      	mov	r2, sl
 800618a:	465b      	mov	r3, fp
 800618c:	4680      	mov	r8, r0
 800618e:	4689      	mov	r9, r1
 8006190:	f7fa fcc4 	bl	8000b1c <__aeabi_dcmplt>
 8006194:	2800      	cmp	r0, #0
 8006196:	d163      	bne.n	8006260 <_dtoa_r+0x608>
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	4936      	ldr	r1, [pc, #216]	; (8006278 <_dtoa_r+0x620>)
 800619e:	2000      	movs	r0, #0
 80061a0:	f7fa f892 	bl	80002c8 <__aeabi_dsub>
 80061a4:	4652      	mov	r2, sl
 80061a6:	465b      	mov	r3, fp
 80061a8:	f7fa fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	f040 80b5 	bne.w	800631c <_dtoa_r+0x6c4>
 80061b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b4:	429d      	cmp	r5, r3
 80061b6:	d081      	beq.n	80060bc <_dtoa_r+0x464>
 80061b8:	4b30      	ldr	r3, [pc, #192]	; (800627c <_dtoa_r+0x624>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	4650      	mov	r0, sl
 80061be:	4659      	mov	r1, fp
 80061c0:	f7fa fa3a 	bl	8000638 <__aeabi_dmul>
 80061c4:	4b2d      	ldr	r3, [pc, #180]	; (800627c <_dtoa_r+0x624>)
 80061c6:	4682      	mov	sl, r0
 80061c8:	468b      	mov	fp, r1
 80061ca:	4640      	mov	r0, r8
 80061cc:	4649      	mov	r1, r9
 80061ce:	2200      	movs	r2, #0
 80061d0:	f7fa fa32 	bl	8000638 <__aeabi_dmul>
 80061d4:	4680      	mov	r8, r0
 80061d6:	4689      	mov	r9, r1
 80061d8:	e7c6      	b.n	8006168 <_dtoa_r+0x510>
 80061da:	4650      	mov	r0, sl
 80061dc:	4659      	mov	r1, fp
 80061de:	f7fa fa2b 	bl	8000638 <__aeabi_dmul>
 80061e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061e4:	9d01      	ldr	r5, [sp, #4]
 80061e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	4649      	mov	r1, r9
 80061ee:	4640      	mov	r0, r8
 80061f0:	f7fa fcd2 	bl	8000b98 <__aeabi_d2iz>
 80061f4:	4606      	mov	r6, r0
 80061f6:	f7fa f9b5 	bl	8000564 <__aeabi_i2d>
 80061fa:	3630      	adds	r6, #48	; 0x30
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	4640      	mov	r0, r8
 8006202:	4649      	mov	r1, r9
 8006204:	f7fa f860 	bl	80002c8 <__aeabi_dsub>
 8006208:	f805 6b01 	strb.w	r6, [r5], #1
 800620c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800620e:	429d      	cmp	r5, r3
 8006210:	4680      	mov	r8, r0
 8006212:	4689      	mov	r9, r1
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	d124      	bne.n	8006264 <_dtoa_r+0x60c>
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <_dtoa_r+0x630>)
 800621c:	4650      	mov	r0, sl
 800621e:	4659      	mov	r1, fp
 8006220:	f7fa f854 	bl	80002cc <__adddf3>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4640      	mov	r0, r8
 800622a:	4649      	mov	r1, r9
 800622c:	f7fa fc94 	bl	8000b58 <__aeabi_dcmpgt>
 8006230:	2800      	cmp	r0, #0
 8006232:	d173      	bne.n	800631c <_dtoa_r+0x6c4>
 8006234:	4652      	mov	r2, sl
 8006236:	465b      	mov	r3, fp
 8006238:	4913      	ldr	r1, [pc, #76]	; (8006288 <_dtoa_r+0x630>)
 800623a:	2000      	movs	r0, #0
 800623c:	f7fa f844 	bl	80002c8 <__aeabi_dsub>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	4640      	mov	r0, r8
 8006246:	4649      	mov	r1, r9
 8006248:	f7fa fc68 	bl	8000b1c <__aeabi_dcmplt>
 800624c:	2800      	cmp	r0, #0
 800624e:	f43f af35 	beq.w	80060bc <_dtoa_r+0x464>
 8006252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006254:	1e6b      	subs	r3, r5, #1
 8006256:	930f      	str	r3, [sp, #60]	; 0x3c
 8006258:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800625c:	2b30      	cmp	r3, #48	; 0x30
 800625e:	d0f8      	beq.n	8006252 <_dtoa_r+0x5fa>
 8006260:	9700      	str	r7, [sp, #0]
 8006262:	e049      	b.n	80062f8 <_dtoa_r+0x6a0>
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <_dtoa_r+0x624>)
 8006266:	f7fa f9e7 	bl	8000638 <__aeabi_dmul>
 800626a:	4680      	mov	r8, r0
 800626c:	4689      	mov	r9, r1
 800626e:	e7bd      	b.n	80061ec <_dtoa_r+0x594>
 8006270:	080081a8 	.word	0x080081a8
 8006274:	08008180 	.word	0x08008180
 8006278:	3ff00000 	.word	0x3ff00000
 800627c:	40240000 	.word	0x40240000
 8006280:	401c0000 	.word	0x401c0000
 8006284:	40140000 	.word	0x40140000
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	9d01      	ldr	r5, [sp, #4]
 800628e:	4656      	mov	r6, sl
 8006290:	465f      	mov	r7, fp
 8006292:	4642      	mov	r2, r8
 8006294:	464b      	mov	r3, r9
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7fa faf7 	bl	800088c <__aeabi_ddiv>
 800629e:	f7fa fc7b 	bl	8000b98 <__aeabi_d2iz>
 80062a2:	4682      	mov	sl, r0
 80062a4:	f7fa f95e 	bl	8000564 <__aeabi_i2d>
 80062a8:	4642      	mov	r2, r8
 80062aa:	464b      	mov	r3, r9
 80062ac:	f7fa f9c4 	bl	8000638 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80062bc:	f7fa f804 	bl	80002c8 <__aeabi_dsub>
 80062c0:	f805 6b01 	strb.w	r6, [r5], #1
 80062c4:	9e01      	ldr	r6, [sp, #4]
 80062c6:	9f03      	ldr	r7, [sp, #12]
 80062c8:	1bae      	subs	r6, r5, r6
 80062ca:	42b7      	cmp	r7, r6
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	d135      	bne.n	800633e <_dtoa_r+0x6e6>
 80062d2:	f7f9 fffb 	bl	80002cc <__adddf3>
 80062d6:	4642      	mov	r2, r8
 80062d8:	464b      	mov	r3, r9
 80062da:	4606      	mov	r6, r0
 80062dc:	460f      	mov	r7, r1
 80062de:	f7fa fc3b 	bl	8000b58 <__aeabi_dcmpgt>
 80062e2:	b9d0      	cbnz	r0, 800631a <_dtoa_r+0x6c2>
 80062e4:	4642      	mov	r2, r8
 80062e6:	464b      	mov	r3, r9
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f7fa fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80062f0:	b110      	cbz	r0, 80062f8 <_dtoa_r+0x6a0>
 80062f2:	f01a 0f01 	tst.w	sl, #1
 80062f6:	d110      	bne.n	800631a <_dtoa_r+0x6c2>
 80062f8:	4620      	mov	r0, r4
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	f000 faf3 	bl	80068e8 <_Bfree>
 8006302:	2300      	movs	r3, #0
 8006304:	9800      	ldr	r0, [sp, #0]
 8006306:	702b      	strb	r3, [r5, #0]
 8006308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800630a:	3001      	adds	r0, #1
 800630c:	6018      	str	r0, [r3, #0]
 800630e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006310:	2b00      	cmp	r3, #0
 8006312:	f43f acf1 	beq.w	8005cf8 <_dtoa_r+0xa0>
 8006316:	601d      	str	r5, [r3, #0]
 8006318:	e4ee      	b.n	8005cf8 <_dtoa_r+0xa0>
 800631a:	9f00      	ldr	r7, [sp, #0]
 800631c:	462b      	mov	r3, r5
 800631e:	461d      	mov	r5, r3
 8006320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006324:	2a39      	cmp	r2, #57	; 0x39
 8006326:	d106      	bne.n	8006336 <_dtoa_r+0x6de>
 8006328:	9a01      	ldr	r2, [sp, #4]
 800632a:	429a      	cmp	r2, r3
 800632c:	d1f7      	bne.n	800631e <_dtoa_r+0x6c6>
 800632e:	9901      	ldr	r1, [sp, #4]
 8006330:	2230      	movs	r2, #48	; 0x30
 8006332:	3701      	adds	r7, #1
 8006334:	700a      	strb	r2, [r1, #0]
 8006336:	781a      	ldrb	r2, [r3, #0]
 8006338:	3201      	adds	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	e790      	b.n	8006260 <_dtoa_r+0x608>
 800633e:	4ba6      	ldr	r3, [pc, #664]	; (80065d8 <_dtoa_r+0x980>)
 8006340:	2200      	movs	r2, #0
 8006342:	f7fa f979 	bl	8000638 <__aeabi_dmul>
 8006346:	2200      	movs	r2, #0
 8006348:	2300      	movs	r3, #0
 800634a:	4606      	mov	r6, r0
 800634c:	460f      	mov	r7, r1
 800634e:	f7fa fbdb 	bl	8000b08 <__aeabi_dcmpeq>
 8006352:	2800      	cmp	r0, #0
 8006354:	d09d      	beq.n	8006292 <_dtoa_r+0x63a>
 8006356:	e7cf      	b.n	80062f8 <_dtoa_r+0x6a0>
 8006358:	9a08      	ldr	r2, [sp, #32]
 800635a:	2a00      	cmp	r2, #0
 800635c:	f000 80d7 	beq.w	800650e <_dtoa_r+0x8b6>
 8006360:	9a06      	ldr	r2, [sp, #24]
 8006362:	2a01      	cmp	r2, #1
 8006364:	f300 80ba 	bgt.w	80064dc <_dtoa_r+0x884>
 8006368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800636a:	2a00      	cmp	r2, #0
 800636c:	f000 80b2 	beq.w	80064d4 <_dtoa_r+0x87c>
 8006370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006374:	9e07      	ldr	r6, [sp, #28]
 8006376:	9d04      	ldr	r5, [sp, #16]
 8006378:	9a04      	ldr	r2, [sp, #16]
 800637a:	441a      	add	r2, r3
 800637c:	9204      	str	r2, [sp, #16]
 800637e:	9a05      	ldr	r2, [sp, #20]
 8006380:	2101      	movs	r1, #1
 8006382:	441a      	add	r2, r3
 8006384:	4620      	mov	r0, r4
 8006386:	9205      	str	r2, [sp, #20]
 8006388:	f000 fb66 	bl	8006a58 <__i2b>
 800638c:	4607      	mov	r7, r0
 800638e:	2d00      	cmp	r5, #0
 8006390:	dd0c      	ble.n	80063ac <_dtoa_r+0x754>
 8006392:	9b05      	ldr	r3, [sp, #20]
 8006394:	2b00      	cmp	r3, #0
 8006396:	dd09      	ble.n	80063ac <_dtoa_r+0x754>
 8006398:	42ab      	cmp	r3, r5
 800639a:	9a04      	ldr	r2, [sp, #16]
 800639c:	bfa8      	it	ge
 800639e:	462b      	movge	r3, r5
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	9204      	str	r2, [sp, #16]
 80063a4:	9a05      	ldr	r2, [sp, #20]
 80063a6:	1aed      	subs	r5, r5, r3
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	9305      	str	r3, [sp, #20]
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	b31b      	cbz	r3, 80063f8 <_dtoa_r+0x7a0>
 80063b0:	9b08      	ldr	r3, [sp, #32]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f000 80af 	beq.w	8006516 <_dtoa_r+0x8be>
 80063b8:	2e00      	cmp	r6, #0
 80063ba:	dd13      	ble.n	80063e4 <_dtoa_r+0x78c>
 80063bc:	4639      	mov	r1, r7
 80063be:	4632      	mov	r2, r6
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fc09 	bl	8006bd8 <__pow5mult>
 80063c6:	ee18 2a10 	vmov	r2, s16
 80063ca:	4601      	mov	r1, r0
 80063cc:	4607      	mov	r7, r0
 80063ce:	4620      	mov	r0, r4
 80063d0:	f000 fb58 	bl	8006a84 <__multiply>
 80063d4:	ee18 1a10 	vmov	r1, s16
 80063d8:	4680      	mov	r8, r0
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 fa84 	bl	80068e8 <_Bfree>
 80063e0:	ee08 8a10 	vmov	s16, r8
 80063e4:	9b07      	ldr	r3, [sp, #28]
 80063e6:	1b9a      	subs	r2, r3, r6
 80063e8:	d006      	beq.n	80063f8 <_dtoa_r+0x7a0>
 80063ea:	ee18 1a10 	vmov	r1, s16
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fbf2 	bl	8006bd8 <__pow5mult>
 80063f4:	ee08 0a10 	vmov	s16, r0
 80063f8:	2101      	movs	r1, #1
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fb2c 	bl	8006a58 <__i2b>
 8006400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	4606      	mov	r6, r0
 8006406:	f340 8088 	ble.w	800651a <_dtoa_r+0x8c2>
 800640a:	461a      	mov	r2, r3
 800640c:	4601      	mov	r1, r0
 800640e:	4620      	mov	r0, r4
 8006410:	f000 fbe2 	bl	8006bd8 <__pow5mult>
 8006414:	9b06      	ldr	r3, [sp, #24]
 8006416:	2b01      	cmp	r3, #1
 8006418:	4606      	mov	r6, r0
 800641a:	f340 8081 	ble.w	8006520 <_dtoa_r+0x8c8>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	6933      	ldr	r3, [r6, #16]
 8006424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006428:	6918      	ldr	r0, [r3, #16]
 800642a:	f000 fac5 	bl	80069b8 <__hi0bits>
 800642e:	f1c0 0020 	rsb	r0, r0, #32
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	4418      	add	r0, r3
 8006436:	f010 001f 	ands.w	r0, r0, #31
 800643a:	f000 8092 	beq.w	8006562 <_dtoa_r+0x90a>
 800643e:	f1c0 0320 	rsb	r3, r0, #32
 8006442:	2b04      	cmp	r3, #4
 8006444:	f340 808a 	ble.w	800655c <_dtoa_r+0x904>
 8006448:	f1c0 001c 	rsb	r0, r0, #28
 800644c:	9b04      	ldr	r3, [sp, #16]
 800644e:	4403      	add	r3, r0
 8006450:	9304      	str	r3, [sp, #16]
 8006452:	9b05      	ldr	r3, [sp, #20]
 8006454:	4403      	add	r3, r0
 8006456:	4405      	add	r5, r0
 8006458:	9305      	str	r3, [sp, #20]
 800645a:	9b04      	ldr	r3, [sp, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd07      	ble.n	8006470 <_dtoa_r+0x818>
 8006460:	ee18 1a10 	vmov	r1, s16
 8006464:	461a      	mov	r2, r3
 8006466:	4620      	mov	r0, r4
 8006468:	f000 fc10 	bl	8006c8c <__lshift>
 800646c:	ee08 0a10 	vmov	s16, r0
 8006470:	9b05      	ldr	r3, [sp, #20]
 8006472:	2b00      	cmp	r3, #0
 8006474:	dd05      	ble.n	8006482 <_dtoa_r+0x82a>
 8006476:	4631      	mov	r1, r6
 8006478:	461a      	mov	r2, r3
 800647a:	4620      	mov	r0, r4
 800647c:	f000 fc06 	bl	8006c8c <__lshift>
 8006480:	4606      	mov	r6, r0
 8006482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006484:	2b00      	cmp	r3, #0
 8006486:	d06e      	beq.n	8006566 <_dtoa_r+0x90e>
 8006488:	ee18 0a10 	vmov	r0, s16
 800648c:	4631      	mov	r1, r6
 800648e:	f000 fc6d 	bl	8006d6c <__mcmp>
 8006492:	2800      	cmp	r0, #0
 8006494:	da67      	bge.n	8006566 <_dtoa_r+0x90e>
 8006496:	9b00      	ldr	r3, [sp, #0]
 8006498:	3b01      	subs	r3, #1
 800649a:	ee18 1a10 	vmov	r1, s16
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	220a      	movs	r2, #10
 80064a2:	2300      	movs	r3, #0
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 fa41 	bl	800692c <__multadd>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	ee08 0a10 	vmov	s16, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 81b1 	beq.w	8006818 <_dtoa_r+0xbc0>
 80064b6:	2300      	movs	r3, #0
 80064b8:	4639      	mov	r1, r7
 80064ba:	220a      	movs	r2, #10
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fa35 	bl	800692c <__multadd>
 80064c2:	9b02      	ldr	r3, [sp, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	4607      	mov	r7, r0
 80064c8:	f300 808e 	bgt.w	80065e8 <_dtoa_r+0x990>
 80064cc:	9b06      	ldr	r3, [sp, #24]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	dc51      	bgt.n	8006576 <_dtoa_r+0x91e>
 80064d2:	e089      	b.n	80065e8 <_dtoa_r+0x990>
 80064d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064da:	e74b      	b.n	8006374 <_dtoa_r+0x71c>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	1e5e      	subs	r6, r3, #1
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	42b3      	cmp	r3, r6
 80064e4:	bfbf      	itttt	lt
 80064e6:	9b07      	ldrlt	r3, [sp, #28]
 80064e8:	9607      	strlt	r6, [sp, #28]
 80064ea:	1af2      	sublt	r2, r6, r3
 80064ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80064ee:	bfb6      	itet	lt
 80064f0:	189b      	addlt	r3, r3, r2
 80064f2:	1b9e      	subge	r6, r3, r6
 80064f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80064f6:	9b03      	ldr	r3, [sp, #12]
 80064f8:	bfb8      	it	lt
 80064fa:	2600      	movlt	r6, #0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bfb7      	itett	lt
 8006500:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006504:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006508:	1a9d      	sublt	r5, r3, r2
 800650a:	2300      	movlt	r3, #0
 800650c:	e734      	b.n	8006378 <_dtoa_r+0x720>
 800650e:	9e07      	ldr	r6, [sp, #28]
 8006510:	9d04      	ldr	r5, [sp, #16]
 8006512:	9f08      	ldr	r7, [sp, #32]
 8006514:	e73b      	b.n	800638e <_dtoa_r+0x736>
 8006516:	9a07      	ldr	r2, [sp, #28]
 8006518:	e767      	b.n	80063ea <_dtoa_r+0x792>
 800651a:	9b06      	ldr	r3, [sp, #24]
 800651c:	2b01      	cmp	r3, #1
 800651e:	dc18      	bgt.n	8006552 <_dtoa_r+0x8fa>
 8006520:	f1ba 0f00 	cmp.w	sl, #0
 8006524:	d115      	bne.n	8006552 <_dtoa_r+0x8fa>
 8006526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800652a:	b993      	cbnz	r3, 8006552 <_dtoa_r+0x8fa>
 800652c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006530:	0d1b      	lsrs	r3, r3, #20
 8006532:	051b      	lsls	r3, r3, #20
 8006534:	b183      	cbz	r3, 8006558 <_dtoa_r+0x900>
 8006536:	9b04      	ldr	r3, [sp, #16]
 8006538:	3301      	adds	r3, #1
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	9b05      	ldr	r3, [sp, #20]
 800653e:	3301      	adds	r3, #1
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	f04f 0801 	mov.w	r8, #1
 8006546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006548:	2b00      	cmp	r3, #0
 800654a:	f47f af6a 	bne.w	8006422 <_dtoa_r+0x7ca>
 800654e:	2001      	movs	r0, #1
 8006550:	e76f      	b.n	8006432 <_dtoa_r+0x7da>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	e7f6      	b.n	8006546 <_dtoa_r+0x8ee>
 8006558:	4698      	mov	r8, r3
 800655a:	e7f4      	b.n	8006546 <_dtoa_r+0x8ee>
 800655c:	f43f af7d 	beq.w	800645a <_dtoa_r+0x802>
 8006560:	4618      	mov	r0, r3
 8006562:	301c      	adds	r0, #28
 8006564:	e772      	b.n	800644c <_dtoa_r+0x7f4>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	dc37      	bgt.n	80065dc <_dtoa_r+0x984>
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	2b02      	cmp	r3, #2
 8006570:	dd34      	ble.n	80065dc <_dtoa_r+0x984>
 8006572:	9b03      	ldr	r3, [sp, #12]
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	9b02      	ldr	r3, [sp, #8]
 8006578:	b96b      	cbnz	r3, 8006596 <_dtoa_r+0x93e>
 800657a:	4631      	mov	r1, r6
 800657c:	2205      	movs	r2, #5
 800657e:	4620      	mov	r0, r4
 8006580:	f000 f9d4 	bl	800692c <__multadd>
 8006584:	4601      	mov	r1, r0
 8006586:	4606      	mov	r6, r0
 8006588:	ee18 0a10 	vmov	r0, s16
 800658c:	f000 fbee 	bl	8006d6c <__mcmp>
 8006590:	2800      	cmp	r0, #0
 8006592:	f73f adbb 	bgt.w	800610c <_dtoa_r+0x4b4>
 8006596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006598:	9d01      	ldr	r5, [sp, #4]
 800659a:	43db      	mvns	r3, r3
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	4631      	mov	r1, r6
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 f99f 	bl	80068e8 <_Bfree>
 80065aa:	2f00      	cmp	r7, #0
 80065ac:	f43f aea4 	beq.w	80062f8 <_dtoa_r+0x6a0>
 80065b0:	f1b8 0f00 	cmp.w	r8, #0
 80065b4:	d005      	beq.n	80065c2 <_dtoa_r+0x96a>
 80065b6:	45b8      	cmp	r8, r7
 80065b8:	d003      	beq.n	80065c2 <_dtoa_r+0x96a>
 80065ba:	4641      	mov	r1, r8
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 f993 	bl	80068e8 <_Bfree>
 80065c2:	4639      	mov	r1, r7
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f98f 	bl	80068e8 <_Bfree>
 80065ca:	e695      	b.n	80062f8 <_dtoa_r+0x6a0>
 80065cc:	2600      	movs	r6, #0
 80065ce:	4637      	mov	r7, r6
 80065d0:	e7e1      	b.n	8006596 <_dtoa_r+0x93e>
 80065d2:	9700      	str	r7, [sp, #0]
 80065d4:	4637      	mov	r7, r6
 80065d6:	e599      	b.n	800610c <_dtoa_r+0x4b4>
 80065d8:	40240000 	.word	0x40240000
 80065dc:	9b08      	ldr	r3, [sp, #32]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 80ca 	beq.w	8006778 <_dtoa_r+0xb20>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	9302      	str	r3, [sp, #8]
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	dd05      	ble.n	80065f8 <_dtoa_r+0x9a0>
 80065ec:	4639      	mov	r1, r7
 80065ee:	462a      	mov	r2, r5
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fb4b 	bl	8006c8c <__lshift>
 80065f6:	4607      	mov	r7, r0
 80065f8:	f1b8 0f00 	cmp.w	r8, #0
 80065fc:	d05b      	beq.n	80066b6 <_dtoa_r+0xa5e>
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4620      	mov	r0, r4
 8006602:	f000 f931 	bl	8006868 <_Balloc>
 8006606:	4605      	mov	r5, r0
 8006608:	b928      	cbnz	r0, 8006616 <_dtoa_r+0x9be>
 800660a:	4b87      	ldr	r3, [pc, #540]	; (8006828 <_dtoa_r+0xbd0>)
 800660c:	4602      	mov	r2, r0
 800660e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006612:	f7ff bb3b 	b.w	8005c8c <_dtoa_r+0x34>
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	3202      	adds	r2, #2
 800661a:	0092      	lsls	r2, r2, #2
 800661c:	f107 010c 	add.w	r1, r7, #12
 8006620:	300c      	adds	r0, #12
 8006622:	f000 f913 	bl	800684c <memcpy>
 8006626:	2201      	movs	r2, #1
 8006628:	4629      	mov	r1, r5
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fb2e 	bl	8006c8c <__lshift>
 8006630:	9b01      	ldr	r3, [sp, #4]
 8006632:	f103 0901 	add.w	r9, r3, #1
 8006636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800663a:	4413      	add	r3, r2
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	f00a 0301 	and.w	r3, sl, #1
 8006642:	46b8      	mov	r8, r7
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	4607      	mov	r7, r0
 8006648:	4631      	mov	r1, r6
 800664a:	ee18 0a10 	vmov	r0, s16
 800664e:	f7ff fa75 	bl	8005b3c <quorem>
 8006652:	4641      	mov	r1, r8
 8006654:	9002      	str	r0, [sp, #8]
 8006656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800665a:	ee18 0a10 	vmov	r0, s16
 800665e:	f000 fb85 	bl	8006d6c <__mcmp>
 8006662:	463a      	mov	r2, r7
 8006664:	9003      	str	r0, [sp, #12]
 8006666:	4631      	mov	r1, r6
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fb9b 	bl	8006da4 <__mdiff>
 800666e:	68c2      	ldr	r2, [r0, #12]
 8006670:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006674:	4605      	mov	r5, r0
 8006676:	bb02      	cbnz	r2, 80066ba <_dtoa_r+0xa62>
 8006678:	4601      	mov	r1, r0
 800667a:	ee18 0a10 	vmov	r0, s16
 800667e:	f000 fb75 	bl	8006d6c <__mcmp>
 8006682:	4602      	mov	r2, r0
 8006684:	4629      	mov	r1, r5
 8006686:	4620      	mov	r0, r4
 8006688:	9207      	str	r2, [sp, #28]
 800668a:	f000 f92d 	bl	80068e8 <_Bfree>
 800668e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006692:	ea43 0102 	orr.w	r1, r3, r2
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	430b      	orrs	r3, r1
 800669a:	464d      	mov	r5, r9
 800669c:	d10f      	bne.n	80066be <_dtoa_r+0xa66>
 800669e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066a2:	d02a      	beq.n	80066fa <_dtoa_r+0xaa2>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	dd02      	ble.n	80066b0 <_dtoa_r+0xa58>
 80066aa:	9b02      	ldr	r3, [sp, #8]
 80066ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80066b0:	f88b a000 	strb.w	sl, [fp]
 80066b4:	e775      	b.n	80065a2 <_dtoa_r+0x94a>
 80066b6:	4638      	mov	r0, r7
 80066b8:	e7ba      	b.n	8006630 <_dtoa_r+0x9d8>
 80066ba:	2201      	movs	r2, #1
 80066bc:	e7e2      	b.n	8006684 <_dtoa_r+0xa2c>
 80066be:	9b03      	ldr	r3, [sp, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db04      	blt.n	80066ce <_dtoa_r+0xa76>
 80066c4:	9906      	ldr	r1, [sp, #24]
 80066c6:	430b      	orrs	r3, r1
 80066c8:	9904      	ldr	r1, [sp, #16]
 80066ca:	430b      	orrs	r3, r1
 80066cc:	d122      	bne.n	8006714 <_dtoa_r+0xabc>
 80066ce:	2a00      	cmp	r2, #0
 80066d0:	ddee      	ble.n	80066b0 <_dtoa_r+0xa58>
 80066d2:	ee18 1a10 	vmov	r1, s16
 80066d6:	2201      	movs	r2, #1
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 fad7 	bl	8006c8c <__lshift>
 80066de:	4631      	mov	r1, r6
 80066e0:	ee08 0a10 	vmov	s16, r0
 80066e4:	f000 fb42 	bl	8006d6c <__mcmp>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	dc03      	bgt.n	80066f4 <_dtoa_r+0xa9c>
 80066ec:	d1e0      	bne.n	80066b0 <_dtoa_r+0xa58>
 80066ee:	f01a 0f01 	tst.w	sl, #1
 80066f2:	d0dd      	beq.n	80066b0 <_dtoa_r+0xa58>
 80066f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80066f8:	d1d7      	bne.n	80066aa <_dtoa_r+0xa52>
 80066fa:	2339      	movs	r3, #57	; 0x39
 80066fc:	f88b 3000 	strb.w	r3, [fp]
 8006700:	462b      	mov	r3, r5
 8006702:	461d      	mov	r5, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800670a:	2a39      	cmp	r2, #57	; 0x39
 800670c:	d071      	beq.n	80067f2 <_dtoa_r+0xb9a>
 800670e:	3201      	adds	r2, #1
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	e746      	b.n	80065a2 <_dtoa_r+0x94a>
 8006714:	2a00      	cmp	r2, #0
 8006716:	dd07      	ble.n	8006728 <_dtoa_r+0xad0>
 8006718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800671c:	d0ed      	beq.n	80066fa <_dtoa_r+0xaa2>
 800671e:	f10a 0301 	add.w	r3, sl, #1
 8006722:	f88b 3000 	strb.w	r3, [fp]
 8006726:	e73c      	b.n	80065a2 <_dtoa_r+0x94a>
 8006728:	9b05      	ldr	r3, [sp, #20]
 800672a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800672e:	4599      	cmp	r9, r3
 8006730:	d047      	beq.n	80067c2 <_dtoa_r+0xb6a>
 8006732:	ee18 1a10 	vmov	r1, s16
 8006736:	2300      	movs	r3, #0
 8006738:	220a      	movs	r2, #10
 800673a:	4620      	mov	r0, r4
 800673c:	f000 f8f6 	bl	800692c <__multadd>
 8006740:	45b8      	cmp	r8, r7
 8006742:	ee08 0a10 	vmov	s16, r0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	f04f 020a 	mov.w	r2, #10
 800674e:	4641      	mov	r1, r8
 8006750:	4620      	mov	r0, r4
 8006752:	d106      	bne.n	8006762 <_dtoa_r+0xb0a>
 8006754:	f000 f8ea 	bl	800692c <__multadd>
 8006758:	4680      	mov	r8, r0
 800675a:	4607      	mov	r7, r0
 800675c:	f109 0901 	add.w	r9, r9, #1
 8006760:	e772      	b.n	8006648 <_dtoa_r+0x9f0>
 8006762:	f000 f8e3 	bl	800692c <__multadd>
 8006766:	4639      	mov	r1, r7
 8006768:	4680      	mov	r8, r0
 800676a:	2300      	movs	r3, #0
 800676c:	220a      	movs	r2, #10
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f8dc 	bl	800692c <__multadd>
 8006774:	4607      	mov	r7, r0
 8006776:	e7f1      	b.n	800675c <_dtoa_r+0xb04>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	9302      	str	r3, [sp, #8]
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	ee18 0a10 	vmov	r0, s16
 8006782:	4631      	mov	r1, r6
 8006784:	f7ff f9da 	bl	8005b3c <quorem>
 8006788:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	f805 ab01 	strb.w	sl, [r5], #1
 8006792:	1aea      	subs	r2, r5, r3
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	4293      	cmp	r3, r2
 8006798:	dd09      	ble.n	80067ae <_dtoa_r+0xb56>
 800679a:	ee18 1a10 	vmov	r1, s16
 800679e:	2300      	movs	r3, #0
 80067a0:	220a      	movs	r2, #10
 80067a2:	4620      	mov	r0, r4
 80067a4:	f000 f8c2 	bl	800692c <__multadd>
 80067a8:	ee08 0a10 	vmov	s16, r0
 80067ac:	e7e7      	b.n	800677e <_dtoa_r+0xb26>
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bfc8      	it	gt
 80067b4:	461d      	movgt	r5, r3
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	bfd8      	it	le
 80067ba:	2501      	movle	r5, #1
 80067bc:	441d      	add	r5, r3
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	ee18 1a10 	vmov	r1, s16
 80067c6:	2201      	movs	r2, #1
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fa5f 	bl	8006c8c <__lshift>
 80067ce:	4631      	mov	r1, r6
 80067d0:	ee08 0a10 	vmov	s16, r0
 80067d4:	f000 faca 	bl	8006d6c <__mcmp>
 80067d8:	2800      	cmp	r0, #0
 80067da:	dc91      	bgt.n	8006700 <_dtoa_r+0xaa8>
 80067dc:	d102      	bne.n	80067e4 <_dtoa_r+0xb8c>
 80067de:	f01a 0f01 	tst.w	sl, #1
 80067e2:	d18d      	bne.n	8006700 <_dtoa_r+0xaa8>
 80067e4:	462b      	mov	r3, r5
 80067e6:	461d      	mov	r5, r3
 80067e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067ec:	2a30      	cmp	r2, #48	; 0x30
 80067ee:	d0fa      	beq.n	80067e6 <_dtoa_r+0xb8e>
 80067f0:	e6d7      	b.n	80065a2 <_dtoa_r+0x94a>
 80067f2:	9a01      	ldr	r2, [sp, #4]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d184      	bne.n	8006702 <_dtoa_r+0xaaa>
 80067f8:	9b00      	ldr	r3, [sp, #0]
 80067fa:	3301      	adds	r3, #1
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	2331      	movs	r3, #49	; 0x31
 8006800:	7013      	strb	r3, [r2, #0]
 8006802:	e6ce      	b.n	80065a2 <_dtoa_r+0x94a>
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <_dtoa_r+0xbd4>)
 8006806:	f7ff ba95 	b.w	8005d34 <_dtoa_r+0xdc>
 800680a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800680c:	2b00      	cmp	r3, #0
 800680e:	f47f aa6e 	bne.w	8005cee <_dtoa_r+0x96>
 8006812:	4b07      	ldr	r3, [pc, #28]	; (8006830 <_dtoa_r+0xbd8>)
 8006814:	f7ff ba8e 	b.w	8005d34 <_dtoa_r+0xdc>
 8006818:	9b02      	ldr	r3, [sp, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dcae      	bgt.n	800677c <_dtoa_r+0xb24>
 800681e:	9b06      	ldr	r3, [sp, #24]
 8006820:	2b02      	cmp	r3, #2
 8006822:	f73f aea8 	bgt.w	8006576 <_dtoa_r+0x91e>
 8006826:	e7a9      	b.n	800677c <_dtoa_r+0xb24>
 8006828:	0800810f 	.word	0x0800810f
 800682c:	0800806c 	.word	0x0800806c
 8006830:	08008090 	.word	0x08008090

08006834 <_localeconv_r>:
 8006834:	4800      	ldr	r0, [pc, #0]	; (8006838 <_localeconv_r+0x4>)
 8006836:	4770      	bx	lr
 8006838:	20000160 	.word	0x20000160

0800683c <malloc>:
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <malloc+0xc>)
 800683e:	4601      	mov	r1, r0
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f000 bc17 	b.w	8007074 <_malloc_r>
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c

0800684c <memcpy>:
 800684c:	440a      	add	r2, r1
 800684e:	4291      	cmp	r1, r2
 8006850:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006854:	d100      	bne.n	8006858 <memcpy+0xc>
 8006856:	4770      	bx	lr
 8006858:	b510      	push	{r4, lr}
 800685a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800685e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006862:	4291      	cmp	r1, r2
 8006864:	d1f9      	bne.n	800685a <memcpy+0xe>
 8006866:	bd10      	pop	{r4, pc}

08006868 <_Balloc>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	b976      	cbnz	r6, 8006890 <_Balloc+0x28>
 8006872:	2010      	movs	r0, #16
 8006874:	f7ff ffe2 	bl	800683c <malloc>
 8006878:	4602      	mov	r2, r0
 800687a:	6260      	str	r0, [r4, #36]	; 0x24
 800687c:	b920      	cbnz	r0, 8006888 <_Balloc+0x20>
 800687e:	4b18      	ldr	r3, [pc, #96]	; (80068e0 <_Balloc+0x78>)
 8006880:	4818      	ldr	r0, [pc, #96]	; (80068e4 <_Balloc+0x7c>)
 8006882:	2166      	movs	r1, #102	; 0x66
 8006884:	f000 fdd6 	bl	8007434 <__assert_func>
 8006888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800688c:	6006      	str	r6, [r0, #0]
 800688e:	60c6      	str	r6, [r0, #12]
 8006890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006892:	68f3      	ldr	r3, [r6, #12]
 8006894:	b183      	cbz	r3, 80068b8 <_Balloc+0x50>
 8006896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800689e:	b9b8      	cbnz	r0, 80068d0 <_Balloc+0x68>
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f605 	lsl.w	r6, r1, r5
 80068a6:	1d72      	adds	r2, r6, #5
 80068a8:	0092      	lsls	r2, r2, #2
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 fb60 	bl	8006f70 <_calloc_r>
 80068b0:	b160      	cbz	r0, 80068cc <_Balloc+0x64>
 80068b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068b6:	e00e      	b.n	80068d6 <_Balloc+0x6e>
 80068b8:	2221      	movs	r2, #33	; 0x21
 80068ba:	2104      	movs	r1, #4
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fb57 	bl	8006f70 <_calloc_r>
 80068c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068c4:	60f0      	str	r0, [r6, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e4      	bne.n	8006896 <_Balloc+0x2e>
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	6802      	ldr	r2, [r0, #0]
 80068d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068d6:	2300      	movs	r3, #0
 80068d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068dc:	e7f7      	b.n	80068ce <_Balloc+0x66>
 80068de:	bf00      	nop
 80068e0:	0800809d 	.word	0x0800809d
 80068e4:	08008120 	.word	0x08008120

080068e8 <_Bfree>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80068ec:	4605      	mov	r5, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	b976      	cbnz	r6, 8006910 <_Bfree+0x28>
 80068f2:	2010      	movs	r0, #16
 80068f4:	f7ff ffa2 	bl	800683c <malloc>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6268      	str	r0, [r5, #36]	; 0x24
 80068fc:	b920      	cbnz	r0, 8006908 <_Bfree+0x20>
 80068fe:	4b09      	ldr	r3, [pc, #36]	; (8006924 <_Bfree+0x3c>)
 8006900:	4809      	ldr	r0, [pc, #36]	; (8006928 <_Bfree+0x40>)
 8006902:	218a      	movs	r1, #138	; 0x8a
 8006904:	f000 fd96 	bl	8007434 <__assert_func>
 8006908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800690c:	6006      	str	r6, [r0, #0]
 800690e:	60c6      	str	r6, [r0, #12]
 8006910:	b13c      	cbz	r4, 8006922 <_Bfree+0x3a>
 8006912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800691c:	6021      	str	r1, [r4, #0]
 800691e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	0800809d 	.word	0x0800809d
 8006928:	08008120 	.word	0x08008120

0800692c <__multadd>:
 800692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006930:	690d      	ldr	r5, [r1, #16]
 8006932:	4607      	mov	r7, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461e      	mov	r6, r3
 8006938:	f101 0c14 	add.w	ip, r1, #20
 800693c:	2000      	movs	r0, #0
 800693e:	f8dc 3000 	ldr.w	r3, [ip]
 8006942:	b299      	uxth	r1, r3
 8006944:	fb02 6101 	mla	r1, r2, r1, r6
 8006948:	0c1e      	lsrs	r6, r3, #16
 800694a:	0c0b      	lsrs	r3, r1, #16
 800694c:	fb02 3306 	mla	r3, r2, r6, r3
 8006950:	b289      	uxth	r1, r1
 8006952:	3001      	adds	r0, #1
 8006954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006958:	4285      	cmp	r5, r0
 800695a:	f84c 1b04 	str.w	r1, [ip], #4
 800695e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006962:	dcec      	bgt.n	800693e <__multadd+0x12>
 8006964:	b30e      	cbz	r6, 80069aa <__multadd+0x7e>
 8006966:	68a3      	ldr	r3, [r4, #8]
 8006968:	42ab      	cmp	r3, r5
 800696a:	dc19      	bgt.n	80069a0 <__multadd+0x74>
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	4638      	mov	r0, r7
 8006970:	3101      	adds	r1, #1
 8006972:	f7ff ff79 	bl	8006868 <_Balloc>
 8006976:	4680      	mov	r8, r0
 8006978:	b928      	cbnz	r0, 8006986 <__multadd+0x5a>
 800697a:	4602      	mov	r2, r0
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <__multadd+0x84>)
 800697e:	480d      	ldr	r0, [pc, #52]	; (80069b4 <__multadd+0x88>)
 8006980:	21b5      	movs	r1, #181	; 0xb5
 8006982:	f000 fd57 	bl	8007434 <__assert_func>
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	3202      	adds	r2, #2
 800698a:	f104 010c 	add.w	r1, r4, #12
 800698e:	0092      	lsls	r2, r2, #2
 8006990:	300c      	adds	r0, #12
 8006992:	f7ff ff5b 	bl	800684c <memcpy>
 8006996:	4621      	mov	r1, r4
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ffa5 	bl	80068e8 <_Bfree>
 800699e:	4644      	mov	r4, r8
 80069a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069a4:	3501      	adds	r5, #1
 80069a6:	615e      	str	r6, [r3, #20]
 80069a8:	6125      	str	r5, [r4, #16]
 80069aa:	4620      	mov	r0, r4
 80069ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b0:	0800810f 	.word	0x0800810f
 80069b4:	08008120 	.word	0x08008120

080069b8 <__hi0bits>:
 80069b8:	0c03      	lsrs	r3, r0, #16
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	b9d3      	cbnz	r3, 80069f4 <__hi0bits+0x3c>
 80069be:	0400      	lsls	r0, r0, #16
 80069c0:	2310      	movs	r3, #16
 80069c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069c6:	bf04      	itt	eq
 80069c8:	0200      	lsleq	r0, r0, #8
 80069ca:	3308      	addeq	r3, #8
 80069cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069d0:	bf04      	itt	eq
 80069d2:	0100      	lsleq	r0, r0, #4
 80069d4:	3304      	addeq	r3, #4
 80069d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069da:	bf04      	itt	eq
 80069dc:	0080      	lsleq	r0, r0, #2
 80069de:	3302      	addeq	r3, #2
 80069e0:	2800      	cmp	r0, #0
 80069e2:	db05      	blt.n	80069f0 <__hi0bits+0x38>
 80069e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069e8:	f103 0301 	add.w	r3, r3, #1
 80069ec:	bf08      	it	eq
 80069ee:	2320      	moveq	r3, #32
 80069f0:	4618      	mov	r0, r3
 80069f2:	4770      	bx	lr
 80069f4:	2300      	movs	r3, #0
 80069f6:	e7e4      	b.n	80069c2 <__hi0bits+0xa>

080069f8 <__lo0bits>:
 80069f8:	6803      	ldr	r3, [r0, #0]
 80069fa:	f013 0207 	ands.w	r2, r3, #7
 80069fe:	4601      	mov	r1, r0
 8006a00:	d00b      	beq.n	8006a1a <__lo0bits+0x22>
 8006a02:	07da      	lsls	r2, r3, #31
 8006a04:	d423      	bmi.n	8006a4e <__lo0bits+0x56>
 8006a06:	0798      	lsls	r0, r3, #30
 8006a08:	bf49      	itett	mi
 8006a0a:	085b      	lsrmi	r3, r3, #1
 8006a0c:	089b      	lsrpl	r3, r3, #2
 8006a0e:	2001      	movmi	r0, #1
 8006a10:	600b      	strmi	r3, [r1, #0]
 8006a12:	bf5c      	itt	pl
 8006a14:	600b      	strpl	r3, [r1, #0]
 8006a16:	2002      	movpl	r0, #2
 8006a18:	4770      	bx	lr
 8006a1a:	b298      	uxth	r0, r3
 8006a1c:	b9a8      	cbnz	r0, 8006a4a <__lo0bits+0x52>
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	2010      	movs	r0, #16
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	b90a      	cbnz	r2, 8006a2a <__lo0bits+0x32>
 8006a26:	3008      	adds	r0, #8
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	071a      	lsls	r2, r3, #28
 8006a2c:	bf04      	itt	eq
 8006a2e:	091b      	lsreq	r3, r3, #4
 8006a30:	3004      	addeq	r0, #4
 8006a32:	079a      	lsls	r2, r3, #30
 8006a34:	bf04      	itt	eq
 8006a36:	089b      	lsreq	r3, r3, #2
 8006a38:	3002      	addeq	r0, #2
 8006a3a:	07da      	lsls	r2, r3, #31
 8006a3c:	d403      	bmi.n	8006a46 <__lo0bits+0x4e>
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	f100 0001 	add.w	r0, r0, #1
 8006a44:	d005      	beq.n	8006a52 <__lo0bits+0x5a>
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	4770      	bx	lr
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	e7e9      	b.n	8006a22 <__lo0bits+0x2a>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	4770      	bx	lr
 8006a52:	2020      	movs	r0, #32
 8006a54:	4770      	bx	lr
	...

08006a58 <__i2b>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	f7ff ff03 	bl	8006868 <_Balloc>
 8006a62:	4602      	mov	r2, r0
 8006a64:	b928      	cbnz	r0, 8006a72 <__i2b+0x1a>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <__i2b+0x24>)
 8006a68:	4805      	ldr	r0, [pc, #20]	; (8006a80 <__i2b+0x28>)
 8006a6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a6e:	f000 fce1 	bl	8007434 <__assert_func>
 8006a72:	2301      	movs	r3, #1
 8006a74:	6144      	str	r4, [r0, #20]
 8006a76:	6103      	str	r3, [r0, #16]
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	0800810f 	.word	0x0800810f
 8006a80:	08008120 	.word	0x08008120

08006a84 <__multiply>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	4691      	mov	r9, r2
 8006a8a:	690a      	ldr	r2, [r1, #16]
 8006a8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	bfb8      	it	lt
 8006a94:	460b      	movlt	r3, r1
 8006a96:	460c      	mov	r4, r1
 8006a98:	bfbc      	itt	lt
 8006a9a:	464c      	movlt	r4, r9
 8006a9c:	4699      	movlt	r9, r3
 8006a9e:	6927      	ldr	r7, [r4, #16]
 8006aa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aa4:	68a3      	ldr	r3, [r4, #8]
 8006aa6:	6861      	ldr	r1, [r4, #4]
 8006aa8:	eb07 060a 	add.w	r6, r7, sl
 8006aac:	42b3      	cmp	r3, r6
 8006aae:	b085      	sub	sp, #20
 8006ab0:	bfb8      	it	lt
 8006ab2:	3101      	addlt	r1, #1
 8006ab4:	f7ff fed8 	bl	8006868 <_Balloc>
 8006ab8:	b930      	cbnz	r0, 8006ac8 <__multiply+0x44>
 8006aba:	4602      	mov	r2, r0
 8006abc:	4b44      	ldr	r3, [pc, #272]	; (8006bd0 <__multiply+0x14c>)
 8006abe:	4845      	ldr	r0, [pc, #276]	; (8006bd4 <__multiply+0x150>)
 8006ac0:	f240 115d 	movw	r1, #349	; 0x15d
 8006ac4:	f000 fcb6 	bl	8007434 <__assert_func>
 8006ac8:	f100 0514 	add.w	r5, r0, #20
 8006acc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	d321      	bcc.n	8006b1c <__multiply+0x98>
 8006ad8:	f104 0314 	add.w	r3, r4, #20
 8006adc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ae0:	f109 0314 	add.w	r3, r9, #20
 8006ae4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ae8:	9202      	str	r2, [sp, #8]
 8006aea:	1b3a      	subs	r2, r7, r4
 8006aec:	3a15      	subs	r2, #21
 8006aee:	f022 0203 	bic.w	r2, r2, #3
 8006af2:	3204      	adds	r2, #4
 8006af4:	f104 0115 	add.w	r1, r4, #21
 8006af8:	428f      	cmp	r7, r1
 8006afa:	bf38      	it	cc
 8006afc:	2204      	movcc	r2, #4
 8006afe:	9201      	str	r2, [sp, #4]
 8006b00:	9a02      	ldr	r2, [sp, #8]
 8006b02:	9303      	str	r3, [sp, #12]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d80c      	bhi.n	8006b22 <__multiply+0x9e>
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	dd03      	ble.n	8006b14 <__multiply+0x90>
 8006b0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d05a      	beq.n	8006bca <__multiply+0x146>
 8006b14:	6106      	str	r6, [r0, #16]
 8006b16:	b005      	add	sp, #20
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	f843 2b04 	str.w	r2, [r3], #4
 8006b20:	e7d8      	b.n	8006ad4 <__multiply+0x50>
 8006b22:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b26:	f1ba 0f00 	cmp.w	sl, #0
 8006b2a:	d024      	beq.n	8006b76 <__multiply+0xf2>
 8006b2c:	f104 0e14 	add.w	lr, r4, #20
 8006b30:	46a9      	mov	r9, r5
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b3a:	f8d9 1000 	ldr.w	r1, [r9]
 8006b3e:	fa1f fb82 	uxth.w	fp, r2
 8006b42:	b289      	uxth	r1, r1
 8006b44:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b50:	4461      	add	r1, ip
 8006b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b56:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b5e:	b289      	uxth	r1, r1
 8006b60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b64:	4577      	cmp	r7, lr
 8006b66:	f849 1b04 	str.w	r1, [r9], #4
 8006b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b6e:	d8e2      	bhi.n	8006b36 <__multiply+0xb2>
 8006b70:	9a01      	ldr	r2, [sp, #4]
 8006b72:	f845 c002 	str.w	ip, [r5, r2]
 8006b76:	9a03      	ldr	r2, [sp, #12]
 8006b78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	f1b9 0f00 	cmp.w	r9, #0
 8006b82:	d020      	beq.n	8006bc6 <__multiply+0x142>
 8006b84:	6829      	ldr	r1, [r5, #0]
 8006b86:	f104 0c14 	add.w	ip, r4, #20
 8006b8a:	46ae      	mov	lr, r5
 8006b8c:	f04f 0a00 	mov.w	sl, #0
 8006b90:	f8bc b000 	ldrh.w	fp, [ip]
 8006b94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b98:	fb09 220b 	mla	r2, r9, fp, r2
 8006b9c:	4492      	add	sl, r2
 8006b9e:	b289      	uxth	r1, r1
 8006ba0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006ba4:	f84e 1b04 	str.w	r1, [lr], #4
 8006ba8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006bac:	f8be 1000 	ldrh.w	r1, [lr]
 8006bb0:	0c12      	lsrs	r2, r2, #16
 8006bb2:	fb09 1102 	mla	r1, r9, r2, r1
 8006bb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006bba:	4567      	cmp	r7, ip
 8006bbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bc0:	d8e6      	bhi.n	8006b90 <__multiply+0x10c>
 8006bc2:	9a01      	ldr	r2, [sp, #4]
 8006bc4:	50a9      	str	r1, [r5, r2]
 8006bc6:	3504      	adds	r5, #4
 8006bc8:	e79a      	b.n	8006b00 <__multiply+0x7c>
 8006bca:	3e01      	subs	r6, #1
 8006bcc:	e79c      	b.n	8006b08 <__multiply+0x84>
 8006bce:	bf00      	nop
 8006bd0:	0800810f 	.word	0x0800810f
 8006bd4:	08008120 	.word	0x08008120

08006bd8 <__pow5mult>:
 8006bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bdc:	4615      	mov	r5, r2
 8006bde:	f012 0203 	ands.w	r2, r2, #3
 8006be2:	4606      	mov	r6, r0
 8006be4:	460f      	mov	r7, r1
 8006be6:	d007      	beq.n	8006bf8 <__pow5mult+0x20>
 8006be8:	4c25      	ldr	r4, [pc, #148]	; (8006c80 <__pow5mult+0xa8>)
 8006bea:	3a01      	subs	r2, #1
 8006bec:	2300      	movs	r3, #0
 8006bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bf2:	f7ff fe9b 	bl	800692c <__multadd>
 8006bf6:	4607      	mov	r7, r0
 8006bf8:	10ad      	asrs	r5, r5, #2
 8006bfa:	d03d      	beq.n	8006c78 <__pow5mult+0xa0>
 8006bfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006bfe:	b97c      	cbnz	r4, 8006c20 <__pow5mult+0x48>
 8006c00:	2010      	movs	r0, #16
 8006c02:	f7ff fe1b 	bl	800683c <malloc>
 8006c06:	4602      	mov	r2, r0
 8006c08:	6270      	str	r0, [r6, #36]	; 0x24
 8006c0a:	b928      	cbnz	r0, 8006c18 <__pow5mult+0x40>
 8006c0c:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <__pow5mult+0xac>)
 8006c0e:	481e      	ldr	r0, [pc, #120]	; (8006c88 <__pow5mult+0xb0>)
 8006c10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c14:	f000 fc0e 	bl	8007434 <__assert_func>
 8006c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c1c:	6004      	str	r4, [r0, #0]
 8006c1e:	60c4      	str	r4, [r0, #12]
 8006c20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c28:	b94c      	cbnz	r4, 8006c3e <__pow5mult+0x66>
 8006c2a:	f240 2171 	movw	r1, #625	; 0x271
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f7ff ff12 	bl	8006a58 <__i2b>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	6003      	str	r3, [r0, #0]
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	07eb      	lsls	r3, r5, #31
 8006c44:	d50a      	bpl.n	8006c5c <__pow5mult+0x84>
 8006c46:	4639      	mov	r1, r7
 8006c48:	4622      	mov	r2, r4
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7ff ff1a 	bl	8006a84 <__multiply>
 8006c50:	4639      	mov	r1, r7
 8006c52:	4680      	mov	r8, r0
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7ff fe47 	bl	80068e8 <_Bfree>
 8006c5a:	4647      	mov	r7, r8
 8006c5c:	106d      	asrs	r5, r5, #1
 8006c5e:	d00b      	beq.n	8006c78 <__pow5mult+0xa0>
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	b938      	cbnz	r0, 8006c74 <__pow5mult+0x9c>
 8006c64:	4622      	mov	r2, r4
 8006c66:	4621      	mov	r1, r4
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f7ff ff0b 	bl	8006a84 <__multiply>
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	f8c0 9000 	str.w	r9, [r0]
 8006c74:	4604      	mov	r4, r0
 8006c76:	e7e4      	b.n	8006c42 <__pow5mult+0x6a>
 8006c78:	4638      	mov	r0, r7
 8006c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7e:	bf00      	nop
 8006c80:	08008270 	.word	0x08008270
 8006c84:	0800809d 	.word	0x0800809d
 8006c88:	08008120 	.word	0x08008120

08006c8c <__lshift>:
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	460c      	mov	r4, r1
 8006c92:	6849      	ldr	r1, [r1, #4]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c9a:	68a3      	ldr	r3, [r4, #8]
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	4691      	mov	r9, r2
 8006ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ca4:	f108 0601 	add.w	r6, r8, #1
 8006ca8:	42b3      	cmp	r3, r6
 8006caa:	db0b      	blt.n	8006cc4 <__lshift+0x38>
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff fddb 	bl	8006868 <_Balloc>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	b948      	cbnz	r0, 8006cca <__lshift+0x3e>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	4b2a      	ldr	r3, [pc, #168]	; (8006d64 <__lshift+0xd8>)
 8006cba:	482b      	ldr	r0, [pc, #172]	; (8006d68 <__lshift+0xdc>)
 8006cbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006cc0:	f000 fbb8 	bl	8007434 <__assert_func>
 8006cc4:	3101      	adds	r1, #1
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	e7ee      	b.n	8006ca8 <__lshift+0x1c>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f100 0114 	add.w	r1, r0, #20
 8006cd0:	f100 0210 	add.w	r2, r0, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	4553      	cmp	r3, sl
 8006cd8:	db37      	blt.n	8006d4a <__lshift+0xbe>
 8006cda:	6920      	ldr	r0, [r4, #16]
 8006cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ce0:	f104 0314 	add.w	r3, r4, #20
 8006ce4:	f019 091f 	ands.w	r9, r9, #31
 8006ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006cec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006cf0:	d02f      	beq.n	8006d52 <__lshift+0xc6>
 8006cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8006cf6:	468a      	mov	sl, r1
 8006cf8:	f04f 0c00 	mov.w	ip, #0
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	fa02 f209 	lsl.w	r2, r2, r9
 8006d02:	ea42 020c 	orr.w	r2, r2, ip
 8006d06:	f84a 2b04 	str.w	r2, [sl], #4
 8006d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0e:	4298      	cmp	r0, r3
 8006d10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006d14:	d8f2      	bhi.n	8006cfc <__lshift+0x70>
 8006d16:	1b03      	subs	r3, r0, r4
 8006d18:	3b15      	subs	r3, #21
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	3304      	adds	r3, #4
 8006d20:	f104 0215 	add.w	r2, r4, #21
 8006d24:	4290      	cmp	r0, r2
 8006d26:	bf38      	it	cc
 8006d28:	2304      	movcc	r3, #4
 8006d2a:	f841 c003 	str.w	ip, [r1, r3]
 8006d2e:	f1bc 0f00 	cmp.w	ip, #0
 8006d32:	d001      	beq.n	8006d38 <__lshift+0xac>
 8006d34:	f108 0602 	add.w	r6, r8, #2
 8006d38:	3e01      	subs	r6, #1
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	612e      	str	r6, [r5, #16]
 8006d3e:	4621      	mov	r1, r4
 8006d40:	f7ff fdd2 	bl	80068e8 <_Bfree>
 8006d44:	4628      	mov	r0, r5
 8006d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d4e:	3301      	adds	r3, #1
 8006d50:	e7c1      	b.n	8006cd6 <__lshift+0x4a>
 8006d52:	3904      	subs	r1, #4
 8006d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d5c:	4298      	cmp	r0, r3
 8006d5e:	d8f9      	bhi.n	8006d54 <__lshift+0xc8>
 8006d60:	e7ea      	b.n	8006d38 <__lshift+0xac>
 8006d62:	bf00      	nop
 8006d64:	0800810f 	.word	0x0800810f
 8006d68:	08008120 	.word	0x08008120

08006d6c <__mcmp>:
 8006d6c:	b530      	push	{r4, r5, lr}
 8006d6e:	6902      	ldr	r2, [r0, #16]
 8006d70:	690c      	ldr	r4, [r1, #16]
 8006d72:	1b12      	subs	r2, r2, r4
 8006d74:	d10e      	bne.n	8006d94 <__mcmp+0x28>
 8006d76:	f100 0314 	add.w	r3, r0, #20
 8006d7a:	3114      	adds	r1, #20
 8006d7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d8c:	42a5      	cmp	r5, r4
 8006d8e:	d003      	beq.n	8006d98 <__mcmp+0x2c>
 8006d90:	d305      	bcc.n	8006d9e <__mcmp+0x32>
 8006d92:	2201      	movs	r2, #1
 8006d94:	4610      	mov	r0, r2
 8006d96:	bd30      	pop	{r4, r5, pc}
 8006d98:	4283      	cmp	r3, r0
 8006d9a:	d3f3      	bcc.n	8006d84 <__mcmp+0x18>
 8006d9c:	e7fa      	b.n	8006d94 <__mcmp+0x28>
 8006d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da2:	e7f7      	b.n	8006d94 <__mcmp+0x28>

08006da4 <__mdiff>:
 8006da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da8:	460c      	mov	r4, r1
 8006daa:	4606      	mov	r6, r0
 8006dac:	4611      	mov	r1, r2
 8006dae:	4620      	mov	r0, r4
 8006db0:	4690      	mov	r8, r2
 8006db2:	f7ff ffdb 	bl	8006d6c <__mcmp>
 8006db6:	1e05      	subs	r5, r0, #0
 8006db8:	d110      	bne.n	8006ddc <__mdiff+0x38>
 8006dba:	4629      	mov	r1, r5
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff fd53 	bl	8006868 <_Balloc>
 8006dc2:	b930      	cbnz	r0, 8006dd2 <__mdiff+0x2e>
 8006dc4:	4b3a      	ldr	r3, [pc, #232]	; (8006eb0 <__mdiff+0x10c>)
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	f240 2132 	movw	r1, #562	; 0x232
 8006dcc:	4839      	ldr	r0, [pc, #228]	; (8006eb4 <__mdiff+0x110>)
 8006dce:	f000 fb31 	bl	8007434 <__assert_func>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	bfa4      	itt	ge
 8006dde:	4643      	movge	r3, r8
 8006de0:	46a0      	movge	r8, r4
 8006de2:	4630      	mov	r0, r6
 8006de4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006de8:	bfa6      	itte	ge
 8006dea:	461c      	movge	r4, r3
 8006dec:	2500      	movge	r5, #0
 8006dee:	2501      	movlt	r5, #1
 8006df0:	f7ff fd3a 	bl	8006868 <_Balloc>
 8006df4:	b920      	cbnz	r0, 8006e00 <__mdiff+0x5c>
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <__mdiff+0x10c>)
 8006df8:	4602      	mov	r2, r0
 8006dfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006dfe:	e7e5      	b.n	8006dcc <__mdiff+0x28>
 8006e00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e04:	6926      	ldr	r6, [r4, #16]
 8006e06:	60c5      	str	r5, [r0, #12]
 8006e08:	f104 0914 	add.w	r9, r4, #20
 8006e0c:	f108 0514 	add.w	r5, r8, #20
 8006e10:	f100 0e14 	add.w	lr, r0, #20
 8006e14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e1c:	f108 0210 	add.w	r2, r8, #16
 8006e20:	46f2      	mov	sl, lr
 8006e22:	2100      	movs	r1, #0
 8006e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e2c:	fa1f f883 	uxth.w	r8, r3
 8006e30:	fa11 f18b 	uxtah	r1, r1, fp
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	eba1 0808 	sub.w	r8, r1, r8
 8006e3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e42:	fa1f f888 	uxth.w	r8, r8
 8006e46:	1419      	asrs	r1, r3, #16
 8006e48:	454e      	cmp	r6, r9
 8006e4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e4e:	f84a 3b04 	str.w	r3, [sl], #4
 8006e52:	d8e7      	bhi.n	8006e24 <__mdiff+0x80>
 8006e54:	1b33      	subs	r3, r6, r4
 8006e56:	3b15      	subs	r3, #21
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	3415      	adds	r4, #21
 8006e60:	42a6      	cmp	r6, r4
 8006e62:	bf38      	it	cc
 8006e64:	2304      	movcc	r3, #4
 8006e66:	441d      	add	r5, r3
 8006e68:	4473      	add	r3, lr
 8006e6a:	469e      	mov	lr, r3
 8006e6c:	462e      	mov	r6, r5
 8006e6e:	4566      	cmp	r6, ip
 8006e70:	d30e      	bcc.n	8006e90 <__mdiff+0xec>
 8006e72:	f10c 0203 	add.w	r2, ip, #3
 8006e76:	1b52      	subs	r2, r2, r5
 8006e78:	f022 0203 	bic.w	r2, r2, #3
 8006e7c:	3d03      	subs	r5, #3
 8006e7e:	45ac      	cmp	ip, r5
 8006e80:	bf38      	it	cc
 8006e82:	2200      	movcc	r2, #0
 8006e84:	441a      	add	r2, r3
 8006e86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006e8a:	b17b      	cbz	r3, 8006eac <__mdiff+0x108>
 8006e8c:	6107      	str	r7, [r0, #16]
 8006e8e:	e7a3      	b.n	8006dd8 <__mdiff+0x34>
 8006e90:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e94:	fa11 f288 	uxtah	r2, r1, r8
 8006e98:	1414      	asrs	r4, r2, #16
 8006e9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ea4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ea8:	1421      	asrs	r1, r4, #16
 8006eaa:	e7e0      	b.n	8006e6e <__mdiff+0xca>
 8006eac:	3f01      	subs	r7, #1
 8006eae:	e7ea      	b.n	8006e86 <__mdiff+0xe2>
 8006eb0:	0800810f 	.word	0x0800810f
 8006eb4:	08008120 	.word	0x08008120

08006eb8 <__d2b>:
 8006eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ebc:	4689      	mov	r9, r1
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	ec57 6b10 	vmov	r6, r7, d0
 8006ec4:	4690      	mov	r8, r2
 8006ec6:	f7ff fccf 	bl	8006868 <_Balloc>
 8006eca:	4604      	mov	r4, r0
 8006ecc:	b930      	cbnz	r0, 8006edc <__d2b+0x24>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <__d2b+0xb0>)
 8006ed2:	4826      	ldr	r0, [pc, #152]	; (8006f6c <__d2b+0xb4>)
 8006ed4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ed8:	f000 faac 	bl	8007434 <__assert_func>
 8006edc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ee4:	bb35      	cbnz	r5, 8006f34 <__d2b+0x7c>
 8006ee6:	2e00      	cmp	r6, #0
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	d028      	beq.n	8006f3e <__d2b+0x86>
 8006eec:	4668      	mov	r0, sp
 8006eee:	9600      	str	r6, [sp, #0]
 8006ef0:	f7ff fd82 	bl	80069f8 <__lo0bits>
 8006ef4:	9900      	ldr	r1, [sp, #0]
 8006ef6:	b300      	cbz	r0, 8006f3a <__d2b+0x82>
 8006ef8:	9a01      	ldr	r2, [sp, #4]
 8006efa:	f1c0 0320 	rsb	r3, r0, #32
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	430b      	orrs	r3, r1
 8006f04:	40c2      	lsrs	r2, r0
 8006f06:	6163      	str	r3, [r4, #20]
 8006f08:	9201      	str	r2, [sp, #4]
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	61a3      	str	r3, [r4, #24]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	bf14      	ite	ne
 8006f12:	2202      	movne	r2, #2
 8006f14:	2201      	moveq	r2, #1
 8006f16:	6122      	str	r2, [r4, #16]
 8006f18:	b1d5      	cbz	r5, 8006f50 <__d2b+0x98>
 8006f1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f1e:	4405      	add	r5, r0
 8006f20:	f8c9 5000 	str.w	r5, [r9]
 8006f24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f28:	f8c8 0000 	str.w	r0, [r8]
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	b003      	add	sp, #12
 8006f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f38:	e7d5      	b.n	8006ee6 <__d2b+0x2e>
 8006f3a:	6161      	str	r1, [r4, #20]
 8006f3c:	e7e5      	b.n	8006f0a <__d2b+0x52>
 8006f3e:	a801      	add	r0, sp, #4
 8006f40:	f7ff fd5a 	bl	80069f8 <__lo0bits>
 8006f44:	9b01      	ldr	r3, [sp, #4]
 8006f46:	6163      	str	r3, [r4, #20]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	6122      	str	r2, [r4, #16]
 8006f4c:	3020      	adds	r0, #32
 8006f4e:	e7e3      	b.n	8006f18 <__d2b+0x60>
 8006f50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f58:	f8c9 0000 	str.w	r0, [r9]
 8006f5c:	6918      	ldr	r0, [r3, #16]
 8006f5e:	f7ff fd2b 	bl	80069b8 <__hi0bits>
 8006f62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f66:	e7df      	b.n	8006f28 <__d2b+0x70>
 8006f68:	0800810f 	.word	0x0800810f
 8006f6c:	08008120 	.word	0x08008120

08006f70 <_calloc_r>:
 8006f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f72:	fba1 2402 	umull	r2, r4, r1, r2
 8006f76:	b94c      	cbnz	r4, 8006f8c <_calloc_r+0x1c>
 8006f78:	4611      	mov	r1, r2
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	f000 f87a 	bl	8007074 <_malloc_r>
 8006f80:	9a01      	ldr	r2, [sp, #4]
 8006f82:	4605      	mov	r5, r0
 8006f84:	b930      	cbnz	r0, 8006f94 <_calloc_r+0x24>
 8006f86:	4628      	mov	r0, r5
 8006f88:	b003      	add	sp, #12
 8006f8a:	bd30      	pop	{r4, r5, pc}
 8006f8c:	220c      	movs	r2, #12
 8006f8e:	6002      	str	r2, [r0, #0]
 8006f90:	2500      	movs	r5, #0
 8006f92:	e7f8      	b.n	8006f86 <_calloc_r+0x16>
 8006f94:	4621      	mov	r1, r4
 8006f96:	f7fe f93f 	bl	8005218 <memset>
 8006f9a:	e7f4      	b.n	8006f86 <_calloc_r+0x16>

08006f9c <_free_r>:
 8006f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d044      	beq.n	800702c <_free_r+0x90>
 8006fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa6:	9001      	str	r0, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f1a1 0404 	sub.w	r4, r1, #4
 8006fae:	bfb8      	it	lt
 8006fb0:	18e4      	addlt	r4, r4, r3
 8006fb2:	f000 fa9b 	bl	80074ec <__malloc_lock>
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <_free_r+0x94>)
 8006fb8:	9801      	ldr	r0, [sp, #4]
 8006fba:	6813      	ldr	r3, [r2, #0]
 8006fbc:	b933      	cbnz	r3, 8006fcc <_free_r+0x30>
 8006fbe:	6063      	str	r3, [r4, #4]
 8006fc0:	6014      	str	r4, [r2, #0]
 8006fc2:	b003      	add	sp, #12
 8006fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc8:	f000 ba96 	b.w	80074f8 <__malloc_unlock>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d908      	bls.n	8006fe2 <_free_r+0x46>
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	1961      	adds	r1, r4, r5
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf01      	itttt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	1949      	addeq	r1, r1, r5
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	e7ed      	b.n	8006fbe <_free_r+0x22>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x50>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x46>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1855      	adds	r5, r2, r1
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x70>
 8006ff4:	6824      	ldr	r4, [r4, #0]
 8006ff6:	4421      	add	r1, r4
 8006ff8:	1854      	adds	r4, r2, r1
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1e0      	bne.n	8006fc2 <_free_r+0x26>
 8007000:	681c      	ldr	r4, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4421      	add	r1, r4
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	e7da      	b.n	8006fc2 <_free_r+0x26>
 800700c:	d902      	bls.n	8007014 <_free_r+0x78>
 800700e:	230c      	movs	r3, #12
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	e7d6      	b.n	8006fc2 <_free_r+0x26>
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1961      	adds	r1, r4, r5
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7ca      	b.n	8006fc2 <_free_r+0x26>
 800702c:	b003      	add	sp, #12
 800702e:	bd30      	pop	{r4, r5, pc}
 8007030:	20000a7c 	.word	0x20000a7c

08007034 <sbrk_aligned>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4e0e      	ldr	r6, [pc, #56]	; (8007070 <sbrk_aligned+0x3c>)
 8007038:	460c      	mov	r4, r1
 800703a:	6831      	ldr	r1, [r6, #0]
 800703c:	4605      	mov	r5, r0
 800703e:	b911      	cbnz	r1, 8007046 <sbrk_aligned+0x12>
 8007040:	f000 f9e8 	bl	8007414 <_sbrk_r>
 8007044:	6030      	str	r0, [r6, #0]
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f9e3 	bl	8007414 <_sbrk_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	d00a      	beq.n	8007068 <sbrk_aligned+0x34>
 8007052:	1cc4      	adds	r4, r0, #3
 8007054:	f024 0403 	bic.w	r4, r4, #3
 8007058:	42a0      	cmp	r0, r4
 800705a:	d007      	beq.n	800706c <sbrk_aligned+0x38>
 800705c:	1a21      	subs	r1, r4, r0
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f9d8 	bl	8007414 <_sbrk_r>
 8007064:	3001      	adds	r0, #1
 8007066:	d101      	bne.n	800706c <sbrk_aligned+0x38>
 8007068:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800706c:	4620      	mov	r0, r4
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	20000a80 	.word	0x20000a80

08007074 <_malloc_r>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	1ccd      	adds	r5, r1, #3
 800707a:	f025 0503 	bic.w	r5, r5, #3
 800707e:	3508      	adds	r5, #8
 8007080:	2d0c      	cmp	r5, #12
 8007082:	bf38      	it	cc
 8007084:	250c      	movcc	r5, #12
 8007086:	2d00      	cmp	r5, #0
 8007088:	4607      	mov	r7, r0
 800708a:	db01      	blt.n	8007090 <_malloc_r+0x1c>
 800708c:	42a9      	cmp	r1, r5
 800708e:	d905      	bls.n	800709c <_malloc_r+0x28>
 8007090:	230c      	movs	r3, #12
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	2600      	movs	r6, #0
 8007096:	4630      	mov	r0, r6
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	4e2e      	ldr	r6, [pc, #184]	; (8007158 <_malloc_r+0xe4>)
 800709e:	f000 fa25 	bl	80074ec <__malloc_lock>
 80070a2:	6833      	ldr	r3, [r6, #0]
 80070a4:	461c      	mov	r4, r3
 80070a6:	bb34      	cbnz	r4, 80070f6 <_malloc_r+0x82>
 80070a8:	4629      	mov	r1, r5
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7ff ffc2 	bl	8007034 <sbrk_aligned>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	4604      	mov	r4, r0
 80070b4:	d14d      	bne.n	8007152 <_malloc_r+0xde>
 80070b6:	6834      	ldr	r4, [r6, #0]
 80070b8:	4626      	mov	r6, r4
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	d140      	bne.n	8007140 <_malloc_r+0xcc>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	4631      	mov	r1, r6
 80070c2:	4638      	mov	r0, r7
 80070c4:	eb04 0803 	add.w	r8, r4, r3
 80070c8:	f000 f9a4 	bl	8007414 <_sbrk_r>
 80070cc:	4580      	cmp	r8, r0
 80070ce:	d13a      	bne.n	8007146 <_malloc_r+0xd2>
 80070d0:	6821      	ldr	r1, [r4, #0]
 80070d2:	3503      	adds	r5, #3
 80070d4:	1a6d      	subs	r5, r5, r1
 80070d6:	f025 0503 	bic.w	r5, r5, #3
 80070da:	3508      	adds	r5, #8
 80070dc:	2d0c      	cmp	r5, #12
 80070de:	bf38      	it	cc
 80070e0:	250c      	movcc	r5, #12
 80070e2:	4629      	mov	r1, r5
 80070e4:	4638      	mov	r0, r7
 80070e6:	f7ff ffa5 	bl	8007034 <sbrk_aligned>
 80070ea:	3001      	adds	r0, #1
 80070ec:	d02b      	beq.n	8007146 <_malloc_r+0xd2>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	442b      	add	r3, r5
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	e00e      	b.n	8007114 <_malloc_r+0xa0>
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	1b52      	subs	r2, r2, r5
 80070fa:	d41e      	bmi.n	800713a <_malloc_r+0xc6>
 80070fc:	2a0b      	cmp	r2, #11
 80070fe:	d916      	bls.n	800712e <_malloc_r+0xba>
 8007100:	1961      	adds	r1, r4, r5
 8007102:	42a3      	cmp	r3, r4
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	bf18      	it	ne
 8007108:	6059      	strne	r1, [r3, #4]
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	bf08      	it	eq
 800710e:	6031      	streq	r1, [r6, #0]
 8007110:	5162      	str	r2, [r4, r5]
 8007112:	604b      	str	r3, [r1, #4]
 8007114:	4638      	mov	r0, r7
 8007116:	f104 060b 	add.w	r6, r4, #11
 800711a:	f000 f9ed 	bl	80074f8 <__malloc_unlock>
 800711e:	f026 0607 	bic.w	r6, r6, #7
 8007122:	1d23      	adds	r3, r4, #4
 8007124:	1af2      	subs	r2, r6, r3
 8007126:	d0b6      	beq.n	8007096 <_malloc_r+0x22>
 8007128:	1b9b      	subs	r3, r3, r6
 800712a:	50a3      	str	r3, [r4, r2]
 800712c:	e7b3      	b.n	8007096 <_malloc_r+0x22>
 800712e:	6862      	ldr	r2, [r4, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	bf0c      	ite	eq
 8007134:	6032      	streq	r2, [r6, #0]
 8007136:	605a      	strne	r2, [r3, #4]
 8007138:	e7ec      	b.n	8007114 <_malloc_r+0xa0>
 800713a:	4623      	mov	r3, r4
 800713c:	6864      	ldr	r4, [r4, #4]
 800713e:	e7b2      	b.n	80070a6 <_malloc_r+0x32>
 8007140:	4634      	mov	r4, r6
 8007142:	6876      	ldr	r6, [r6, #4]
 8007144:	e7b9      	b.n	80070ba <_malloc_r+0x46>
 8007146:	230c      	movs	r3, #12
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4638      	mov	r0, r7
 800714c:	f000 f9d4 	bl	80074f8 <__malloc_unlock>
 8007150:	e7a1      	b.n	8007096 <_malloc_r+0x22>
 8007152:	6025      	str	r5, [r4, #0]
 8007154:	e7de      	b.n	8007114 <_malloc_r+0xa0>
 8007156:	bf00      	nop
 8007158:	20000a7c 	.word	0x20000a7c

0800715c <__ssputs_r>:
 800715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007160:	688e      	ldr	r6, [r1, #8]
 8007162:	429e      	cmp	r6, r3
 8007164:	4682      	mov	sl, r0
 8007166:	460c      	mov	r4, r1
 8007168:	4690      	mov	r8, r2
 800716a:	461f      	mov	r7, r3
 800716c:	d838      	bhi.n	80071e0 <__ssputs_r+0x84>
 800716e:	898a      	ldrh	r2, [r1, #12]
 8007170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007174:	d032      	beq.n	80071dc <__ssputs_r+0x80>
 8007176:	6825      	ldr	r5, [r4, #0]
 8007178:	6909      	ldr	r1, [r1, #16]
 800717a:	eba5 0901 	sub.w	r9, r5, r1
 800717e:	6965      	ldr	r5, [r4, #20]
 8007180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007188:	3301      	adds	r3, #1
 800718a:	444b      	add	r3, r9
 800718c:	106d      	asrs	r5, r5, #1
 800718e:	429d      	cmp	r5, r3
 8007190:	bf38      	it	cc
 8007192:	461d      	movcc	r5, r3
 8007194:	0553      	lsls	r3, r2, #21
 8007196:	d531      	bpl.n	80071fc <__ssputs_r+0xa0>
 8007198:	4629      	mov	r1, r5
 800719a:	f7ff ff6b 	bl	8007074 <_malloc_r>
 800719e:	4606      	mov	r6, r0
 80071a0:	b950      	cbnz	r0, 80071b8 <__ssputs_r+0x5c>
 80071a2:	230c      	movs	r3, #12
 80071a4:	f8ca 3000 	str.w	r3, [sl]
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ae:	81a3      	strh	r3, [r4, #12]
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b8:	6921      	ldr	r1, [r4, #16]
 80071ba:	464a      	mov	r2, r9
 80071bc:	f7ff fb46 	bl	800684c <memcpy>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	81a3      	strh	r3, [r4, #12]
 80071cc:	6126      	str	r6, [r4, #16]
 80071ce:	6165      	str	r5, [r4, #20]
 80071d0:	444e      	add	r6, r9
 80071d2:	eba5 0509 	sub.w	r5, r5, r9
 80071d6:	6026      	str	r6, [r4, #0]
 80071d8:	60a5      	str	r5, [r4, #8]
 80071da:	463e      	mov	r6, r7
 80071dc:	42be      	cmp	r6, r7
 80071de:	d900      	bls.n	80071e2 <__ssputs_r+0x86>
 80071e0:	463e      	mov	r6, r7
 80071e2:	6820      	ldr	r0, [r4, #0]
 80071e4:	4632      	mov	r2, r6
 80071e6:	4641      	mov	r1, r8
 80071e8:	f000 f966 	bl	80074b8 <memmove>
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	1b9b      	subs	r3, r3, r6
 80071f0:	60a3      	str	r3, [r4, #8]
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4433      	add	r3, r6
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	2000      	movs	r0, #0
 80071fa:	e7db      	b.n	80071b4 <__ssputs_r+0x58>
 80071fc:	462a      	mov	r2, r5
 80071fe:	f000 f981 	bl	8007504 <_realloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	2800      	cmp	r0, #0
 8007206:	d1e1      	bne.n	80071cc <__ssputs_r+0x70>
 8007208:	6921      	ldr	r1, [r4, #16]
 800720a:	4650      	mov	r0, sl
 800720c:	f7ff fec6 	bl	8006f9c <_free_r>
 8007210:	e7c7      	b.n	80071a2 <__ssputs_r+0x46>
	...

08007214 <_svfiprintf_r>:
 8007214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007218:	4698      	mov	r8, r3
 800721a:	898b      	ldrh	r3, [r1, #12]
 800721c:	061b      	lsls	r3, r3, #24
 800721e:	b09d      	sub	sp, #116	; 0x74
 8007220:	4607      	mov	r7, r0
 8007222:	460d      	mov	r5, r1
 8007224:	4614      	mov	r4, r2
 8007226:	d50e      	bpl.n	8007246 <_svfiprintf_r+0x32>
 8007228:	690b      	ldr	r3, [r1, #16]
 800722a:	b963      	cbnz	r3, 8007246 <_svfiprintf_r+0x32>
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	f7ff ff21 	bl	8007074 <_malloc_r>
 8007232:	6028      	str	r0, [r5, #0]
 8007234:	6128      	str	r0, [r5, #16]
 8007236:	b920      	cbnz	r0, 8007242 <_svfiprintf_r+0x2e>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007240:	e0d1      	b.n	80073e6 <_svfiprintf_r+0x1d2>
 8007242:	2340      	movs	r3, #64	; 0x40
 8007244:	616b      	str	r3, [r5, #20]
 8007246:	2300      	movs	r3, #0
 8007248:	9309      	str	r3, [sp, #36]	; 0x24
 800724a:	2320      	movs	r3, #32
 800724c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007250:	f8cd 800c 	str.w	r8, [sp, #12]
 8007254:	2330      	movs	r3, #48	; 0x30
 8007256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007400 <_svfiprintf_r+0x1ec>
 800725a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725e:	f04f 0901 	mov.w	r9, #1
 8007262:	4623      	mov	r3, r4
 8007264:	469a      	mov	sl, r3
 8007266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800726a:	b10a      	cbz	r2, 8007270 <_svfiprintf_r+0x5c>
 800726c:	2a25      	cmp	r2, #37	; 0x25
 800726e:	d1f9      	bne.n	8007264 <_svfiprintf_r+0x50>
 8007270:	ebba 0b04 	subs.w	fp, sl, r4
 8007274:	d00b      	beq.n	800728e <_svfiprintf_r+0x7a>
 8007276:	465b      	mov	r3, fp
 8007278:	4622      	mov	r2, r4
 800727a:	4629      	mov	r1, r5
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff ff6d 	bl	800715c <__ssputs_r>
 8007282:	3001      	adds	r0, #1
 8007284:	f000 80aa 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800728a:	445a      	add	r2, fp
 800728c:	9209      	str	r2, [sp, #36]	; 0x24
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 80a2 	beq.w	80073dc <_svfiprintf_r+0x1c8>
 8007298:	2300      	movs	r3, #0
 800729a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072a2:	f10a 0a01 	add.w	sl, sl, #1
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	9307      	str	r3, [sp, #28]
 80072aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ae:	931a      	str	r3, [sp, #104]	; 0x68
 80072b0:	4654      	mov	r4, sl
 80072b2:	2205      	movs	r2, #5
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	4851      	ldr	r0, [pc, #324]	; (8007400 <_svfiprintf_r+0x1ec>)
 80072ba:	f7f8 ffb1 	bl	8000220 <memchr>
 80072be:	9a04      	ldr	r2, [sp, #16]
 80072c0:	b9d8      	cbnz	r0, 80072fa <_svfiprintf_r+0xe6>
 80072c2:	06d0      	lsls	r0, r2, #27
 80072c4:	bf44      	itt	mi
 80072c6:	2320      	movmi	r3, #32
 80072c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072cc:	0711      	lsls	r1, r2, #28
 80072ce:	bf44      	itt	mi
 80072d0:	232b      	movmi	r3, #43	; 0x2b
 80072d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d6:	f89a 3000 	ldrb.w	r3, [sl]
 80072da:	2b2a      	cmp	r3, #42	; 0x2a
 80072dc:	d015      	beq.n	800730a <_svfiprintf_r+0xf6>
 80072de:	9a07      	ldr	r2, [sp, #28]
 80072e0:	4654      	mov	r4, sl
 80072e2:	2000      	movs	r0, #0
 80072e4:	f04f 0c0a 	mov.w	ip, #10
 80072e8:	4621      	mov	r1, r4
 80072ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ee:	3b30      	subs	r3, #48	; 0x30
 80072f0:	2b09      	cmp	r3, #9
 80072f2:	d94e      	bls.n	8007392 <_svfiprintf_r+0x17e>
 80072f4:	b1b0      	cbz	r0, 8007324 <_svfiprintf_r+0x110>
 80072f6:	9207      	str	r2, [sp, #28]
 80072f8:	e014      	b.n	8007324 <_svfiprintf_r+0x110>
 80072fa:	eba0 0308 	sub.w	r3, r0, r8
 80072fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007302:	4313      	orrs	r3, r2
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	46a2      	mov	sl, r4
 8007308:	e7d2      	b.n	80072b0 <_svfiprintf_r+0x9c>
 800730a:	9b03      	ldr	r3, [sp, #12]
 800730c:	1d19      	adds	r1, r3, #4
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	9103      	str	r1, [sp, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbb      	ittet	lt
 8007316:	425b      	neglt	r3, r3
 8007318:	f042 0202 	orrlt.w	r2, r2, #2
 800731c:	9307      	strge	r3, [sp, #28]
 800731e:	9307      	strlt	r3, [sp, #28]
 8007320:	bfb8      	it	lt
 8007322:	9204      	strlt	r2, [sp, #16]
 8007324:	7823      	ldrb	r3, [r4, #0]
 8007326:	2b2e      	cmp	r3, #46	; 0x2e
 8007328:	d10c      	bne.n	8007344 <_svfiprintf_r+0x130>
 800732a:	7863      	ldrb	r3, [r4, #1]
 800732c:	2b2a      	cmp	r3, #42	; 0x2a
 800732e:	d135      	bne.n	800739c <_svfiprintf_r+0x188>
 8007330:	9b03      	ldr	r3, [sp, #12]
 8007332:	1d1a      	adds	r2, r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	9203      	str	r2, [sp, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	bfb8      	it	lt
 800733c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007340:	3402      	adds	r4, #2
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007410 <_svfiprintf_r+0x1fc>
 8007348:	7821      	ldrb	r1, [r4, #0]
 800734a:	2203      	movs	r2, #3
 800734c:	4650      	mov	r0, sl
 800734e:	f7f8 ff67 	bl	8000220 <memchr>
 8007352:	b140      	cbz	r0, 8007366 <_svfiprintf_r+0x152>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	eba0 000a 	sub.w	r0, r0, sl
 800735a:	fa03 f000 	lsl.w	r0, r3, r0
 800735e:	9b04      	ldr	r3, [sp, #16]
 8007360:	4303      	orrs	r3, r0
 8007362:	3401      	adds	r4, #1
 8007364:	9304      	str	r3, [sp, #16]
 8007366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736a:	4826      	ldr	r0, [pc, #152]	; (8007404 <_svfiprintf_r+0x1f0>)
 800736c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007370:	2206      	movs	r2, #6
 8007372:	f7f8 ff55 	bl	8000220 <memchr>
 8007376:	2800      	cmp	r0, #0
 8007378:	d038      	beq.n	80073ec <_svfiprintf_r+0x1d8>
 800737a:	4b23      	ldr	r3, [pc, #140]	; (8007408 <_svfiprintf_r+0x1f4>)
 800737c:	bb1b      	cbnz	r3, 80073c6 <_svfiprintf_r+0x1b2>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	3307      	adds	r3, #7
 8007382:	f023 0307 	bic.w	r3, r3, #7
 8007386:	3308      	adds	r3, #8
 8007388:	9303      	str	r3, [sp, #12]
 800738a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800738c:	4433      	add	r3, r6
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	e767      	b.n	8007262 <_svfiprintf_r+0x4e>
 8007392:	fb0c 3202 	mla	r2, ip, r2, r3
 8007396:	460c      	mov	r4, r1
 8007398:	2001      	movs	r0, #1
 800739a:	e7a5      	b.n	80072e8 <_svfiprintf_r+0xd4>
 800739c:	2300      	movs	r3, #0
 800739e:	3401      	adds	r4, #1
 80073a0:	9305      	str	r3, [sp, #20]
 80073a2:	4619      	mov	r1, r3
 80073a4:	f04f 0c0a 	mov.w	ip, #10
 80073a8:	4620      	mov	r0, r4
 80073aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ae:	3a30      	subs	r2, #48	; 0x30
 80073b0:	2a09      	cmp	r2, #9
 80073b2:	d903      	bls.n	80073bc <_svfiprintf_r+0x1a8>
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d0c5      	beq.n	8007344 <_svfiprintf_r+0x130>
 80073b8:	9105      	str	r1, [sp, #20]
 80073ba:	e7c3      	b.n	8007344 <_svfiprintf_r+0x130>
 80073bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80073c0:	4604      	mov	r4, r0
 80073c2:	2301      	movs	r3, #1
 80073c4:	e7f0      	b.n	80073a8 <_svfiprintf_r+0x194>
 80073c6:	ab03      	add	r3, sp, #12
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <_svfiprintf_r+0x1f8>)
 80073ce:	a904      	add	r1, sp, #16
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7fd ffc9 	bl	8005368 <_printf_float>
 80073d6:	1c42      	adds	r2, r0, #1
 80073d8:	4606      	mov	r6, r0
 80073da:	d1d6      	bne.n	800738a <_svfiprintf_r+0x176>
 80073dc:	89ab      	ldrh	r3, [r5, #12]
 80073de:	065b      	lsls	r3, r3, #25
 80073e0:	f53f af2c 	bmi.w	800723c <_svfiprintf_r+0x28>
 80073e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e6:	b01d      	add	sp, #116	; 0x74
 80073e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ec:	ab03      	add	r3, sp, #12
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	462a      	mov	r2, r5
 80073f2:	4b06      	ldr	r3, [pc, #24]	; (800740c <_svfiprintf_r+0x1f8>)
 80073f4:	a904      	add	r1, sp, #16
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7fe fa5a 	bl	80058b0 <_printf_i>
 80073fc:	e7eb      	b.n	80073d6 <_svfiprintf_r+0x1c2>
 80073fe:	bf00      	nop
 8007400:	0800827c 	.word	0x0800827c
 8007404:	08008286 	.word	0x08008286
 8007408:	08005369 	.word	0x08005369
 800740c:	0800715d 	.word	0x0800715d
 8007410:	08008282 	.word	0x08008282

08007414 <_sbrk_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d06      	ldr	r5, [pc, #24]	; (8007430 <_sbrk_r+0x1c>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	602b      	str	r3, [r5, #0]
 8007420:	f7fa fb64 	bl	8001aec <_sbrk>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_sbrk_r+0x1a>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_sbrk_r+0x1a>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20000a84 	.word	0x20000a84

08007434 <__assert_func>:
 8007434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007436:	4614      	mov	r4, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4b09      	ldr	r3, [pc, #36]	; (8007460 <__assert_func+0x2c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4605      	mov	r5, r0
 8007440:	68d8      	ldr	r0, [r3, #12]
 8007442:	b14c      	cbz	r4, 8007458 <__assert_func+0x24>
 8007444:	4b07      	ldr	r3, [pc, #28]	; (8007464 <__assert_func+0x30>)
 8007446:	9100      	str	r1, [sp, #0]
 8007448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <__assert_func+0x34>)
 800744e:	462b      	mov	r3, r5
 8007450:	f000 f80e 	bl	8007470 <fiprintf>
 8007454:	f000 faac 	bl	80079b0 <abort>
 8007458:	4b04      	ldr	r3, [pc, #16]	; (800746c <__assert_func+0x38>)
 800745a:	461c      	mov	r4, r3
 800745c:	e7f3      	b.n	8007446 <__assert_func+0x12>
 800745e:	bf00      	nop
 8007460:	2000000c 	.word	0x2000000c
 8007464:	0800828d 	.word	0x0800828d
 8007468:	0800829a 	.word	0x0800829a
 800746c:	080082c8 	.word	0x080082c8

08007470 <fiprintf>:
 8007470:	b40e      	push	{r1, r2, r3}
 8007472:	b503      	push	{r0, r1, lr}
 8007474:	4601      	mov	r1, r0
 8007476:	ab03      	add	r3, sp, #12
 8007478:	4805      	ldr	r0, [pc, #20]	; (8007490 <fiprintf+0x20>)
 800747a:	f853 2b04 	ldr.w	r2, [r3], #4
 800747e:	6800      	ldr	r0, [r0, #0]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	f000 f897 	bl	80075b4 <_vfiprintf_r>
 8007486:	b002      	add	sp, #8
 8007488:	f85d eb04 	ldr.w	lr, [sp], #4
 800748c:	b003      	add	sp, #12
 800748e:	4770      	bx	lr
 8007490:	2000000c 	.word	0x2000000c

08007494 <__ascii_mbtowc>:
 8007494:	b082      	sub	sp, #8
 8007496:	b901      	cbnz	r1, 800749a <__ascii_mbtowc+0x6>
 8007498:	a901      	add	r1, sp, #4
 800749a:	b142      	cbz	r2, 80074ae <__ascii_mbtowc+0x1a>
 800749c:	b14b      	cbz	r3, 80074b2 <__ascii_mbtowc+0x1e>
 800749e:	7813      	ldrb	r3, [r2, #0]
 80074a0:	600b      	str	r3, [r1, #0]
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	1e10      	subs	r0, r2, #0
 80074a6:	bf18      	it	ne
 80074a8:	2001      	movne	r0, #1
 80074aa:	b002      	add	sp, #8
 80074ac:	4770      	bx	lr
 80074ae:	4610      	mov	r0, r2
 80074b0:	e7fb      	b.n	80074aa <__ascii_mbtowc+0x16>
 80074b2:	f06f 0001 	mvn.w	r0, #1
 80074b6:	e7f8      	b.n	80074aa <__ascii_mbtowc+0x16>

080074b8 <memmove>:
 80074b8:	4288      	cmp	r0, r1
 80074ba:	b510      	push	{r4, lr}
 80074bc:	eb01 0402 	add.w	r4, r1, r2
 80074c0:	d902      	bls.n	80074c8 <memmove+0x10>
 80074c2:	4284      	cmp	r4, r0
 80074c4:	4623      	mov	r3, r4
 80074c6:	d807      	bhi.n	80074d8 <memmove+0x20>
 80074c8:	1e43      	subs	r3, r0, #1
 80074ca:	42a1      	cmp	r1, r4
 80074cc:	d008      	beq.n	80074e0 <memmove+0x28>
 80074ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074d6:	e7f8      	b.n	80074ca <memmove+0x12>
 80074d8:	4402      	add	r2, r0
 80074da:	4601      	mov	r1, r0
 80074dc:	428a      	cmp	r2, r1
 80074de:	d100      	bne.n	80074e2 <memmove+0x2a>
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074ea:	e7f7      	b.n	80074dc <memmove+0x24>

080074ec <__malloc_lock>:
 80074ec:	4801      	ldr	r0, [pc, #4]	; (80074f4 <__malloc_lock+0x8>)
 80074ee:	f000 bc1f 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 80074f2:	bf00      	nop
 80074f4:	20000a88 	.word	0x20000a88

080074f8 <__malloc_unlock>:
 80074f8:	4801      	ldr	r0, [pc, #4]	; (8007500 <__malloc_unlock+0x8>)
 80074fa:	f000 bc1a 	b.w	8007d32 <__retarget_lock_release_recursive>
 80074fe:	bf00      	nop
 8007500:	20000a88 	.word	0x20000a88

08007504 <_realloc_r>:
 8007504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007508:	4680      	mov	r8, r0
 800750a:	4614      	mov	r4, r2
 800750c:	460e      	mov	r6, r1
 800750e:	b921      	cbnz	r1, 800751a <_realloc_r+0x16>
 8007510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4611      	mov	r1, r2
 8007516:	f7ff bdad 	b.w	8007074 <_malloc_r>
 800751a:	b92a      	cbnz	r2, 8007528 <_realloc_r+0x24>
 800751c:	f7ff fd3e 	bl	8006f9c <_free_r>
 8007520:	4625      	mov	r5, r4
 8007522:	4628      	mov	r0, r5
 8007524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007528:	f000 fc6a 	bl	8007e00 <_malloc_usable_size_r>
 800752c:	4284      	cmp	r4, r0
 800752e:	4607      	mov	r7, r0
 8007530:	d802      	bhi.n	8007538 <_realloc_r+0x34>
 8007532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007536:	d812      	bhi.n	800755e <_realloc_r+0x5a>
 8007538:	4621      	mov	r1, r4
 800753a:	4640      	mov	r0, r8
 800753c:	f7ff fd9a 	bl	8007074 <_malloc_r>
 8007540:	4605      	mov	r5, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	d0ed      	beq.n	8007522 <_realloc_r+0x1e>
 8007546:	42bc      	cmp	r4, r7
 8007548:	4622      	mov	r2, r4
 800754a:	4631      	mov	r1, r6
 800754c:	bf28      	it	cs
 800754e:	463a      	movcs	r2, r7
 8007550:	f7ff f97c 	bl	800684c <memcpy>
 8007554:	4631      	mov	r1, r6
 8007556:	4640      	mov	r0, r8
 8007558:	f7ff fd20 	bl	8006f9c <_free_r>
 800755c:	e7e1      	b.n	8007522 <_realloc_r+0x1e>
 800755e:	4635      	mov	r5, r6
 8007560:	e7df      	b.n	8007522 <_realloc_r+0x1e>

08007562 <__sfputc_r>:
 8007562:	6893      	ldr	r3, [r2, #8]
 8007564:	3b01      	subs	r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	b410      	push	{r4}
 800756a:	6093      	str	r3, [r2, #8]
 800756c:	da08      	bge.n	8007580 <__sfputc_r+0x1e>
 800756e:	6994      	ldr	r4, [r2, #24]
 8007570:	42a3      	cmp	r3, r4
 8007572:	db01      	blt.n	8007578 <__sfputc_r+0x16>
 8007574:	290a      	cmp	r1, #10
 8007576:	d103      	bne.n	8007580 <__sfputc_r+0x1e>
 8007578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800757c:	f000 b94a 	b.w	8007814 <__swbuf_r>
 8007580:	6813      	ldr	r3, [r2, #0]
 8007582:	1c58      	adds	r0, r3, #1
 8007584:	6010      	str	r0, [r2, #0]
 8007586:	7019      	strb	r1, [r3, #0]
 8007588:	4608      	mov	r0, r1
 800758a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758e:	4770      	bx	lr

08007590 <__sfputs_r>:
 8007590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007592:	4606      	mov	r6, r0
 8007594:	460f      	mov	r7, r1
 8007596:	4614      	mov	r4, r2
 8007598:	18d5      	adds	r5, r2, r3
 800759a:	42ac      	cmp	r4, r5
 800759c:	d101      	bne.n	80075a2 <__sfputs_r+0x12>
 800759e:	2000      	movs	r0, #0
 80075a0:	e007      	b.n	80075b2 <__sfputs_r+0x22>
 80075a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a6:	463a      	mov	r2, r7
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ffda 	bl	8007562 <__sfputc_r>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	d1f3      	bne.n	800759a <__sfputs_r+0xa>
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075b4 <_vfiprintf_r>:
 80075b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b8:	460d      	mov	r5, r1
 80075ba:	b09d      	sub	sp, #116	; 0x74
 80075bc:	4614      	mov	r4, r2
 80075be:	4698      	mov	r8, r3
 80075c0:	4606      	mov	r6, r0
 80075c2:	b118      	cbz	r0, 80075cc <_vfiprintf_r+0x18>
 80075c4:	6983      	ldr	r3, [r0, #24]
 80075c6:	b90b      	cbnz	r3, 80075cc <_vfiprintf_r+0x18>
 80075c8:	f000 fb14 	bl	8007bf4 <__sinit>
 80075cc:	4b89      	ldr	r3, [pc, #548]	; (80077f4 <_vfiprintf_r+0x240>)
 80075ce:	429d      	cmp	r5, r3
 80075d0:	d11b      	bne.n	800760a <_vfiprintf_r+0x56>
 80075d2:	6875      	ldr	r5, [r6, #4]
 80075d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075da:	89ab      	ldrh	r3, [r5, #12]
 80075dc:	059a      	lsls	r2, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_vfiprintf_r+0x32>
 80075e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075e2:	f000 fba5 	bl	8007d30 <__retarget_lock_acquire_recursive>
 80075e6:	89ab      	ldrh	r3, [r5, #12]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d501      	bpl.n	80075f0 <_vfiprintf_r+0x3c>
 80075ec:	692b      	ldr	r3, [r5, #16]
 80075ee:	b9eb      	cbnz	r3, 800762c <_vfiprintf_r+0x78>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 f96e 	bl	80078d4 <__swsetup_r>
 80075f8:	b1c0      	cbz	r0, 800762c <_vfiprintf_r+0x78>
 80075fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075fc:	07dc      	lsls	r4, r3, #31
 80075fe:	d50e      	bpl.n	800761e <_vfiprintf_r+0x6a>
 8007600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007604:	b01d      	add	sp, #116	; 0x74
 8007606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760a:	4b7b      	ldr	r3, [pc, #492]	; (80077f8 <_vfiprintf_r+0x244>)
 800760c:	429d      	cmp	r5, r3
 800760e:	d101      	bne.n	8007614 <_vfiprintf_r+0x60>
 8007610:	68b5      	ldr	r5, [r6, #8]
 8007612:	e7df      	b.n	80075d4 <_vfiprintf_r+0x20>
 8007614:	4b79      	ldr	r3, [pc, #484]	; (80077fc <_vfiprintf_r+0x248>)
 8007616:	429d      	cmp	r5, r3
 8007618:	bf08      	it	eq
 800761a:	68f5      	ldreq	r5, [r6, #12]
 800761c:	e7da      	b.n	80075d4 <_vfiprintf_r+0x20>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	0598      	lsls	r0, r3, #22
 8007622:	d4ed      	bmi.n	8007600 <_vfiprintf_r+0x4c>
 8007624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007626:	f000 fb84 	bl	8007d32 <__retarget_lock_release_recursive>
 800762a:	e7e9      	b.n	8007600 <_vfiprintf_r+0x4c>
 800762c:	2300      	movs	r3, #0
 800762e:	9309      	str	r3, [sp, #36]	; 0x24
 8007630:	2320      	movs	r3, #32
 8007632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007636:	f8cd 800c 	str.w	r8, [sp, #12]
 800763a:	2330      	movs	r3, #48	; 0x30
 800763c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007800 <_vfiprintf_r+0x24c>
 8007640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007644:	f04f 0901 	mov.w	r9, #1
 8007648:	4623      	mov	r3, r4
 800764a:	469a      	mov	sl, r3
 800764c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007650:	b10a      	cbz	r2, 8007656 <_vfiprintf_r+0xa2>
 8007652:	2a25      	cmp	r2, #37	; 0x25
 8007654:	d1f9      	bne.n	800764a <_vfiprintf_r+0x96>
 8007656:	ebba 0b04 	subs.w	fp, sl, r4
 800765a:	d00b      	beq.n	8007674 <_vfiprintf_r+0xc0>
 800765c:	465b      	mov	r3, fp
 800765e:	4622      	mov	r2, r4
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ff94 	bl	8007590 <__sfputs_r>
 8007668:	3001      	adds	r0, #1
 800766a:	f000 80aa 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800766e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007670:	445a      	add	r2, fp
 8007672:	9209      	str	r2, [sp, #36]	; 0x24
 8007674:	f89a 3000 	ldrb.w	r3, [sl]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a2 	beq.w	80077c2 <_vfiprintf_r+0x20e>
 800767e:	2300      	movs	r3, #0
 8007680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	9304      	str	r3, [sp, #16]
 800768e:	9307      	str	r3, [sp, #28]
 8007690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007694:	931a      	str	r3, [sp, #104]	; 0x68
 8007696:	4654      	mov	r4, sl
 8007698:	2205      	movs	r2, #5
 800769a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800769e:	4858      	ldr	r0, [pc, #352]	; (8007800 <_vfiprintf_r+0x24c>)
 80076a0:	f7f8 fdbe 	bl	8000220 <memchr>
 80076a4:	9a04      	ldr	r2, [sp, #16]
 80076a6:	b9d8      	cbnz	r0, 80076e0 <_vfiprintf_r+0x12c>
 80076a8:	06d1      	lsls	r1, r2, #27
 80076aa:	bf44      	itt	mi
 80076ac:	2320      	movmi	r3, #32
 80076ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076b2:	0713      	lsls	r3, r2, #28
 80076b4:	bf44      	itt	mi
 80076b6:	232b      	movmi	r3, #43	; 0x2b
 80076b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076bc:	f89a 3000 	ldrb.w	r3, [sl]
 80076c0:	2b2a      	cmp	r3, #42	; 0x2a
 80076c2:	d015      	beq.n	80076f0 <_vfiprintf_r+0x13c>
 80076c4:	9a07      	ldr	r2, [sp, #28]
 80076c6:	4654      	mov	r4, sl
 80076c8:	2000      	movs	r0, #0
 80076ca:	f04f 0c0a 	mov.w	ip, #10
 80076ce:	4621      	mov	r1, r4
 80076d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d4:	3b30      	subs	r3, #48	; 0x30
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d94e      	bls.n	8007778 <_vfiprintf_r+0x1c4>
 80076da:	b1b0      	cbz	r0, 800770a <_vfiprintf_r+0x156>
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	e014      	b.n	800770a <_vfiprintf_r+0x156>
 80076e0:	eba0 0308 	sub.w	r3, r0, r8
 80076e4:	fa09 f303 	lsl.w	r3, r9, r3
 80076e8:	4313      	orrs	r3, r2
 80076ea:	9304      	str	r3, [sp, #16]
 80076ec:	46a2      	mov	sl, r4
 80076ee:	e7d2      	b.n	8007696 <_vfiprintf_r+0xe2>
 80076f0:	9b03      	ldr	r3, [sp, #12]
 80076f2:	1d19      	adds	r1, r3, #4
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	9103      	str	r1, [sp, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bfbb      	ittet	lt
 80076fc:	425b      	neglt	r3, r3
 80076fe:	f042 0202 	orrlt.w	r2, r2, #2
 8007702:	9307      	strge	r3, [sp, #28]
 8007704:	9307      	strlt	r3, [sp, #28]
 8007706:	bfb8      	it	lt
 8007708:	9204      	strlt	r2, [sp, #16]
 800770a:	7823      	ldrb	r3, [r4, #0]
 800770c:	2b2e      	cmp	r3, #46	; 0x2e
 800770e:	d10c      	bne.n	800772a <_vfiprintf_r+0x176>
 8007710:	7863      	ldrb	r3, [r4, #1]
 8007712:	2b2a      	cmp	r3, #42	; 0x2a
 8007714:	d135      	bne.n	8007782 <_vfiprintf_r+0x1ce>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	9203      	str	r2, [sp, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	bfb8      	it	lt
 8007722:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007726:	3402      	adds	r4, #2
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007810 <_vfiprintf_r+0x25c>
 800772e:	7821      	ldrb	r1, [r4, #0]
 8007730:	2203      	movs	r2, #3
 8007732:	4650      	mov	r0, sl
 8007734:	f7f8 fd74 	bl	8000220 <memchr>
 8007738:	b140      	cbz	r0, 800774c <_vfiprintf_r+0x198>
 800773a:	2340      	movs	r3, #64	; 0x40
 800773c:	eba0 000a 	sub.w	r0, r0, sl
 8007740:	fa03 f000 	lsl.w	r0, r3, r0
 8007744:	9b04      	ldr	r3, [sp, #16]
 8007746:	4303      	orrs	r3, r0
 8007748:	3401      	adds	r4, #1
 800774a:	9304      	str	r3, [sp, #16]
 800774c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007750:	482c      	ldr	r0, [pc, #176]	; (8007804 <_vfiprintf_r+0x250>)
 8007752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007756:	2206      	movs	r2, #6
 8007758:	f7f8 fd62 	bl	8000220 <memchr>
 800775c:	2800      	cmp	r0, #0
 800775e:	d03f      	beq.n	80077e0 <_vfiprintf_r+0x22c>
 8007760:	4b29      	ldr	r3, [pc, #164]	; (8007808 <_vfiprintf_r+0x254>)
 8007762:	bb1b      	cbnz	r3, 80077ac <_vfiprintf_r+0x1f8>
 8007764:	9b03      	ldr	r3, [sp, #12]
 8007766:	3307      	adds	r3, #7
 8007768:	f023 0307 	bic.w	r3, r3, #7
 800776c:	3308      	adds	r3, #8
 800776e:	9303      	str	r3, [sp, #12]
 8007770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007772:	443b      	add	r3, r7
 8007774:	9309      	str	r3, [sp, #36]	; 0x24
 8007776:	e767      	b.n	8007648 <_vfiprintf_r+0x94>
 8007778:	fb0c 3202 	mla	r2, ip, r2, r3
 800777c:	460c      	mov	r4, r1
 800777e:	2001      	movs	r0, #1
 8007780:	e7a5      	b.n	80076ce <_vfiprintf_r+0x11a>
 8007782:	2300      	movs	r3, #0
 8007784:	3401      	adds	r4, #1
 8007786:	9305      	str	r3, [sp, #20]
 8007788:	4619      	mov	r1, r3
 800778a:	f04f 0c0a 	mov.w	ip, #10
 800778e:	4620      	mov	r0, r4
 8007790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007794:	3a30      	subs	r2, #48	; 0x30
 8007796:	2a09      	cmp	r2, #9
 8007798:	d903      	bls.n	80077a2 <_vfiprintf_r+0x1ee>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0c5      	beq.n	800772a <_vfiprintf_r+0x176>
 800779e:	9105      	str	r1, [sp, #20]
 80077a0:	e7c3      	b.n	800772a <_vfiprintf_r+0x176>
 80077a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a6:	4604      	mov	r4, r0
 80077a8:	2301      	movs	r3, #1
 80077aa:	e7f0      	b.n	800778e <_vfiprintf_r+0x1da>
 80077ac:	ab03      	add	r3, sp, #12
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	462a      	mov	r2, r5
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <_vfiprintf_r+0x258>)
 80077b4:	a904      	add	r1, sp, #16
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7fd fdd6 	bl	8005368 <_printf_float>
 80077bc:	4607      	mov	r7, r0
 80077be:	1c78      	adds	r0, r7, #1
 80077c0:	d1d6      	bne.n	8007770 <_vfiprintf_r+0x1bc>
 80077c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077c4:	07d9      	lsls	r1, r3, #31
 80077c6:	d405      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077c8:	89ab      	ldrh	r3, [r5, #12]
 80077ca:	059a      	lsls	r2, r3, #22
 80077cc:	d402      	bmi.n	80077d4 <_vfiprintf_r+0x220>
 80077ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077d0:	f000 faaf 	bl	8007d32 <__retarget_lock_release_recursive>
 80077d4:	89ab      	ldrh	r3, [r5, #12]
 80077d6:	065b      	lsls	r3, r3, #25
 80077d8:	f53f af12 	bmi.w	8007600 <_vfiprintf_r+0x4c>
 80077dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077de:	e711      	b.n	8007604 <_vfiprintf_r+0x50>
 80077e0:	ab03      	add	r3, sp, #12
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	462a      	mov	r2, r5
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <_vfiprintf_r+0x258>)
 80077e8:	a904      	add	r1, sp, #16
 80077ea:	4630      	mov	r0, r6
 80077ec:	f7fe f860 	bl	80058b0 <_printf_i>
 80077f0:	e7e4      	b.n	80077bc <_vfiprintf_r+0x208>
 80077f2:	bf00      	nop
 80077f4:	080083f4 	.word	0x080083f4
 80077f8:	08008414 	.word	0x08008414
 80077fc:	080083d4 	.word	0x080083d4
 8007800:	0800827c 	.word	0x0800827c
 8007804:	08008286 	.word	0x08008286
 8007808:	08005369 	.word	0x08005369
 800780c:	08007591 	.word	0x08007591
 8007810:	08008282 	.word	0x08008282

08007814 <__swbuf_r>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	4614      	mov	r4, r2
 800781a:	4605      	mov	r5, r0
 800781c:	b118      	cbz	r0, 8007826 <__swbuf_r+0x12>
 800781e:	6983      	ldr	r3, [r0, #24]
 8007820:	b90b      	cbnz	r3, 8007826 <__swbuf_r+0x12>
 8007822:	f000 f9e7 	bl	8007bf4 <__sinit>
 8007826:	4b21      	ldr	r3, [pc, #132]	; (80078ac <__swbuf_r+0x98>)
 8007828:	429c      	cmp	r4, r3
 800782a:	d12b      	bne.n	8007884 <__swbuf_r+0x70>
 800782c:	686c      	ldr	r4, [r5, #4]
 800782e:	69a3      	ldr	r3, [r4, #24]
 8007830:	60a3      	str	r3, [r4, #8]
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	071a      	lsls	r2, r3, #28
 8007836:	d52f      	bpl.n	8007898 <__swbuf_r+0x84>
 8007838:	6923      	ldr	r3, [r4, #16]
 800783a:	b36b      	cbz	r3, 8007898 <__swbuf_r+0x84>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	1ac0      	subs	r0, r0, r3
 8007842:	6963      	ldr	r3, [r4, #20]
 8007844:	b2f6      	uxtb	r6, r6
 8007846:	4283      	cmp	r3, r0
 8007848:	4637      	mov	r7, r6
 800784a:	dc04      	bgt.n	8007856 <__swbuf_r+0x42>
 800784c:	4621      	mov	r1, r4
 800784e:	4628      	mov	r0, r5
 8007850:	f000 f93c 	bl	8007acc <_fflush_r>
 8007854:	bb30      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3b01      	subs	r3, #1
 800785a:	60a3      	str	r3, [r4, #8]
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	701e      	strb	r6, [r3, #0]
 8007864:	6963      	ldr	r3, [r4, #20]
 8007866:	3001      	adds	r0, #1
 8007868:	4283      	cmp	r3, r0
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x62>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d506      	bpl.n	8007880 <__swbuf_r+0x6c>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d104      	bne.n	8007880 <__swbuf_r+0x6c>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f927 	bl	8007acc <_fflush_r>
 800787e:	b988      	cbnz	r0, 80078a4 <__swbuf_r+0x90>
 8007880:	4638      	mov	r0, r7
 8007882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007884:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <__swbuf_r+0x9c>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d101      	bne.n	800788e <__swbuf_r+0x7a>
 800788a:	68ac      	ldr	r4, [r5, #8]
 800788c:	e7cf      	b.n	800782e <__swbuf_r+0x1a>
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <__swbuf_r+0xa0>)
 8007890:	429c      	cmp	r4, r3
 8007892:	bf08      	it	eq
 8007894:	68ec      	ldreq	r4, [r5, #12]
 8007896:	e7ca      	b.n	800782e <__swbuf_r+0x1a>
 8007898:	4621      	mov	r1, r4
 800789a:	4628      	mov	r0, r5
 800789c:	f000 f81a 	bl	80078d4 <__swsetup_r>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d0cb      	beq.n	800783c <__swbuf_r+0x28>
 80078a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80078a8:	e7ea      	b.n	8007880 <__swbuf_r+0x6c>
 80078aa:	bf00      	nop
 80078ac:	080083f4 	.word	0x080083f4
 80078b0:	08008414 	.word	0x08008414
 80078b4:	080083d4 	.word	0x080083d4

080078b8 <__ascii_wctomb>:
 80078b8:	b149      	cbz	r1, 80078ce <__ascii_wctomb+0x16>
 80078ba:	2aff      	cmp	r2, #255	; 0xff
 80078bc:	bf85      	ittet	hi
 80078be:	238a      	movhi	r3, #138	; 0x8a
 80078c0:	6003      	strhi	r3, [r0, #0]
 80078c2:	700a      	strbls	r2, [r1, #0]
 80078c4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80078c8:	bf98      	it	ls
 80078ca:	2001      	movls	r0, #1
 80078cc:	4770      	bx	lr
 80078ce:	4608      	mov	r0, r1
 80078d0:	4770      	bx	lr
	...

080078d4 <__swsetup_r>:
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <__swsetup_r+0xcc>)
 80078d6:	b570      	push	{r4, r5, r6, lr}
 80078d8:	681d      	ldr	r5, [r3, #0]
 80078da:	4606      	mov	r6, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	b125      	cbz	r5, 80078ea <__swsetup_r+0x16>
 80078e0:	69ab      	ldr	r3, [r5, #24]
 80078e2:	b913      	cbnz	r3, 80078ea <__swsetup_r+0x16>
 80078e4:	4628      	mov	r0, r5
 80078e6:	f000 f985 	bl	8007bf4 <__sinit>
 80078ea:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <__swsetup_r+0xd0>)
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d10f      	bne.n	8007910 <__swsetup_r+0x3c>
 80078f0:	686c      	ldr	r4, [r5, #4]
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078f8:	0719      	lsls	r1, r3, #28
 80078fa:	d42c      	bmi.n	8007956 <__swsetup_r+0x82>
 80078fc:	06dd      	lsls	r5, r3, #27
 80078fe:	d411      	bmi.n	8007924 <__swsetup_r+0x50>
 8007900:	2309      	movs	r3, #9
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800790e:	e03e      	b.n	800798e <__swsetup_r+0xba>
 8007910:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <__swsetup_r+0xd4>)
 8007912:	429c      	cmp	r4, r3
 8007914:	d101      	bne.n	800791a <__swsetup_r+0x46>
 8007916:	68ac      	ldr	r4, [r5, #8]
 8007918:	e7eb      	b.n	80078f2 <__swsetup_r+0x1e>
 800791a:	4b24      	ldr	r3, [pc, #144]	; (80079ac <__swsetup_r+0xd8>)
 800791c:	429c      	cmp	r4, r3
 800791e:	bf08      	it	eq
 8007920:	68ec      	ldreq	r4, [r5, #12]
 8007922:	e7e6      	b.n	80078f2 <__swsetup_r+0x1e>
 8007924:	0758      	lsls	r0, r3, #29
 8007926:	d512      	bpl.n	800794e <__swsetup_r+0x7a>
 8007928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800792a:	b141      	cbz	r1, 800793e <__swsetup_r+0x6a>
 800792c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007930:	4299      	cmp	r1, r3
 8007932:	d002      	beq.n	800793a <__swsetup_r+0x66>
 8007934:	4630      	mov	r0, r6
 8007936:	f7ff fb31 	bl	8006f9c <_free_r>
 800793a:	2300      	movs	r3, #0
 800793c:	6363      	str	r3, [r4, #52]	; 0x34
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	2300      	movs	r3, #0
 8007948:	6063      	str	r3, [r4, #4]
 800794a:	6923      	ldr	r3, [r4, #16]
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	89a3      	ldrh	r3, [r4, #12]
 8007950:	f043 0308 	orr.w	r3, r3, #8
 8007954:	81a3      	strh	r3, [r4, #12]
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	b94b      	cbnz	r3, 800796e <__swsetup_r+0x9a>
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d003      	beq.n	800796e <__swsetup_r+0x9a>
 8007966:	4621      	mov	r1, r4
 8007968:	4630      	mov	r0, r6
 800796a:	f000 fa09 	bl	8007d80 <__smakebuf_r>
 800796e:	89a0      	ldrh	r0, [r4, #12]
 8007970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007974:	f010 0301 	ands.w	r3, r0, #1
 8007978:	d00a      	beq.n	8007990 <__swsetup_r+0xbc>
 800797a:	2300      	movs	r3, #0
 800797c:	60a3      	str	r3, [r4, #8]
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	425b      	negs	r3, r3
 8007982:	61a3      	str	r3, [r4, #24]
 8007984:	6923      	ldr	r3, [r4, #16]
 8007986:	b943      	cbnz	r3, 800799a <__swsetup_r+0xc6>
 8007988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800798c:	d1ba      	bne.n	8007904 <__swsetup_r+0x30>
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	0781      	lsls	r1, r0, #30
 8007992:	bf58      	it	pl
 8007994:	6963      	ldrpl	r3, [r4, #20]
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	e7f4      	b.n	8007984 <__swsetup_r+0xb0>
 800799a:	2000      	movs	r0, #0
 800799c:	e7f7      	b.n	800798e <__swsetup_r+0xba>
 800799e:	bf00      	nop
 80079a0:	2000000c 	.word	0x2000000c
 80079a4:	080083f4 	.word	0x080083f4
 80079a8:	08008414 	.word	0x08008414
 80079ac:	080083d4 	.word	0x080083d4

080079b0 <abort>:
 80079b0:	b508      	push	{r3, lr}
 80079b2:	2006      	movs	r0, #6
 80079b4:	f000 fa54 	bl	8007e60 <raise>
 80079b8:	2001      	movs	r0, #1
 80079ba:	f7fa f81f 	bl	80019fc <_exit>
	...

080079c0 <__sflush_r>:
 80079c0:	898a      	ldrh	r2, [r1, #12]
 80079c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	4605      	mov	r5, r0
 80079c8:	0710      	lsls	r0, r2, #28
 80079ca:	460c      	mov	r4, r1
 80079cc:	d458      	bmi.n	8007a80 <__sflush_r+0xc0>
 80079ce:	684b      	ldr	r3, [r1, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc05      	bgt.n	80079e0 <__sflush_r+0x20>
 80079d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	dc02      	bgt.n	80079e0 <__sflush_r+0x20>
 80079da:	2000      	movs	r0, #0
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e2:	2e00      	cmp	r6, #0
 80079e4:	d0f9      	beq.n	80079da <__sflush_r+0x1a>
 80079e6:	2300      	movs	r3, #0
 80079e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079ec:	682f      	ldr	r7, [r5, #0]
 80079ee:	602b      	str	r3, [r5, #0]
 80079f0:	d032      	beq.n	8007a58 <__sflush_r+0x98>
 80079f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	075a      	lsls	r2, r3, #29
 80079f8:	d505      	bpl.n	8007a06 <__sflush_r+0x46>
 80079fa:	6863      	ldr	r3, [r4, #4]
 80079fc:	1ac0      	subs	r0, r0, r3
 80079fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a00:	b10b      	cbz	r3, 8007a06 <__sflush_r+0x46>
 8007a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a04:	1ac0      	subs	r0, r0, r3
 8007a06:	2300      	movs	r3, #0
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b0      	blx	r6
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	d106      	bne.n	8007a26 <__sflush_r+0x66>
 8007a18:	6829      	ldr	r1, [r5, #0]
 8007a1a:	291d      	cmp	r1, #29
 8007a1c:	d82c      	bhi.n	8007a78 <__sflush_r+0xb8>
 8007a1e:	4a2a      	ldr	r2, [pc, #168]	; (8007ac8 <__sflush_r+0x108>)
 8007a20:	40ca      	lsrs	r2, r1
 8007a22:	07d6      	lsls	r6, r2, #31
 8007a24:	d528      	bpl.n	8007a78 <__sflush_r+0xb8>
 8007a26:	2200      	movs	r2, #0
 8007a28:	6062      	str	r2, [r4, #4]
 8007a2a:	04d9      	lsls	r1, r3, #19
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	6022      	str	r2, [r4, #0]
 8007a30:	d504      	bpl.n	8007a3c <__sflush_r+0x7c>
 8007a32:	1c42      	adds	r2, r0, #1
 8007a34:	d101      	bne.n	8007a3a <__sflush_r+0x7a>
 8007a36:	682b      	ldr	r3, [r5, #0]
 8007a38:	b903      	cbnz	r3, 8007a3c <__sflush_r+0x7c>
 8007a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a3e:	602f      	str	r7, [r5, #0]
 8007a40:	2900      	cmp	r1, #0
 8007a42:	d0ca      	beq.n	80079da <__sflush_r+0x1a>
 8007a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a48:	4299      	cmp	r1, r3
 8007a4a:	d002      	beq.n	8007a52 <__sflush_r+0x92>
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f7ff faa5 	bl	8006f9c <_free_r>
 8007a52:	2000      	movs	r0, #0
 8007a54:	6360      	str	r0, [r4, #52]	; 0x34
 8007a56:	e7c1      	b.n	80079dc <__sflush_r+0x1c>
 8007a58:	6a21      	ldr	r1, [r4, #32]
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	1c41      	adds	r1, r0, #1
 8007a62:	d1c7      	bne.n	80079f4 <__sflush_r+0x34>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0c4      	beq.n	80079f4 <__sflush_r+0x34>
 8007a6a:	2b1d      	cmp	r3, #29
 8007a6c:	d001      	beq.n	8007a72 <__sflush_r+0xb2>
 8007a6e:	2b16      	cmp	r3, #22
 8007a70:	d101      	bne.n	8007a76 <__sflush_r+0xb6>
 8007a72:	602f      	str	r7, [r5, #0]
 8007a74:	e7b1      	b.n	80079da <__sflush_r+0x1a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a7c:	81a3      	strh	r3, [r4, #12]
 8007a7e:	e7ad      	b.n	80079dc <__sflush_r+0x1c>
 8007a80:	690f      	ldr	r7, [r1, #16]
 8007a82:	2f00      	cmp	r7, #0
 8007a84:	d0a9      	beq.n	80079da <__sflush_r+0x1a>
 8007a86:	0793      	lsls	r3, r2, #30
 8007a88:	680e      	ldr	r6, [r1, #0]
 8007a8a:	bf08      	it	eq
 8007a8c:	694b      	ldreq	r3, [r1, #20]
 8007a8e:	600f      	str	r7, [r1, #0]
 8007a90:	bf18      	it	ne
 8007a92:	2300      	movne	r3, #0
 8007a94:	eba6 0807 	sub.w	r8, r6, r7
 8007a98:	608b      	str	r3, [r1, #8]
 8007a9a:	f1b8 0f00 	cmp.w	r8, #0
 8007a9e:	dd9c      	ble.n	80079da <__sflush_r+0x1a>
 8007aa0:	6a21      	ldr	r1, [r4, #32]
 8007aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aa4:	4643      	mov	r3, r8
 8007aa6:	463a      	mov	r2, r7
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b0      	blx	r6
 8007aac:	2800      	cmp	r0, #0
 8007aae:	dc06      	bgt.n	8007abe <__sflush_r+0xfe>
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007abc:	e78e      	b.n	80079dc <__sflush_r+0x1c>
 8007abe:	4407      	add	r7, r0
 8007ac0:	eba8 0800 	sub.w	r8, r8, r0
 8007ac4:	e7e9      	b.n	8007a9a <__sflush_r+0xda>
 8007ac6:	bf00      	nop
 8007ac8:	20400001 	.word	0x20400001

08007acc <_fflush_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	4605      	mov	r5, r0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	b913      	cbnz	r3, 8007adc <_fflush_r+0x10>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	4628      	mov	r0, r5
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	b118      	cbz	r0, 8007ae6 <_fflush_r+0x1a>
 8007ade:	6983      	ldr	r3, [r0, #24]
 8007ae0:	b90b      	cbnz	r3, 8007ae6 <_fflush_r+0x1a>
 8007ae2:	f000 f887 	bl	8007bf4 <__sinit>
 8007ae6:	4b14      	ldr	r3, [pc, #80]	; (8007b38 <_fflush_r+0x6c>)
 8007ae8:	429c      	cmp	r4, r3
 8007aea:	d11b      	bne.n	8007b24 <_fflush_r+0x58>
 8007aec:	686c      	ldr	r4, [r5, #4]
 8007aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0ef      	beq.n	8007ad6 <_fflush_r+0xa>
 8007af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af8:	07d0      	lsls	r0, r2, #31
 8007afa:	d404      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007afc:	0599      	lsls	r1, r3, #22
 8007afe:	d402      	bmi.n	8007b06 <_fflush_r+0x3a>
 8007b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b02:	f000 f915 	bl	8007d30 <__retarget_lock_acquire_recursive>
 8007b06:	4628      	mov	r0, r5
 8007b08:	4621      	mov	r1, r4
 8007b0a:	f7ff ff59 	bl	80079c0 <__sflush_r>
 8007b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b10:	07da      	lsls	r2, r3, #31
 8007b12:	4605      	mov	r5, r0
 8007b14:	d4e0      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b16:	89a3      	ldrh	r3, [r4, #12]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	d4dd      	bmi.n	8007ad8 <_fflush_r+0xc>
 8007b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1e:	f000 f908 	bl	8007d32 <__retarget_lock_release_recursive>
 8007b22:	e7d9      	b.n	8007ad8 <_fflush_r+0xc>
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <_fflush_r+0x70>)
 8007b26:	429c      	cmp	r4, r3
 8007b28:	d101      	bne.n	8007b2e <_fflush_r+0x62>
 8007b2a:	68ac      	ldr	r4, [r5, #8]
 8007b2c:	e7df      	b.n	8007aee <_fflush_r+0x22>
 8007b2e:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <_fflush_r+0x74>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	bf08      	it	eq
 8007b34:	68ec      	ldreq	r4, [r5, #12]
 8007b36:	e7da      	b.n	8007aee <_fflush_r+0x22>
 8007b38:	080083f4 	.word	0x080083f4
 8007b3c:	08008414 	.word	0x08008414
 8007b40:	080083d4 	.word	0x080083d4

08007b44 <std>:
 8007b44:	2300      	movs	r3, #0
 8007b46:	b510      	push	{r4, lr}
 8007b48:	4604      	mov	r4, r0
 8007b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b52:	6083      	str	r3, [r0, #8]
 8007b54:	8181      	strh	r1, [r0, #12]
 8007b56:	6643      	str	r3, [r0, #100]	; 0x64
 8007b58:	81c2      	strh	r2, [r0, #14]
 8007b5a:	6183      	str	r3, [r0, #24]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	2208      	movs	r2, #8
 8007b60:	305c      	adds	r0, #92	; 0x5c
 8007b62:	f7fd fb59 	bl	8005218 <memset>
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <std+0x38>)
 8007b68:	6263      	str	r3, [r4, #36]	; 0x24
 8007b6a:	4b05      	ldr	r3, [pc, #20]	; (8007b80 <std+0x3c>)
 8007b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b6e:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <std+0x40>)
 8007b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <std+0x44>)
 8007b74:	6224      	str	r4, [r4, #32]
 8007b76:	6323      	str	r3, [r4, #48]	; 0x30
 8007b78:	bd10      	pop	{r4, pc}
 8007b7a:	bf00      	nop
 8007b7c:	08007e99 	.word	0x08007e99
 8007b80:	08007ebb 	.word	0x08007ebb
 8007b84:	08007ef3 	.word	0x08007ef3
 8007b88:	08007f17 	.word	0x08007f17

08007b8c <_cleanup_r>:
 8007b8c:	4901      	ldr	r1, [pc, #4]	; (8007b94 <_cleanup_r+0x8>)
 8007b8e:	f000 b8af 	b.w	8007cf0 <_fwalk_reent>
 8007b92:	bf00      	nop
 8007b94:	08007acd 	.word	0x08007acd

08007b98 <__sfmoreglue>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	2268      	movs	r2, #104	; 0x68
 8007b9c:	1e4d      	subs	r5, r1, #1
 8007b9e:	4355      	muls	r5, r2
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ba6:	f7ff fa65 	bl	8007074 <_malloc_r>
 8007baa:	4604      	mov	r4, r0
 8007bac:	b140      	cbz	r0, 8007bc0 <__sfmoreglue+0x28>
 8007bae:	2100      	movs	r1, #0
 8007bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8007bb4:	300c      	adds	r0, #12
 8007bb6:	60a0      	str	r0, [r4, #8]
 8007bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bbc:	f7fd fb2c 	bl	8005218 <memset>
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	bd70      	pop	{r4, r5, r6, pc}

08007bc4 <__sfp_lock_acquire>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	; (8007bcc <__sfp_lock_acquire+0x8>)
 8007bc6:	f000 b8b3 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007bca:	bf00      	nop
 8007bcc:	20000a89 	.word	0x20000a89

08007bd0 <__sfp_lock_release>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <__sfp_lock_release+0x8>)
 8007bd2:	f000 b8ae 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	20000a89 	.word	0x20000a89

08007bdc <__sinit_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sinit_lock_acquire+0x8>)
 8007bde:	f000 b8a7 	b.w	8007d30 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	20000a8a 	.word	0x20000a8a

08007be8 <__sinit_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sinit_lock_release+0x8>)
 8007bea:	f000 b8a2 	b.w	8007d32 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	20000a8a 	.word	0x20000a8a

08007bf4 <__sinit>:
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	f7ff fff0 	bl	8007bdc <__sinit_lock_acquire>
 8007bfc:	69a3      	ldr	r3, [r4, #24]
 8007bfe:	b11b      	cbz	r3, 8007c08 <__sinit+0x14>
 8007c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c04:	f7ff bff0 	b.w	8007be8 <__sinit_lock_release>
 8007c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c0e:	4b13      	ldr	r3, [pc, #76]	; (8007c5c <__sinit+0x68>)
 8007c10:	4a13      	ldr	r2, [pc, #76]	; (8007c60 <__sinit+0x6c>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c16:	42a3      	cmp	r3, r4
 8007c18:	bf04      	itt	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	61a3      	streq	r3, [r4, #24]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	f000 f820 	bl	8007c64 <__sfp>
 8007c24:	6060      	str	r0, [r4, #4]
 8007c26:	4620      	mov	r0, r4
 8007c28:	f000 f81c 	bl	8007c64 <__sfp>
 8007c2c:	60a0      	str	r0, [r4, #8]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f818 	bl	8007c64 <__sfp>
 8007c34:	2200      	movs	r2, #0
 8007c36:	60e0      	str	r0, [r4, #12]
 8007c38:	2104      	movs	r1, #4
 8007c3a:	6860      	ldr	r0, [r4, #4]
 8007c3c:	f7ff ff82 	bl	8007b44 <std>
 8007c40:	68a0      	ldr	r0, [r4, #8]
 8007c42:	2201      	movs	r2, #1
 8007c44:	2109      	movs	r1, #9
 8007c46:	f7ff ff7d 	bl	8007b44 <std>
 8007c4a:	68e0      	ldr	r0, [r4, #12]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	2112      	movs	r1, #18
 8007c50:	f7ff ff78 	bl	8007b44 <std>
 8007c54:	2301      	movs	r3, #1
 8007c56:	61a3      	str	r3, [r4, #24]
 8007c58:	e7d2      	b.n	8007c00 <__sinit+0xc>
 8007c5a:	bf00      	nop
 8007c5c:	08008058 	.word	0x08008058
 8007c60:	08007b8d 	.word	0x08007b8d

08007c64 <__sfp>:
 8007c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c66:	4607      	mov	r7, r0
 8007c68:	f7ff ffac 	bl	8007bc4 <__sfp_lock_acquire>
 8007c6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ce8 <__sfp+0x84>)
 8007c6e:	681e      	ldr	r6, [r3, #0]
 8007c70:	69b3      	ldr	r3, [r6, #24]
 8007c72:	b913      	cbnz	r3, 8007c7a <__sfp+0x16>
 8007c74:	4630      	mov	r0, r6
 8007c76:	f7ff ffbd 	bl	8007bf4 <__sinit>
 8007c7a:	3648      	adds	r6, #72	; 0x48
 8007c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	d503      	bpl.n	8007c8c <__sfp+0x28>
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	b30b      	cbz	r3, 8007ccc <__sfp+0x68>
 8007c88:	6836      	ldr	r6, [r6, #0]
 8007c8a:	e7f7      	b.n	8007c7c <__sfp+0x18>
 8007c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c90:	b9d5      	cbnz	r5, 8007cc8 <__sfp+0x64>
 8007c92:	4b16      	ldr	r3, [pc, #88]	; (8007cec <__sfp+0x88>)
 8007c94:	60e3      	str	r3, [r4, #12]
 8007c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8007c9c:	f000 f847 	bl	8007d2e <__retarget_lock_init_recursive>
 8007ca0:	f7ff ff96 	bl	8007bd0 <__sfp_lock_release>
 8007ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cac:	6025      	str	r5, [r4, #0]
 8007cae:	61a5      	str	r5, [r4, #24]
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cb8:	f7fd faae 	bl	8005218 <memset>
 8007cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cc8:	3468      	adds	r4, #104	; 0x68
 8007cca:	e7d9      	b.n	8007c80 <__sfp+0x1c>
 8007ccc:	2104      	movs	r1, #4
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff ff62 	bl	8007b98 <__sfmoreglue>
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	6030      	str	r0, [r6, #0]
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	d1d5      	bne.n	8007c88 <__sfp+0x24>
 8007cdc:	f7ff ff78 	bl	8007bd0 <__sfp_lock_release>
 8007ce0:	230c      	movs	r3, #12
 8007ce2:	603b      	str	r3, [r7, #0]
 8007ce4:	e7ee      	b.n	8007cc4 <__sfp+0x60>
 8007ce6:	bf00      	nop
 8007ce8:	08008058 	.word	0x08008058
 8007cec:	ffff0001 	.word	0xffff0001

08007cf0 <_fwalk_reent>:
 8007cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	4688      	mov	r8, r1
 8007cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cfc:	2700      	movs	r7, #0
 8007cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d02:	f1b9 0901 	subs.w	r9, r9, #1
 8007d06:	d505      	bpl.n	8007d14 <_fwalk_reent+0x24>
 8007d08:	6824      	ldr	r4, [r4, #0]
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	d1f7      	bne.n	8007cfe <_fwalk_reent+0xe>
 8007d0e:	4638      	mov	r0, r7
 8007d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d907      	bls.n	8007d2a <_fwalk_reent+0x3a>
 8007d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	d003      	beq.n	8007d2a <_fwalk_reent+0x3a>
 8007d22:	4629      	mov	r1, r5
 8007d24:	4630      	mov	r0, r6
 8007d26:	47c0      	blx	r8
 8007d28:	4307      	orrs	r7, r0
 8007d2a:	3568      	adds	r5, #104	; 0x68
 8007d2c:	e7e9      	b.n	8007d02 <_fwalk_reent+0x12>

08007d2e <__retarget_lock_init_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <__retarget_lock_acquire_recursive>:
 8007d30:	4770      	bx	lr

08007d32 <__retarget_lock_release_recursive>:
 8007d32:	4770      	bx	lr

08007d34 <__swhatbuf_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	b096      	sub	sp, #88	; 0x58
 8007d40:	4614      	mov	r4, r2
 8007d42:	461d      	mov	r5, r3
 8007d44:	da08      	bge.n	8007d58 <__swhatbuf_r+0x24>
 8007d46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	602a      	str	r2, [r5, #0]
 8007d4e:	061a      	lsls	r2, r3, #24
 8007d50:	d410      	bmi.n	8007d74 <__swhatbuf_r+0x40>
 8007d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d56:	e00e      	b.n	8007d76 <__swhatbuf_r+0x42>
 8007d58:	466a      	mov	r2, sp
 8007d5a:	f000 f903 	bl	8007f64 <_fstat_r>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	dbf1      	blt.n	8007d46 <__swhatbuf_r+0x12>
 8007d62:	9a01      	ldr	r2, [sp, #4]
 8007d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d6c:	425a      	negs	r2, r3
 8007d6e:	415a      	adcs	r2, r3
 8007d70:	602a      	str	r2, [r5, #0]
 8007d72:	e7ee      	b.n	8007d52 <__swhatbuf_r+0x1e>
 8007d74:	2340      	movs	r3, #64	; 0x40
 8007d76:	2000      	movs	r0, #0
 8007d78:	6023      	str	r3, [r4, #0]
 8007d7a:	b016      	add	sp, #88	; 0x58
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d80 <__smakebuf_r>:
 8007d80:	898b      	ldrh	r3, [r1, #12]
 8007d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d84:	079d      	lsls	r5, r3, #30
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	d507      	bpl.n	8007d9c <__smakebuf_r+0x1c>
 8007d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d90:	6023      	str	r3, [r4, #0]
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	2301      	movs	r3, #1
 8007d96:	6163      	str	r3, [r4, #20]
 8007d98:	b002      	add	sp, #8
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
 8007d9c:	ab01      	add	r3, sp, #4
 8007d9e:	466a      	mov	r2, sp
 8007da0:	f7ff ffc8 	bl	8007d34 <__swhatbuf_r>
 8007da4:	9900      	ldr	r1, [sp, #0]
 8007da6:	4605      	mov	r5, r0
 8007da8:	4630      	mov	r0, r6
 8007daa:	f7ff f963 	bl	8007074 <_malloc_r>
 8007dae:	b948      	cbnz	r0, 8007dc4 <__smakebuf_r+0x44>
 8007db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db4:	059a      	lsls	r2, r3, #22
 8007db6:	d4ef      	bmi.n	8007d98 <__smakebuf_r+0x18>
 8007db8:	f023 0303 	bic.w	r3, r3, #3
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	e7e3      	b.n	8007d8c <__smakebuf_r+0xc>
 8007dc4:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <__smakebuf_r+0x7c>)
 8007dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dc8:	89a3      	ldrh	r3, [r4, #12]
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	9b00      	ldr	r3, [sp, #0]
 8007dd4:	6163      	str	r3, [r4, #20]
 8007dd6:	9b01      	ldr	r3, [sp, #4]
 8007dd8:	6120      	str	r0, [r4, #16]
 8007dda:	b15b      	cbz	r3, 8007df4 <__smakebuf_r+0x74>
 8007ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f8d1 	bl	8007f88 <_isatty_r>
 8007de6:	b128      	cbz	r0, 8007df4 <__smakebuf_r+0x74>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f023 0303 	bic.w	r3, r3, #3
 8007dee:	f043 0301 	orr.w	r3, r3, #1
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	89a0      	ldrh	r0, [r4, #12]
 8007df6:	4305      	orrs	r5, r0
 8007df8:	81a5      	strh	r5, [r4, #12]
 8007dfa:	e7cd      	b.n	8007d98 <__smakebuf_r+0x18>
 8007dfc:	08007b8d 	.word	0x08007b8d

08007e00 <_malloc_usable_size_r>:
 8007e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e04:	1f18      	subs	r0, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbc      	itt	lt
 8007e0a:	580b      	ldrlt	r3, [r1, r0]
 8007e0c:	18c0      	addlt	r0, r0, r3
 8007e0e:	4770      	bx	lr

08007e10 <_raise_r>:
 8007e10:	291f      	cmp	r1, #31
 8007e12:	b538      	push	{r3, r4, r5, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	460d      	mov	r5, r1
 8007e18:	d904      	bls.n	8007e24 <_raise_r+0x14>
 8007e1a:	2316      	movs	r3, #22
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e22:	bd38      	pop	{r3, r4, r5, pc}
 8007e24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e26:	b112      	cbz	r2, 8007e2e <_raise_r+0x1e>
 8007e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e2c:	b94b      	cbnz	r3, 8007e42 <_raise_r+0x32>
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f830 	bl	8007e94 <_getpid_r>
 8007e34:	462a      	mov	r2, r5
 8007e36:	4601      	mov	r1, r0
 8007e38:	4620      	mov	r0, r4
 8007e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e3e:	f000 b817 	b.w	8007e70 <_kill_r>
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d00a      	beq.n	8007e5c <_raise_r+0x4c>
 8007e46:	1c59      	adds	r1, r3, #1
 8007e48:	d103      	bne.n	8007e52 <_raise_r+0x42>
 8007e4a:	2316      	movs	r3, #22
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	e7e7      	b.n	8007e22 <_raise_r+0x12>
 8007e52:	2400      	movs	r4, #0
 8007e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e58:	4628      	mov	r0, r5
 8007e5a:	4798      	blx	r3
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	e7e0      	b.n	8007e22 <_raise_r+0x12>

08007e60 <raise>:
 8007e60:	4b02      	ldr	r3, [pc, #8]	; (8007e6c <raise+0xc>)
 8007e62:	4601      	mov	r1, r0
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	f7ff bfd3 	b.w	8007e10 <_raise_r>
 8007e6a:	bf00      	nop
 8007e6c:	2000000c 	.word	0x2000000c

08007e70 <_kill_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4d07      	ldr	r5, [pc, #28]	; (8007e90 <_kill_r+0x20>)
 8007e74:	2300      	movs	r3, #0
 8007e76:	4604      	mov	r4, r0
 8007e78:	4608      	mov	r0, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	602b      	str	r3, [r5, #0]
 8007e7e:	f7f9 fdad 	bl	80019dc <_kill>
 8007e82:	1c43      	adds	r3, r0, #1
 8007e84:	d102      	bne.n	8007e8c <_kill_r+0x1c>
 8007e86:	682b      	ldr	r3, [r5, #0]
 8007e88:	b103      	cbz	r3, 8007e8c <_kill_r+0x1c>
 8007e8a:	6023      	str	r3, [r4, #0]
 8007e8c:	bd38      	pop	{r3, r4, r5, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000a84 	.word	0x20000a84

08007e94 <_getpid_r>:
 8007e94:	f7f9 bd9a 	b.w	80019cc <_getpid>

08007e98 <__sread>:
 8007e98:	b510      	push	{r4, lr}
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea0:	f000 f894 	bl	8007fcc <_read_r>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	bfab      	itete	ge
 8007ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8007eac:	181b      	addge	r3, r3, r0
 8007eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eb2:	bfac      	ite	ge
 8007eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb6:	81a3      	strhlt	r3, [r4, #12]
 8007eb8:	bd10      	pop	{r4, pc}

08007eba <__swrite>:
 8007eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	898b      	ldrh	r3, [r1, #12]
 8007ec2:	05db      	lsls	r3, r3, #23
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4616      	mov	r6, r2
 8007eca:	d505      	bpl.n	8007ed8 <__swrite+0x1e>
 8007ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f000 f868 	bl	8007fa8 <_lseek_r>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	4628      	mov	r0, r5
 8007eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	f000 b817 	b.w	8007f20 <_write_r>

08007ef2 <__sseek>:
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007efa:	f000 f855 	bl	8007fa8 <_lseek_r>
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	89a3      	ldrh	r3, [r4, #12]
 8007f02:	bf15      	itete	ne
 8007f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0e:	81a3      	strheq	r3, [r4, #12]
 8007f10:	bf18      	it	ne
 8007f12:	81a3      	strhne	r3, [r4, #12]
 8007f14:	bd10      	pop	{r4, pc}

08007f16 <__sclose>:
 8007f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1a:	f000 b813 	b.w	8007f44 <_close_r>
	...

08007f20 <_write_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_write_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f9 fd8b 	bl	8001a4a <_write>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_write_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_write_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000a84 	.word	0x20000a84

08007f44 <_close_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	4d06      	ldr	r5, [pc, #24]	; (8007f60 <_close_r+0x1c>)
 8007f48:	2300      	movs	r3, #0
 8007f4a:	4604      	mov	r4, r0
 8007f4c:	4608      	mov	r0, r1
 8007f4e:	602b      	str	r3, [r5, #0]
 8007f50:	f7f9 fd97 	bl	8001a82 <_close>
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	d102      	bne.n	8007f5e <_close_r+0x1a>
 8007f58:	682b      	ldr	r3, [r5, #0]
 8007f5a:	b103      	cbz	r3, 8007f5e <_close_r+0x1a>
 8007f5c:	6023      	str	r3, [r4, #0]
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	20000a84 	.word	0x20000a84

08007f64 <_fstat_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d07      	ldr	r5, [pc, #28]	; (8007f84 <_fstat_r+0x20>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	4611      	mov	r1, r2
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	f7f9 fd92 	bl	8001a9a <_fstat>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	d102      	bne.n	8007f80 <_fstat_r+0x1c>
 8007f7a:	682b      	ldr	r3, [r5, #0]
 8007f7c:	b103      	cbz	r3, 8007f80 <_fstat_r+0x1c>
 8007f7e:	6023      	str	r3, [r4, #0]
 8007f80:	bd38      	pop	{r3, r4, r5, pc}
 8007f82:	bf00      	nop
 8007f84:	20000a84 	.word	0x20000a84

08007f88 <_isatty_r>:
 8007f88:	b538      	push	{r3, r4, r5, lr}
 8007f8a:	4d06      	ldr	r5, [pc, #24]	; (8007fa4 <_isatty_r+0x1c>)
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	602b      	str	r3, [r5, #0]
 8007f94:	f7f9 fd91 	bl	8001aba <_isatty>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_isatty_r+0x1a>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_isatty_r+0x1a>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20000a84 	.word	0x20000a84

08007fa8 <_lseek_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	; (8007fc8 <_lseek_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f9 fd8a 	bl	8001ad0 <_lseek>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_lseek_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_lseek_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000a84 	.word	0x20000a84

08007fcc <_read_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_read_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f9 fd18 	bl	8001a10 <_read>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_read_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_read_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20000a84 	.word	0x20000a84

08007ff0 <_init>:
 8007ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff2:	bf00      	nop
 8007ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ff6:	bc08      	pop	{r3}
 8007ff8:	469e      	mov	lr, r3
 8007ffa:	4770      	bx	lr

08007ffc <_fini>:
 8007ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffe:	bf00      	nop
 8008000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008002:	bc08      	pop	{r3}
 8008004:	469e      	mov	lr, r3
 8008006:	4770      	bx	lr
